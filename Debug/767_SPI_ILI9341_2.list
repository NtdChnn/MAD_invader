
767_SPI_ILI9341_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b204  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014bc  0800b408  0800b408  0001b408  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c8c4  0800c8c4  00020230  2**0
                  CONTENTS
  4 .ARM          00000008  0800c8c4  0800c8c4  0001c8c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c8cc  0800c8cc  00020230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c8cc  0800c8cc  0001c8cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c8d0  0800c8d0  0001c8d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  0800c8d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  20000230  0800cb04  00020230  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b8  0800cb04  000205b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b4ad  00000000  00000000  0002025e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003af4  00000000  00000000  0003b70b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e0  00000000  00000000  0003f200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001438  00000000  00000000  000407e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005a04  00000000  00000000  00041c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d066  00000000  00000000  0004761c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001022f7  00000000  00000000  00064682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166979  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b78  00000000  00000000  001669cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000230 	.word	0x20000230
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b3ec 	.word	0x0800b3ec

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000234 	.word	0x20000234
 800023c:	0800b3ec 	.word	0x0800b3ec

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	460a      	mov	r2, r1
 80005fe:	80fb      	strh	r3, [r7, #6]
 8000600:	4613      	mov	r3, r2
 8000602:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 8000604:	88fa      	ldrh	r2, [r7, #6]
 8000606:	88bb      	ldrh	r3, [r7, #4]
 8000608:	4413      	add	r3, r2
 800060a:	2b3f      	cmp	r3, #63	; 0x3f
 800060c:	dc01      	bgt.n	8000612 <bytestowrite+0x1e>
 800060e:	88fb      	ldrh	r3, [r7, #6]
 8000610:	e003      	b.n	800061a <bytestowrite+0x26>
	else return PAGE_SIZE-offset;
 8000612:	88bb      	ldrh	r3, [r7, #4]
 8000614:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000618:	b29b      	uxth	r3, r3
}
 800061a:	4618      	mov	r0, r3
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
	...

08000628 <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08e      	sub	sp, #56	; 0x38
 800062c:	af04      	add	r7, sp, #16
 800062e:	60ba      	str	r2, [r7, #8]
 8000630:	461a      	mov	r2, r3
 8000632:	4603      	mov	r3, r0
 8000634:	81fb      	strh	r3, [r7, #14]
 8000636:	460b      	mov	r3, r1
 8000638:	81bb      	strh	r3, [r7, #12]
 800063a:	4613      	mov	r3, r2
 800063c:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 800063e:	2306      	movs	r3, #6
 8000640:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8000642:	89fb      	ldrh	r3, [r7, #14]
 8000644:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8000646:	88fa      	ldrh	r2, [r7, #6]
 8000648:	89bb      	ldrh	r3, [r7, #12]
 800064a:	4413      	add	r3, r2
 800064c:	2b00      	cmp	r3, #0
 800064e:	da00      	bge.n	8000652 <EEPROM_Write+0x2a>
 8000650:	333f      	adds	r3, #63	; 0x3f
 8000652:	119b      	asrs	r3, r3, #6
 8000654:	b29a      	uxth	r2, r3
 8000656:	89fb      	ldrh	r3, [r7, #14]
 8000658:	4413      	add	r3, r2
 800065a:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 800065c:	8b7a      	ldrh	r2, [r7, #26]
 800065e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	b29b      	uxth	r3, r3
 8000664:	3301      	adds	r3, #1
 8000666:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000668:	2300      	movs	r3, #0
 800066a:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 800066c:	2300      	movs	r3, #0
 800066e:	623b      	str	r3, [r7, #32]
 8000670:	e034      	b.n	80006dc <EEPROM_Write+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000672:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000674:	69fb      	ldr	r3, [r7, #28]
 8000676:	fa02 f303 	lsl.w	r3, r2, r3
 800067a:	b21a      	sxth	r2, r3
 800067c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000680:	4313      	orrs	r3, r2
 8000682:	b21b      	sxth	r3, r3
 8000684:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 8000686:	89ba      	ldrh	r2, [r7, #12]
 8000688:	88fb      	ldrh	r3, [r7, #6]
 800068a:	4611      	mov	r1, r2
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ffb1 	bl	80005f4 <bytestowrite>
 8000692:	4603      	mov	r3, r0
 8000694:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 8000696:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000698:	68ba      	ldr	r2, [r7, #8]
 800069a:	4413      	add	r3, r2
 800069c:	8af9      	ldrh	r1, [r7, #22]
 800069e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006a2:	9202      	str	r2, [sp, #8]
 80006a4:	8aba      	ldrh	r2, [r7, #20]
 80006a6:	9201      	str	r2, [sp, #4]
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	2302      	movs	r3, #2
 80006ac:	460a      	mov	r2, r1
 80006ae:	21a0      	movs	r1, #160	; 0xa0
 80006b0:	480f      	ldr	r0, [pc, #60]	; (80006f0 <EEPROM_Write+0xc8>)
 80006b2:	f004 fa95 	bl	8004be0 <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 80006b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006b8:	3301      	adds	r3, #1
 80006ba:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 80006bc:	2300      	movs	r3, #0
 80006be:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 80006c0:	88fa      	ldrh	r2, [r7, #6]
 80006c2:	8abb      	ldrh	r3, [r7, #20]
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 80006c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80006ca:	8abb      	ldrh	r3, [r7, #20]
 80006cc:	4413      	add	r3, r2
 80006ce:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 80006d0:	2005      	movs	r0, #5
 80006d2:	f003 fec9 	bl	8004468 <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 80006d6:	6a3b      	ldr	r3, [r7, #32]
 80006d8:	3301      	adds	r3, #1
 80006da:	623b      	str	r3, [r7, #32]
 80006dc:	8b3b      	ldrh	r3, [r7, #24]
 80006de:	6a3a      	ldr	r2, [r7, #32]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	dbc6      	blt.n	8000672 <EEPROM_Write+0x4a>
	}
}
 80006e4:	bf00      	nop
 80006e6:	bf00      	nop
 80006e8:	3728      	adds	r7, #40	; 0x28
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000250 	.word	0x20000250

080006f4 <float2Bytes>:

void float2Bytes(uint8_t * ftoa_bytes_temp,float float_variable)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	ed87 0a00 	vstr	s0, [r7]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    thing.a = float_variable;
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < 4; i++) {
 8000704:	2300      	movs	r3, #0
 8000706:	73fb      	strb	r3, [r7, #15]
 8000708:	e00b      	b.n	8000722 <float2Bytes+0x2e>
      ftoa_bytes_temp[i] = thing.bytes[i];
 800070a:	7bfa      	ldrb	r2, [r7, #15]
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	6879      	ldr	r1, [r7, #4]
 8000710:	440b      	add	r3, r1
 8000712:	3210      	adds	r2, #16
 8000714:	443a      	add	r2, r7
 8000716:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800071a:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++) {
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	3301      	adds	r3, #1
 8000720:	73fb      	strb	r3, [r7, #15]
 8000722:	7bfb      	ldrb	r3, [r7, #15]
 8000724:	2b03      	cmp	r3, #3
 8000726:	d9f0      	bls.n	800070a <float2Bytes+0x16>
    }

}
 8000728:	bf00      	nop
 800072a:	bf00      	nop
 800072c:	3714      	adds	r7, #20
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <Bytes2float>:

float Bytes2float(uint8_t * ftoa_bytes_temp)
{
 8000736:	b480      	push	{r7}
 8000738:	b087      	sub	sp, #28
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    for (uint8_t i = 0; i < 4; i++) {
 800073e:	2300      	movs	r3, #0
 8000740:	75fb      	strb	r3, [r7, #23]
 8000742:	e00b      	b.n	800075c <Bytes2float+0x26>
    	thing.bytes[i] = ftoa_bytes_temp[i];
 8000744:	7dfb      	ldrb	r3, [r7, #23]
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	441a      	add	r2, r3
 800074a:	7dfb      	ldrb	r3, [r7, #23]
 800074c:	7812      	ldrb	r2, [r2, #0]
 800074e:	3318      	adds	r3, #24
 8000750:	443b      	add	r3, r7
 8000752:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 8000756:	7dfb      	ldrb	r3, [r7, #23]
 8000758:	3301      	adds	r3, #1
 800075a:	75fb      	strb	r3, [r7, #23]
 800075c:	7dfb      	ldrb	r3, [r7, #23]
 800075e:	2b03      	cmp	r3, #3
 8000760:	d9f0      	bls.n	8000744 <Bytes2float+0xe>
    }

   float float_variable =  thing.a;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	613b      	str	r3, [r7, #16]
   return float_variable;
 8000766:	693b      	ldr	r3, [r7, #16]
 8000768:	ee07 3a90 	vmov	s15, r3
}
 800076c:	eeb0 0a67 	vmov.f32	s0, s15
 8000770:	371c      	adds	r7, #28
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
	...

0800077c <EEPROM_Write_NUM>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the float/integer value that you want to write
 */

void EEPROM_Write_NUM (uint16_t page, uint16_t offset, float data)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	460a      	mov	r2, r1
 8000786:	ed87 0a00 	vstr	s0, [r7]
 800078a:	80fb      	strh	r3, [r7, #6]
 800078c:	4613      	mov	r3, r2
 800078e:	80bb      	strh	r3, [r7, #4]

	float2Bytes(bytes_temp, data);
 8000790:	ed97 0a00 	vldr	s0, [r7]
 8000794:	4806      	ldr	r0, [pc, #24]	; (80007b0 <EEPROM_Write_NUM+0x34>)
 8000796:	f7ff ffad 	bl	80006f4 <float2Bytes>

	EEPROM_Write(page, offset, bytes_temp, 4);
 800079a:	88b9      	ldrh	r1, [r7, #4]
 800079c:	88f8      	ldrh	r0, [r7, #6]
 800079e:	2304      	movs	r3, #4
 80007a0:	4a03      	ldr	r2, [pc, #12]	; (80007b0 <EEPROM_Write_NUM+0x34>)
 80007a2:	f7ff ff41 	bl	8000628 <EEPROM_Write>
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	2000024c 	.word	0x2000024c

080007b4 <EEPROM_Read_NUM>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @returns the float/integer value
 */

float EEPROM_Read_NUM (uint16_t page, uint16_t offset)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	460a      	mov	r2, r1
 80007be:	80fb      	strh	r3, [r7, #6]
 80007c0:	4613      	mov	r3, r2
 80007c2:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[4];

	EEPROM_Read(page, offset, buffer, 4);
 80007c4:	f107 020c 	add.w	r2, r7, #12
 80007c8:	88b9      	ldrh	r1, [r7, #4]
 80007ca:	88f8      	ldrh	r0, [r7, #6]
 80007cc:	2304      	movs	r3, #4
 80007ce:	f000 f80d 	bl	80007ec <EEPROM_Read>

	return (Bytes2float(buffer));
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ffad 	bl	8000736 <Bytes2float>
 80007dc:	eef0 7a40 	vmov.f32	s15, s0
}
 80007e0:	eeb0 0a67 	vmov.f32	s0, s15
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08e      	sub	sp, #56	; 0x38
 80007f0:	af04      	add	r7, sp, #16
 80007f2:	60ba      	str	r2, [r7, #8]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4603      	mov	r3, r0
 80007f8:	81fb      	strh	r3, [r7, #14]
 80007fa:	460b      	mov	r3, r1
 80007fc:	81bb      	strh	r3, [r7, #12]
 80007fe:	4613      	mov	r3, r2
 8000800:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000802:	2306      	movs	r3, #6
 8000804:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 8000806:	89fb      	ldrh	r3, [r7, #14]
 8000808:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 800080a:	88fa      	ldrh	r2, [r7, #6]
 800080c:	89bb      	ldrh	r3, [r7, #12]
 800080e:	4413      	add	r3, r2
 8000810:	2b00      	cmp	r3, #0
 8000812:	da00      	bge.n	8000816 <EEPROM_Read+0x2a>
 8000814:	333f      	adds	r3, #63	; 0x3f
 8000816:	119b      	asrs	r3, r3, #6
 8000818:	b29a      	uxth	r2, r3
 800081a:	89fb      	ldrh	r3, [r7, #14]
 800081c:	4413      	add	r3, r2
 800081e:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 8000820:	8b7a      	ldrh	r2, [r7, #26]
 8000822:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	b29b      	uxth	r3, r3
 8000828:	3301      	adds	r3, #1
 800082a:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 800082c:	2300      	movs	r3, #0
 800082e:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i=0; i<numofpages; i++)
 8000830:	2300      	movs	r3, #0
 8000832:	623b      	str	r3, [r7, #32]
 8000834:	e031      	b.n	800089a <EEPROM_Read+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000836:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000838:	69fb      	ldr	r3, [r7, #28]
 800083a:	fa02 f303 	lsl.w	r3, r2, r3
 800083e:	b21a      	sxth	r2, r3
 8000840:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000844:	4313      	orrs	r3, r2
 8000846:	b21b      	sxth	r3, r3
 8000848:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 800084a:	89ba      	ldrh	r2, [r7, #12]
 800084c:	88fb      	ldrh	r3, [r7, #6]
 800084e:	4611      	mov	r1, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fecf 	bl	80005f4 <bytestowrite>
 8000856:	4603      	mov	r3, r0
 8000858:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 800085a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800085c:	68ba      	ldr	r2, [r7, #8]
 800085e:	4413      	add	r3, r2
 8000860:	8af9      	ldrh	r1, [r7, #22]
 8000862:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000866:	9202      	str	r2, [sp, #8]
 8000868:	8aba      	ldrh	r2, [r7, #20]
 800086a:	9201      	str	r2, [sp, #4]
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	2302      	movs	r3, #2
 8000870:	460a      	mov	r2, r1
 8000872:	21a0      	movs	r1, #160	; 0xa0
 8000874:	480d      	ldr	r0, [pc, #52]	; (80008ac <EEPROM_Read+0xc0>)
 8000876:	f004 fac7 	bl	8004e08 <HAL_I2C_Mem_Read>
		startPage += 1;
 800087a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800087c:	3301      	adds	r3, #1
 800087e:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;
 8000880:	2300      	movs	r3, #0
 8000882:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 8000884:	88fa      	ldrh	r2, [r7, #6]
 8000886:	8abb      	ldrh	r3, [r7, #20]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 800088c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800088e:	8abb      	ldrh	r3, [r7, #20]
 8000890:	4413      	add	r3, r2
 8000892:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i=0; i<numofpages; i++)
 8000894:	6a3b      	ldr	r3, [r7, #32]
 8000896:	3301      	adds	r3, #1
 8000898:	623b      	str	r3, [r7, #32]
 800089a:	8b3b      	ldrh	r3, [r7, #24]
 800089c:	6a3a      	ldr	r2, [r7, #32]
 800089e:	429a      	cmp	r2, r3
 80008a0:	dbc9      	blt.n	8000836 <EEPROM_Read+0x4a>
	}
}
 80008a2:	bf00      	nop
 80008a4:	bf00      	nop
 80008a6:	3728      	adds	r7, #40	; 0x28
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000250 	.word	0x20000250

080008b0 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08e      	sub	sp, #56	; 0x38
 80008b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008c6:	4ba5      	ldr	r3, [pc, #660]	; (8000b5c <MX_GPIO_Init+0x2ac>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4aa4      	ldr	r2, [pc, #656]	; (8000b5c <MX_GPIO_Init+0x2ac>)
 80008cc:	f043 0310 	orr.w	r3, r3, #16
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4ba2      	ldr	r3, [pc, #648]	; (8000b5c <MX_GPIO_Init+0x2ac>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0310 	and.w	r3, r3, #16
 80008da:	623b      	str	r3, [r7, #32]
 80008dc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	4b9f      	ldr	r3, [pc, #636]	; (8000b5c <MX_GPIO_Init+0x2ac>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a9e      	ldr	r2, [pc, #632]	; (8000b5c <MX_GPIO_Init+0x2ac>)
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b9c      	ldr	r3, [pc, #624]	; (8000b5c <MX_GPIO_Init+0x2ac>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0304 	and.w	r3, r3, #4
 80008f2:	61fb      	str	r3, [r7, #28]
 80008f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008f6:	4b99      	ldr	r3, [pc, #612]	; (8000b5c <MX_GPIO_Init+0x2ac>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a98      	ldr	r2, [pc, #608]	; (8000b5c <MX_GPIO_Init+0x2ac>)
 80008fc:	f043 0320 	orr.w	r3, r3, #32
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b96      	ldr	r3, [pc, #600]	; (8000b5c <MX_GPIO_Init+0x2ac>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0320 	and.w	r3, r3, #32
 800090a:	61bb      	str	r3, [r7, #24]
 800090c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090e:	4b93      	ldr	r3, [pc, #588]	; (8000b5c <MX_GPIO_Init+0x2ac>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a92      	ldr	r2, [pc, #584]	; (8000b5c <MX_GPIO_Init+0x2ac>)
 8000914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b90      	ldr	r3, [pc, #576]	; (8000b5c <MX_GPIO_Init+0x2ac>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b8d      	ldr	r3, [pc, #564]	; (8000b5c <MX_GPIO_Init+0x2ac>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a8c      	ldr	r2, [pc, #560]	; (8000b5c <MX_GPIO_Init+0x2ac>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b8a      	ldr	r3, [pc, #552]	; (8000b5c <MX_GPIO_Init+0x2ac>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	4b87      	ldr	r3, [pc, #540]	; (8000b5c <MX_GPIO_Init+0x2ac>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a86      	ldr	r2, [pc, #536]	; (8000b5c <MX_GPIO_Init+0x2ac>)
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b84      	ldr	r3, [pc, #528]	; (8000b5c <MX_GPIO_Init+0x2ac>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000956:	4b81      	ldr	r3, [pc, #516]	; (8000b5c <MX_GPIO_Init+0x2ac>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a80      	ldr	r2, [pc, #512]	; (8000b5c <MX_GPIO_Init+0x2ac>)
 800095c:	f043 0308 	orr.w	r3, r3, #8
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b7e      	ldr	r3, [pc, #504]	; (8000b5c <MX_GPIO_Init+0x2ac>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0308 	and.w	r3, r3, #8
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800096e:	4b7b      	ldr	r3, [pc, #492]	; (8000b5c <MX_GPIO_Init+0x2ac>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a7a      	ldr	r2, [pc, #488]	; (8000b5c <MX_GPIO_Init+0x2ac>)
 8000974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b78      	ldr	r3, [pc, #480]	; (8000b5c <MX_GPIO_Init+0x2ac>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2168      	movs	r1, #104	; 0x68
 800098a:	4875      	ldr	r0, [pc, #468]	; (8000b60 <MX_GPIO_Init+0x2b0>)
 800098c:	f004 f866 	bl	8004a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000996:	4873      	ldr	r0, [pc, #460]	; (8000b64 <MX_GPIO_Init+0x2b4>)
 8000998:	f004 f860 	bl	8004a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	f44f 7110 	mov.w	r1, #576	; 0x240
 80009a2:	4871      	ldr	r0, [pc, #452]	; (8000b68 <MX_GPIO_Init+0x2b8>)
 80009a4:	f004 f85a 	bl	8004a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80009ae:	486f      	ldr	r0, [pc, #444]	; (8000b6c <MX_GPIO_Init+0x2bc>)
 80009b0:	f004 f854 	bl	8004a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 80009b4:	2314      	movs	r3, #20
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c4:	4619      	mov	r1, r3
 80009c6:	4866      	ldr	r0, [pc, #408]	; (8000b60 <MX_GPIO_Init+0x2b0>)
 80009c8:	f003 fe84 	bl	80046d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 80009cc:	2368      	movs	r3, #104	; 0x68
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d8:	2303      	movs	r3, #3
 80009da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e0:	4619      	mov	r1, r3
 80009e2:	485f      	ldr	r0, [pc, #380]	; (8000b60 <MX_GPIO_Init+0x2b0>)
 80009e4:	f003 fe76 	bl	80046d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PC0 PC3 */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin|GPIO_PIN_0|GPIO_PIN_3;
 80009e8:	f242 0309 	movw	r3, #8201	; 0x2009
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fa:	4619      	mov	r1, r3
 80009fc:	485b      	ldr	r0, [pc, #364]	; (8000b6c <MX_GPIO_Init+0x2bc>)
 80009fe:	f003 fe69 	bl	80046d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a02:	2301      	movs	r3, #1
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a06:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a14:	4619      	mov	r1, r3
 8000a16:	4856      	ldr	r0, [pc, #344]	; (8000b70 <MX_GPIO_Init+0x2c0>)
 8000a18:	f003 fe5c 	bl	80046d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF1 PF2 PF3 PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8000a1c:	232e      	movs	r3, #46	; 0x2e
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4850      	ldr	r0, [pc, #320]	; (8000b70 <MX_GPIO_Init+0x2c0>)
 8000a30:	f003 fe50 	bl	80046d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a34:	2332      	movs	r3, #50	; 0x32
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a44:	230b      	movs	r3, #11
 8000a46:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4847      	ldr	r0, [pc, #284]	; (8000b6c <MX_GPIO_Init+0x2bc>)
 8000a50:	f003 fe40 	bl	80046d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a54:	2386      	movs	r3, #134	; 0x86
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a64:	230b      	movs	r3, #11
 8000a66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4841      	ldr	r0, [pc, #260]	; (8000b74 <MX_GPIO_Init+0x2c4>)
 8000a70:	f003 fe30 	bl	80046d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a74:	2308      	movs	r3, #8
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a84:	4619      	mov	r1, r3
 8000a86:	483b      	ldr	r0, [pc, #236]	; (8000b74 <MX_GPIO_Init+0x2c4>)
 8000a88:	f003 fe24 	bl	80046d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a9e:	230b      	movs	r3, #11
 8000aa0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	482e      	ldr	r0, [pc, #184]	; (8000b64 <MX_GPIO_Init+0x2b4>)
 8000aaa:	f003 fe13 	bl	80046d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000aae:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4827      	ldr	r0, [pc, #156]	; (8000b64 <MX_GPIO_Init+0x2b4>)
 8000ac8:	f003 fe04 	bl	80046d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PG9 */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|GPIO_PIN_9;
 8000acc:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4820      	ldr	r0, [pc, #128]	; (8000b68 <MX_GPIO_Init+0x2b8>)
 8000ae6:	f003 fdf5 	bl	80046d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000aea:	2380      	movs	r3, #128	; 0x80
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aee:	2300      	movs	r3, #0
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afa:	4619      	mov	r1, r3
 8000afc:	481a      	ldr	r0, [pc, #104]	; (8000b68 <MX_GPIO_Init+0x2b8>)
 8000afe:	f003 fde9 	bl	80046d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8000b02:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b10:	2303      	movs	r3, #3
 8000b12:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4814      	ldr	r0, [pc, #80]	; (8000b6c <MX_GPIO_Init+0x2bc>)
 8000b1c:	f003 fdda 	bl	80046d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b20:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b32:	230b      	movs	r3, #11
 8000b34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480a      	ldr	r0, [pc, #40]	; (8000b68 <MX_GPIO_Init+0x2b8>)
 8000b3e:	f003 fdc9 	bl	80046d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2101      	movs	r1, #1
 8000b46:	2006      	movs	r0, #6
 8000b48:	f003 fd8d 	bl	8004666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b4c:	2006      	movs	r0, #6
 8000b4e:	f003 fda6 	bl	800469e <HAL_NVIC_EnableIRQ>

}
 8000b52:	bf00      	nop
 8000b54:	3738      	adds	r7, #56	; 0x38
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40021000 	.word	0x40021000
 8000b64:	40020400 	.word	0x40020400
 8000b68:	40021800 	.word	0x40021800
 8000b6c:	40020800 	.word	0x40020800
 8000b70:	40021400 	.word	0x40021400
 8000b74:	40020000 	.word	0x40020000

08000b78 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b7c:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <MX_I2C1_Init+0x74>)
 8000b7e:	4a1c      	ldr	r2, [pc, #112]	; (8000bf0 <MX_I2C1_Init+0x78>)
 8000b80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000b82:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <MX_I2C1_Init+0x74>)
 8000b84:	4a1b      	ldr	r2, [pc, #108]	; (8000bf4 <MX_I2C1_Init+0x7c>)
 8000b86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <MX_I2C1_Init+0x74>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b8e:	4b17      	ldr	r3, [pc, #92]	; (8000bec <MX_I2C1_Init+0x74>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b94:	4b15      	ldr	r3, [pc, #84]	; (8000bec <MX_I2C1_Init+0x74>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b9a:	4b14      	ldr	r3, [pc, #80]	; (8000bec <MX_I2C1_Init+0x74>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <MX_I2C1_Init+0x74>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <MX_I2C1_Init+0x74>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <MX_I2C1_Init+0x74>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bb2:	480e      	ldr	r0, [pc, #56]	; (8000bec <MX_I2C1_Init+0x74>)
 8000bb4:	f003 ff84 	bl	8004ac0 <HAL_I2C_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bbe:	f002 f9d3 	bl	8002f68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4809      	ldr	r0, [pc, #36]	; (8000bec <MX_I2C1_Init+0x74>)
 8000bc6:	f004 fcd3 	bl	8005570 <HAL_I2CEx_ConfigAnalogFilter>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bd0:	f002 f9ca 	bl	8002f68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <MX_I2C1_Init+0x74>)
 8000bd8:	f004 fd15 	bl	8005606 <HAL_I2CEx_ConfigDigitalFilter>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000be2:	f002 f9c1 	bl	8002f68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000250 	.word	0x20000250
 8000bf0:	40005400 	.word	0x40005400
 8000bf4:	20404768 	.word	0x20404768

08000bf8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b0ae      	sub	sp, #184	; 0xb8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	2290      	movs	r2, #144	; 0x90
 8000c16:	2100      	movs	r1, #0
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f007 fbcd 	bl	80083b8 <memset>
  if(i2cHandle->Instance==I2C1)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a22      	ldr	r2, [pc, #136]	; (8000cac <HAL_I2C_MspInit+0xb4>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d13c      	bne.n	8000ca2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c2c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4618      	mov	r0, r3
 8000c38:	f005 fa66 	bl	8006108 <HAL_RCCEx_PeriphCLKConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c42:	f002 f991 	bl	8002f68 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c46:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <HAL_I2C_MspInit+0xb8>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a19      	ldr	r2, [pc, #100]	; (8000cb0 <HAL_I2C_MspInit+0xb8>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <HAL_I2C_MspInit+0xb8>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c66:	2312      	movs	r3, #18
 8000c68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c78:	2304      	movs	r3, #4
 8000c7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c82:	4619      	mov	r1, r3
 8000c84:	480b      	ldr	r0, [pc, #44]	; (8000cb4 <HAL_I2C_MspInit+0xbc>)
 8000c86:	f003 fd25 	bl	80046d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HAL_I2C_MspInit+0xb8>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <HAL_I2C_MspInit+0xb8>)
 8000c90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c94:	6413      	str	r3, [r2, #64]	; 0x40
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_I2C_MspInit+0xb8>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ca2:	bf00      	nop
 8000ca4:	37b8      	adds	r7, #184	; 0xb8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40005400 	.word	0x40005400
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40020400 	.word	0x40020400

08000cb8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000cbc:	f3bf 8f4f 	dsb	sy
}
 8000cc0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cc2:	f3bf 8f6f 	isb	sy
}
 8000cc6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000cc8:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <SCB_EnableICache+0x48>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000cd0:	f3bf 8f4f 	dsb	sy
}
 8000cd4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cd6:	f3bf 8f6f 	isb	sy
}
 8000cda:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <SCB_EnableICache+0x48>)
 8000cde:	695b      	ldr	r3, [r3, #20]
 8000ce0:	4a07      	ldr	r2, [pc, #28]	; (8000d00 <SCB_EnableICache+0x48>)
 8000ce2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ce8:	f3bf 8f4f 	dsb	sy
}
 8000cec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cee:	f3bf 8f6f 	isb	sy
}
 8000cf2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <SCB_EnableDCache+0x84>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000d12:	f3bf 8f4f 	dsb	sy
}
 8000d16:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000d18:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <SCB_EnableDCache+0x84>)
 8000d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d1e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	0b5b      	lsrs	r3, r3, #13
 8000d24:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000d28:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d32:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	015a      	lsls	r2, r3, #5
 8000d38:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000d3c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d42:	4911      	ldr	r1, [pc, #68]	; (8000d88 <SCB_EnableDCache+0x84>)
 8000d44:	4313      	orrs	r3, r2
 8000d46:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	1e5a      	subs	r2, r3, #1
 8000d4e:	60ba      	str	r2, [r7, #8]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d1ef      	bne.n	8000d34 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	1e5a      	subs	r2, r3, #1
 8000d58:	60fa      	str	r2, [r7, #12]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1e5      	bne.n	8000d2a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000d5e:	f3bf 8f4f 	dsb	sy
}
 8000d62:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <SCB_EnableDCache+0x84>)
 8000d66:	695b      	ldr	r3, [r3, #20]
 8000d68:	4a07      	ldr	r2, [pc, #28]	; (8000d88 <SCB_EnableDCache+0x84>)
 8000d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d6e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d70:	f3bf 8f4f 	dsb	sy
}
 8000d74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d76:	f3bf 8f6f 	isb	sy
}
 8000d7a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <displayTime>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define DEV_ADDR 0xa0
void displayTime(uint16_t second, uint16_t posX, uint16_t posY) {
 8000d8c:	b590      	push	{r4, r7, lr}
 8000d8e:	b089      	sub	sp, #36	; 0x24
 8000d90:	af02      	add	r7, sp, #8
 8000d92:	4603      	mov	r3, r0
 8000d94:	80fb      	strh	r3, [r7, #6]
 8000d96:	460b      	mov	r3, r1
 8000d98:	80bb      	strh	r3, [r7, #4]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	807b      	strh	r3, [r7, #2]
	uint16_t color = 0xFFFF;
 8000d9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000da2:	82fb      	strh	r3, [r7, #22]
	if (stage != 1) {
 8000da4:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <displayTime+0x78>)
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d001      	beq.n	8000db0 <displayTime+0x24>
		color = 0x0000;
 8000dac:	2300      	movs	r3, #0
 8000dae:	82fb      	strh	r3, [r7, #22]
	}
	char str[10];
	sprintf(str, "%.2d:%.2d", second / 60, second % 60);
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	4a15      	ldr	r2, [pc, #84]	; (8000e08 <displayTime+0x7c>)
 8000db4:	fba2 2303 	umull	r2, r3, r2, r3
 8000db8:	095b      	lsrs	r3, r3, #5
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	461c      	mov	r4, r3
 8000dbe:	88fa      	ldrh	r2, [r7, #6]
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <displayTime+0x7c>)
 8000dc2:	fba3 1302 	umull	r1, r3, r3, r2
 8000dc6:	0959      	lsrs	r1, r3, #5
 8000dc8:	460b      	mov	r3, r1
 8000dca:	011b      	lsls	r3, r3, #4
 8000dcc:	1a5b      	subs	r3, r3, r1
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	f107 000c 	add.w	r0, r7, #12
 8000dd8:	4622      	mov	r2, r4
 8000dda:	490c      	ldr	r1, [pc, #48]	; (8000e0c <displayTime+0x80>)
 8000ddc:	f008 f8fc 	bl	8008fd8 <siprintf>
	ILI9341_Draw_Text(str, posX, posY, color, 2, 0x0000);
 8000de0:	88bb      	ldrh	r3, [r7, #4]
 8000de2:	b2d9      	uxtb	r1, r3
 8000de4:	887b      	ldrh	r3, [r7, #2]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	8afb      	ldrh	r3, [r7, #22]
 8000dea:	f107 000c 	add.w	r0, r7, #12
 8000dee:	2400      	movs	r4, #0
 8000df0:	9401      	str	r4, [sp, #4]
 8000df2:	2402      	movs	r4, #2
 8000df4:	9400      	str	r4, [sp, #0]
 8000df6:	f002 fe09 	bl	8003a0c <ILI9341_Draw_Text>
}
 8000dfa:	bf00      	nop
 8000dfc:	371c      	adds	r7, #28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd90      	pop	{r4, r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200002a4 	.word	0x200002a4
 8000e08:	88888889 	.word	0x88888889
 8000e0c:	0800b408 	.word	0x0800b408

08000e10 <displayPlayerTime>:
void displayPlayerTime(uint16_t second, uint16_t posX, uint16_t posY) {
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b089      	sub	sp, #36	; 0x24
 8000e14:	af02      	add	r7, sp, #8
 8000e16:	4603      	mov	r3, r0
 8000e18:	80fb      	strh	r3, [r7, #6]
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	80bb      	strh	r3, [r7, #4]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	807b      	strh	r3, [r7, #2]
	uint16_t color = 0xFFFF;
 8000e22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e26:	82fb      	strh	r3, [r7, #22]
	char str[10];
	sprintf(str, "%.2d:%.2d", second / 60, second % 60);
 8000e28:	88fb      	ldrh	r3, [r7, #6]
 8000e2a:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <displayPlayerTime+0x6c>)
 8000e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e30:	095b      	lsrs	r3, r3, #5
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	461c      	mov	r4, r3
 8000e36:	88fa      	ldrh	r2, [r7, #6]
 8000e38:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <displayPlayerTime+0x6c>)
 8000e3a:	fba3 1302 	umull	r1, r3, r3, r2
 8000e3e:	0959      	lsrs	r1, r3, #5
 8000e40:	460b      	mov	r3, r1
 8000e42:	011b      	lsls	r3, r3, #4
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	f107 000c 	add.w	r0, r7, #12
 8000e50:	4622      	mov	r2, r4
 8000e52:	490b      	ldr	r1, [pc, #44]	; (8000e80 <displayPlayerTime+0x70>)
 8000e54:	f008 f8c0 	bl	8008fd8 <siprintf>
	ILI9341_Draw_Text(str, posX, posY, color, 2, 0x0000);
 8000e58:	88bb      	ldrh	r3, [r7, #4]
 8000e5a:	b2d9      	uxtb	r1, r3
 8000e5c:	887b      	ldrh	r3, [r7, #2]
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	8afb      	ldrh	r3, [r7, #22]
 8000e62:	f107 000c 	add.w	r0, r7, #12
 8000e66:	2400      	movs	r4, #0
 8000e68:	9401      	str	r4, [sp, #4]
 8000e6a:	2402      	movs	r4, #2
 8000e6c:	9400      	str	r4, [sp, #0]
 8000e6e:	f002 fdcd 	bl	8003a0c <ILI9341_Draw_Text>
}
 8000e72:	bf00      	nop
 8000e74:	371c      	adds	r7, #28
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd90      	pop	{r4, r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	88888889 	.word	0x88888889
 8000e80:	0800b408 	.word	0x0800b408

08000e84 <restart>:
void restart() { //restart game
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af02      	add	r7, sp, #8
	wave = 1;
 8000e8a:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <restart+0x74>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	801a      	strh	r2, [r3, #0]
	posXspace = 150;
 8000e90:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <restart+0x78>)
 8000e92:	2296      	movs	r2, #150	; 0x96
 8000e94:	801a      	strh	r2, [r3, #0]
	posYspace = 220;
 8000e96:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <restart+0x7c>)
 8000e98:	22dc      	movs	r2, #220	; 0xdc
 8000e9a:	801a      	strh	r2, [r3, #0]
	ILI9341_Fill_Screen(0x0000);
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f003 f921 	bl	80040e4 <ILI9341_Fill_Screen>
	wavestate = 1;
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <restart+0x80>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	801a      	strh	r2, [r3, #0]
	bullet = 0;
 8000ea8:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <restart+0x84>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	801a      	strh	r2, [r3, #0]
	score = 0;
 8000eae:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <restart+0x88>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	801a      	strh	r2, [r3, #0]
	initGamePage = 1;
 8000eb4:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <restart+0x8c>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	801a      	strh	r2, [r3, #0]
	second = 0;
 8000eba:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <restart+0x90>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	801a      	strh	r2, [r3, #0]
	ILI9341_Draw_Text("00:00", 200, 0, WHITE, 2, 0x0000);
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	9301      	str	r3, [sp, #4]
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ecc:	2200      	movs	r2, #0
 8000ece:	21c8      	movs	r1, #200	; 0xc8
 8000ed0:	4811      	ldr	r0, [pc, #68]	; (8000f18 <restart+0x94>)
 8000ed2:	f002 fd9b 	bl	8003a0c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("0000", 0, 15, WHITE, 2, 0x0000);
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	9301      	str	r3, [sp, #4]
 8000eda:	2302      	movs	r3, #2
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ee2:	220f      	movs	r2, #15
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	480d      	ldr	r0, [pc, #52]	; (8000f1c <restart+0x98>)
 8000ee8:	f002 fd90 	bl	8003a0c <ILI9341_Draw_Text>
	stage = 1;
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <restart+0x9c>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	801a      	strh	r2, [r3, #0]
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000304 	.word	0x20000304
 8000efc:	200002a6 	.word	0x200002a6
 8000f00:	200002a8 	.word	0x200002a8
 8000f04:	20000306 	.word	0x20000306
 8000f08:	200002ae 	.word	0x200002ae
 8000f0c:	20000308 	.word	0x20000308
 8000f10:	2000030a 	.word	0x2000030a
 8000f14:	2000030c 	.word	0x2000030c
 8000f18:	0800b414 	.word	0x0800b414
 8000f1c:	0800b41c 	.word	0x0800b41c
 8000f20:	200002a4 	.word	0x200002a4

08000f24 <gamewin>:
void gamewin() { //winScreen
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	b08b      	sub	sp, #44	; 0x2c
 8000f28:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(0x0000);
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f003 f8da 	bl	80040e4 <ILI9341_Fill_Screen>
	ILI9341_Draw_Text("You Win", 50, 80, WHITE, 5, 0x0000);
 8000f30:	2300      	movs	r3, #0
 8000f32:	9301      	str	r3, [sp, #4]
 8000f34:	2305      	movs	r3, #5
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f3c:	2250      	movs	r2, #80	; 0x50
 8000f3e:	2132      	movs	r1, #50	; 0x32
 8000f40:	4826      	ldr	r0, [pc, #152]	; (8000fdc <gamewin+0xb8>)
 8000f42:	f002 fd63 	bl	8003a0c <ILI9341_Draw_Text>
	char str[30];
	sprintf(str, "score %.4d", score);
 8000f46:	4b26      	ldr	r3, [pc, #152]	; (8000fe0 <gamewin+0xbc>)
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	4925      	ldr	r1, [pc, #148]	; (8000fe4 <gamewin+0xc0>)
 8000f50:	4618      	mov	r0, r3
 8000f52:	f008 f841 	bl	8008fd8 <siprintf>
	ILI9341_Draw_Text(str, 90, 130, WHITE, 2, 0x0000);
 8000f56:	4638      	mov	r0, r7
 8000f58:	2300      	movs	r3, #0
 8000f5a:	9301      	str	r3, [sp, #4]
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f64:	2282      	movs	r2, #130	; 0x82
 8000f66:	215a      	movs	r1, #90	; 0x5a
 8000f68:	f002 fd50 	bl	8003a0c <ILI9341_Draw_Text>
	sprintf(str, "Time %.2d:%.2d", second / 60, second % 60);
 8000f6c:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <gamewin+0xc4>)
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	4a1e      	ldr	r2, [pc, #120]	; (8000fec <gamewin+0xc8>)
 8000f72:	fba2 2303 	umull	r2, r3, r2, r3
 8000f76:	095b      	lsrs	r3, r3, #5
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	461c      	mov	r4, r3
 8000f7c:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <gamewin+0xc4>)
 8000f7e:	881a      	ldrh	r2, [r3, #0]
 8000f80:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <gamewin+0xc8>)
 8000f82:	fba3 1302 	umull	r1, r3, r3, r2
 8000f86:	0959      	lsrs	r1, r3, #5
 8000f88:	460b      	mov	r3, r1
 8000f8a:	011b      	lsls	r3, r3, #4
 8000f8c:	1a5b      	subs	r3, r3, r1
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	4638      	mov	r0, r7
 8000f96:	4622      	mov	r2, r4
 8000f98:	4915      	ldr	r1, [pc, #84]	; (8000ff0 <gamewin+0xcc>)
 8000f9a:	f008 f81d 	bl	8008fd8 <siprintf>
	ILI9341_Draw_Text(str, 90, 150, WHITE, 2, 0x0000);
 8000f9e:	4638      	mov	r0, r7
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	9301      	str	r3, [sp, #4]
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fac:	2296      	movs	r2, #150	; 0x96
 8000fae:	215a      	movs	r1, #90	; 0x5a
 8000fb0:	f002 fd2c 	bl	8003a0c <ILI9341_Draw_Text>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fba:	480e      	ldr	r0, [pc, #56]	; (8000ff4 <gamewin+0xd0>)
 8000fbc:	f003 fd4e 	bl	8004a5c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000fc0:	2064      	movs	r0, #100	; 0x64
 8000fc2:	f003 fa51 	bl	8004468 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fcc:	4809      	ldr	r0, [pc, #36]	; (8000ff4 <gamewin+0xd0>)
 8000fce:	f003 fd45 	bl	8004a5c <HAL_GPIO_WritePin>
}
 8000fd2:	bf00      	nop
 8000fd4:	3724      	adds	r7, #36	; 0x24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd90      	pop	{r4, r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	0800b424 	.word	0x0800b424
 8000fe0:	20000308 	.word	0x20000308
 8000fe4:	0800b42c 	.word	0x0800b42c
 8000fe8:	2000030c 	.word	0x2000030c
 8000fec:	88888889 	.word	0x88888889
 8000ff0:	0800b438 	.word	0x0800b438
 8000ff4:	40021800 	.word	0x40021800

08000ff8 <gamelose>:
void gamelose() { //loseScreen
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b08b      	sub	sp, #44	; 0x2c
 8000ffc:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(0x0000);
 8000ffe:	2000      	movs	r0, #0
 8001000:	f003 f870 	bl	80040e4 <ILI9341_Fill_Screen>
	ILI9341_Draw_Text("Game Over", 15, 80, WHITE, 5, 0x0000);
 8001004:	2300      	movs	r3, #0
 8001006:	9301      	str	r3, [sp, #4]
 8001008:	2305      	movs	r3, #5
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001010:	2250      	movs	r2, #80	; 0x50
 8001012:	210f      	movs	r1, #15
 8001014:	4826      	ldr	r0, [pc, #152]	; (80010b0 <gamelose+0xb8>)
 8001016:	f002 fcf9 	bl	8003a0c <ILI9341_Draw_Text>
	char str[30];
	sprintf(str, "score %.4d", score);
 800101a:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <gamelose+0xbc>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	463b      	mov	r3, r7
 8001022:	4925      	ldr	r1, [pc, #148]	; (80010b8 <gamelose+0xc0>)
 8001024:	4618      	mov	r0, r3
 8001026:	f007 ffd7 	bl	8008fd8 <siprintf>
	ILI9341_Draw_Text(str, 90, 130, WHITE, 2, 0x0000);
 800102a:	4638      	mov	r0, r7
 800102c:	2300      	movs	r3, #0
 800102e:	9301      	str	r3, [sp, #4]
 8001030:	2302      	movs	r3, #2
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001038:	2282      	movs	r2, #130	; 0x82
 800103a:	215a      	movs	r1, #90	; 0x5a
 800103c:	f002 fce6 	bl	8003a0c <ILI9341_Draw_Text>
	sprintf(str, "Time %.2d:%.2d", second / 60, second % 60);
 8001040:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <gamelose+0xc4>)
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	4a1e      	ldr	r2, [pc, #120]	; (80010c0 <gamelose+0xc8>)
 8001046:	fba2 2303 	umull	r2, r3, r2, r3
 800104a:	095b      	lsrs	r3, r3, #5
 800104c:	b29b      	uxth	r3, r3
 800104e:	461c      	mov	r4, r3
 8001050:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <gamelose+0xc4>)
 8001052:	881a      	ldrh	r2, [r3, #0]
 8001054:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <gamelose+0xc8>)
 8001056:	fba3 1302 	umull	r1, r3, r3, r2
 800105a:	0959      	lsrs	r1, r3, #5
 800105c:	460b      	mov	r3, r1
 800105e:	011b      	lsls	r3, r3, #4
 8001060:	1a5b      	subs	r3, r3, r1
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	b29b      	uxth	r3, r3
 8001068:	4638      	mov	r0, r7
 800106a:	4622      	mov	r2, r4
 800106c:	4915      	ldr	r1, [pc, #84]	; (80010c4 <gamelose+0xcc>)
 800106e:	f007 ffb3 	bl	8008fd8 <siprintf>
	ILI9341_Draw_Text(str, 90, 150, WHITE, 2, 0x0000);
 8001072:	4638      	mov	r0, r7
 8001074:	2300      	movs	r3, #0
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	2302      	movs	r3, #2
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001080:	2296      	movs	r2, #150	; 0x96
 8001082:	215a      	movs	r1, #90	; 0x5a
 8001084:	f002 fcc2 	bl	8003a0c <ILI9341_Draw_Text>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800108e:	480e      	ldr	r0, [pc, #56]	; (80010c8 <gamelose+0xd0>)
 8001090:	f003 fce4 	bl	8004a5c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001094:	2064      	movs	r0, #100	; 0x64
 8001096:	f003 f9e7 	bl	8004468 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010a0:	4809      	ldr	r0, [pc, #36]	; (80010c8 <gamelose+0xd0>)
 80010a2:	f003 fcdb 	bl	8004a5c <HAL_GPIO_WritePin>
}
 80010a6:	bf00      	nop
 80010a8:	3724      	adds	r7, #36	; 0x24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd90      	pop	{r4, r7, pc}
 80010ae:	bf00      	nop
 80010b0:	0800b448 	.word	0x0800b448
 80010b4:	20000308 	.word	0x20000308
 80010b8:	0800b42c 	.word	0x0800b42c
 80010bc:	2000030c 	.word	0x2000030c
 80010c0:	88888889 	.word	0x88888889
 80010c4:	0800b438 	.word	0x0800b438
 80010c8:	40021800 	.word	0x40021800

080010cc <isOverlap>:
uint16_t isOverlap(uint16_t posX1, uint16_t posY1, uint16_t posX2,
		uint16_t posY2) { // check is object 20x20 overlap each other
 80010cc:	b490      	push	{r4, r7}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4604      	mov	r4, r0
 80010d4:	4608      	mov	r0, r1
 80010d6:	4611      	mov	r1, r2
 80010d8:	461a      	mov	r2, r3
 80010da:	4623      	mov	r3, r4
 80010dc:	80fb      	strh	r3, [r7, #6]
 80010de:	4603      	mov	r3, r0
 80010e0:	80bb      	strh	r3, [r7, #4]
 80010e2:	460b      	mov	r3, r1
 80010e4:	807b      	strh	r3, [r7, #2]
 80010e6:	4613      	mov	r3, r2
 80010e8:	803b      	strh	r3, [r7, #0]
	if (posY1 >= posY2 - 19 && posY1 <= posY2 + 19 && posX1 >= posX2 - 19
 80010ea:	88ba      	ldrh	r2, [r7, #4]
 80010ec:	883b      	ldrh	r3, [r7, #0]
 80010ee:	3b13      	subs	r3, #19
 80010f0:	429a      	cmp	r2, r3
 80010f2:	db10      	blt.n	8001116 <isOverlap+0x4a>
 80010f4:	88ba      	ldrh	r2, [r7, #4]
 80010f6:	883b      	ldrh	r3, [r7, #0]
 80010f8:	3313      	adds	r3, #19
 80010fa:	429a      	cmp	r2, r3
 80010fc:	dc0b      	bgt.n	8001116 <isOverlap+0x4a>
 80010fe:	88fa      	ldrh	r2, [r7, #6]
 8001100:	887b      	ldrh	r3, [r7, #2]
 8001102:	3b13      	subs	r3, #19
 8001104:	429a      	cmp	r2, r3
 8001106:	db06      	blt.n	8001116 <isOverlap+0x4a>
			&& posX1 <= posX2 + 19) {
 8001108:	88fa      	ldrh	r2, [r7, #6]
 800110a:	887b      	ldrh	r3, [r7, #2]
 800110c:	3313      	adds	r3, #19
 800110e:	429a      	cmp	r2, r3
 8001110:	dc01      	bgt.n	8001116 <isOverlap+0x4a>
		return 1;
 8001112:	2301      	movs	r3, #1
 8001114:	e000      	b.n	8001118 <isOverlap+0x4c>
	}
	return 0;
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bc90      	pop	{r4, r7}
 8001120:	4770      	bx	lr
	...

08001124 <setMonsterAvaliable>:
void setMonsterAvaliable(uint16_t mon0, uint16_t mon1, uint16_t mon2,
		uint16_t mon3, uint16_t mon4, uint16_t mon5, uint16_t mon6) {
 8001124:	b490      	push	{r4, r7}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4604      	mov	r4, r0
 800112c:	4608      	mov	r0, r1
 800112e:	4611      	mov	r1, r2
 8001130:	461a      	mov	r2, r3
 8001132:	4623      	mov	r3, r4
 8001134:	80fb      	strh	r3, [r7, #6]
 8001136:	4603      	mov	r3, r0
 8001138:	80bb      	strh	r3, [r7, #4]
 800113a:	460b      	mov	r3, r1
 800113c:	807b      	strh	r3, [r7, #2]
 800113e:	4613      	mov	r3, r2
 8001140:	803b      	strh	r3, [r7, #0]
	monsterAvaliable[0] = mon0;
 8001142:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <setMonsterAvaliable+0x54>)
 8001144:	88fb      	ldrh	r3, [r7, #6]
 8001146:	8013      	strh	r3, [r2, #0]
	monsterAvaliable[1] = mon1;
 8001148:	4a0b      	ldr	r2, [pc, #44]	; (8001178 <setMonsterAvaliable+0x54>)
 800114a:	88bb      	ldrh	r3, [r7, #4]
 800114c:	8053      	strh	r3, [r2, #2]
	monsterAvaliable[2] = mon2;
 800114e:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <setMonsterAvaliable+0x54>)
 8001150:	887b      	ldrh	r3, [r7, #2]
 8001152:	8093      	strh	r3, [r2, #4]
	monsterAvaliable[3] = mon3;
 8001154:	4a08      	ldr	r2, [pc, #32]	; (8001178 <setMonsterAvaliable+0x54>)
 8001156:	883b      	ldrh	r3, [r7, #0]
 8001158:	80d3      	strh	r3, [r2, #6]
	monsterAvaliable[4] = mon4;
 800115a:	4a07      	ldr	r2, [pc, #28]	; (8001178 <setMonsterAvaliable+0x54>)
 800115c:	8a3b      	ldrh	r3, [r7, #16]
 800115e:	8113      	strh	r3, [r2, #8]
	monsterAvaliable[5] = mon5;
 8001160:	4a05      	ldr	r2, [pc, #20]	; (8001178 <setMonsterAvaliable+0x54>)
 8001162:	8abb      	ldrh	r3, [r7, #20]
 8001164:	8153      	strh	r3, [r2, #10]
	monsterAvaliable[6] = mon6;
 8001166:	4a04      	ldr	r2, [pc, #16]	; (8001178 <setMonsterAvaliable+0x54>)
 8001168:	8b3b      	ldrh	r3, [r7, #24]
 800116a:	8193      	strh	r3, [r2, #12]
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bc90      	pop	{r4, r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	200002b4 	.word	0x200002b4

0800117c <setPosXMonster>:
void setPosXMonster(uint16_t mon0, uint16_t mon1, uint16_t mon2, uint16_t mon3,
		uint16_t mon4, uint16_t mon5, uint16_t mon6) {
 800117c:	b490      	push	{r4, r7}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	4604      	mov	r4, r0
 8001184:	4608      	mov	r0, r1
 8001186:	4611      	mov	r1, r2
 8001188:	461a      	mov	r2, r3
 800118a:	4623      	mov	r3, r4
 800118c:	80fb      	strh	r3, [r7, #6]
 800118e:	4603      	mov	r3, r0
 8001190:	80bb      	strh	r3, [r7, #4]
 8001192:	460b      	mov	r3, r1
 8001194:	807b      	strh	r3, [r7, #2]
 8001196:	4613      	mov	r3, r2
 8001198:	803b      	strh	r3, [r7, #0]
	posXmonster[0] = mon0;
 800119a:	4a0d      	ldr	r2, [pc, #52]	; (80011d0 <setPosXMonster+0x54>)
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	8013      	strh	r3, [r2, #0]
	posXmonster[1] = mon1;
 80011a0:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <setPosXMonster+0x54>)
 80011a2:	88bb      	ldrh	r3, [r7, #4]
 80011a4:	8053      	strh	r3, [r2, #2]
	posXmonster[2] = mon2;
 80011a6:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <setPosXMonster+0x54>)
 80011a8:	887b      	ldrh	r3, [r7, #2]
 80011aa:	8093      	strh	r3, [r2, #4]
	posXmonster[3] = mon3;
 80011ac:	4a08      	ldr	r2, [pc, #32]	; (80011d0 <setPosXMonster+0x54>)
 80011ae:	883b      	ldrh	r3, [r7, #0]
 80011b0:	80d3      	strh	r3, [r2, #6]
	posXmonster[4] = mon4;
 80011b2:	4a07      	ldr	r2, [pc, #28]	; (80011d0 <setPosXMonster+0x54>)
 80011b4:	8a3b      	ldrh	r3, [r7, #16]
 80011b6:	8113      	strh	r3, [r2, #8]
	posXmonster[5] = mon5;
 80011b8:	4a05      	ldr	r2, [pc, #20]	; (80011d0 <setPosXMonster+0x54>)
 80011ba:	8abb      	ldrh	r3, [r7, #20]
 80011bc:	8153      	strh	r3, [r2, #10]
	posXmonster[6] = mon6;
 80011be:	4a04      	ldr	r2, [pc, #16]	; (80011d0 <setPosXMonster+0x54>)
 80011c0:	8b3b      	ldrh	r3, [r7, #24]
 80011c2:	8193      	strh	r3, [r2, #12]
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc90      	pop	{r4, r7}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	20000000 	.word	0x20000000

080011d4 <setMonterType>:
void setMonterType(uint16_t mon0, uint16_t mon1, uint16_t mon2, uint16_t mon3,
		uint16_t mon4, uint16_t mon5, uint16_t mon6) {
 80011d4:	b490      	push	{r4, r7}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4604      	mov	r4, r0
 80011dc:	4608      	mov	r0, r1
 80011de:	4611      	mov	r1, r2
 80011e0:	461a      	mov	r2, r3
 80011e2:	4623      	mov	r3, r4
 80011e4:	80fb      	strh	r3, [r7, #6]
 80011e6:	4603      	mov	r3, r0
 80011e8:	80bb      	strh	r3, [r7, #4]
 80011ea:	460b      	mov	r3, r1
 80011ec:	807b      	strh	r3, [r7, #2]
 80011ee:	4613      	mov	r3, r2
 80011f0:	803b      	strh	r3, [r7, #0]
	monsterType[0] = mon0;
 80011f2:	4a0d      	ldr	r2, [pc, #52]	; (8001228 <setMonterType+0x54>)
 80011f4:	88fb      	ldrh	r3, [r7, #6]
 80011f6:	8013      	strh	r3, [r2, #0]
	monsterType[1] = mon1;
 80011f8:	4a0b      	ldr	r2, [pc, #44]	; (8001228 <setMonterType+0x54>)
 80011fa:	88bb      	ldrh	r3, [r7, #4]
 80011fc:	8053      	strh	r3, [r2, #2]
	monsterType[2] = mon2;
 80011fe:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <setMonterType+0x54>)
 8001200:	887b      	ldrh	r3, [r7, #2]
 8001202:	8093      	strh	r3, [r2, #4]
	monsterType[3] = mon3;
 8001204:	4a08      	ldr	r2, [pc, #32]	; (8001228 <setMonterType+0x54>)
 8001206:	883b      	ldrh	r3, [r7, #0]
 8001208:	80d3      	strh	r3, [r2, #6]
	monsterType[4] = mon4;
 800120a:	4a07      	ldr	r2, [pc, #28]	; (8001228 <setMonterType+0x54>)
 800120c:	8a3b      	ldrh	r3, [r7, #16]
 800120e:	8113      	strh	r3, [r2, #8]
	monsterType[5] = mon5;
 8001210:	4a05      	ldr	r2, [pc, #20]	; (8001228 <setMonterType+0x54>)
 8001212:	8abb      	ldrh	r3, [r7, #20]
 8001214:	8153      	strh	r3, [r2, #10]
	monsterType[6] = mon6;
 8001216:	4a04      	ldr	r2, [pc, #16]	; (8001228 <setMonterType+0x54>)
 8001218:	8b3b      	ldrh	r3, [r7, #24]
 800121a:	8193      	strh	r3, [r2, #12]
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bc90      	pop	{r4, r7}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	200002c4 	.word	0x200002c4

0800122c <resetMonsterBullet>:
void resetMonsterBullet() {
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
	monsterBullet[0] = 0;
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <resetMonsterBullet+0x38>)
 8001232:	2200      	movs	r2, #0
 8001234:	801a      	strh	r2, [r3, #0]
	monsterBullet[1] = 0;
 8001236:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <resetMonsterBullet+0x38>)
 8001238:	2200      	movs	r2, #0
 800123a:	805a      	strh	r2, [r3, #2]
	monsterBullet[2] = 0;
 800123c:	4b09      	ldr	r3, [pc, #36]	; (8001264 <resetMonsterBullet+0x38>)
 800123e:	2200      	movs	r2, #0
 8001240:	809a      	strh	r2, [r3, #4]
	monsterBullet[3] = 0;
 8001242:	4b08      	ldr	r3, [pc, #32]	; (8001264 <resetMonsterBullet+0x38>)
 8001244:	2200      	movs	r2, #0
 8001246:	80da      	strh	r2, [r3, #6]
	monsterBullet[4] = 0;
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <resetMonsterBullet+0x38>)
 800124a:	2200      	movs	r2, #0
 800124c:	811a      	strh	r2, [r3, #8]
	monsterBullet[5] = 0;
 800124e:	4b05      	ldr	r3, [pc, #20]	; (8001264 <resetMonsterBullet+0x38>)
 8001250:	2200      	movs	r2, #0
 8001252:	815a      	strh	r2, [r3, #10]
	monsterBullet[6] = 0;
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <resetMonsterBullet+0x38>)
 8001256:	2200      	movs	r2, #0
 8001258:	819a      	strh	r2, [r3, #12]
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	200002d4 	.word	0x200002d4

08001268 <moveBullet>:
uint16_t moveBullet(uint16_t bullet) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af02      	add	r7, sp, #8
 800126e:	4603      	mov	r3, r0
 8001270:	80fb      	strh	r3, [r7, #6]
	if (bullet) { //move bullet
 8001272:	88fb      	ldrh	r3, [r7, #6]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d023      	beq.n	80012c0 <moveBullet+0x58>
		posYbullet -= 1;
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <moveBullet+0x64>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	3b01      	subs	r3, #1
 800127e:	b29a      	uxth	r2, r3
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <moveBullet+0x64>)
 8001282:	801a      	strh	r2, [r3, #0]
		ILI9341_Draw_ImageEx(posXbullet, posYbullet, 4, 10, fire,
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <moveBullet+0x68>)
 8001286:	8818      	ldrh	r0, [r3, #0]
 8001288:	4b10      	ldr	r3, [pc, #64]	; (80012cc <moveBullet+0x64>)
 800128a:	8819      	ldrh	r1, [r3, #0]
 800128c:	2301      	movs	r3, #1
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <moveBullet+0x6c>)
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	230a      	movs	r3, #10
 8001296:	2204      	movs	r2, #4
 8001298:	f002 fbe8 	bl	8003a6c <ILI9341_Draw_ImageEx>
		SCREEN_HORIZONTAL_1);

		if (posYbullet == 20) { //check is bullet touch the top edge
 800129c:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <moveBullet+0x64>)
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	2b14      	cmp	r3, #20
 80012a2:	d10d      	bne.n	80012c0 <moveBullet+0x58>
			bullet = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	80fb      	strh	r3, [r7, #6]
			ILI9341_Draw_ImageEx(posXbullet, posYbullet, 4, 10, blank_40,
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <moveBullet+0x68>)
 80012aa:	8818      	ldrh	r0, [r3, #0]
 80012ac:	4b07      	ldr	r3, [pc, #28]	; (80012cc <moveBullet+0x64>)
 80012ae:	8819      	ldrh	r1, [r3, #0]
 80012b0:	2301      	movs	r3, #1
 80012b2:	9301      	str	r3, [sp, #4]
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <moveBullet+0x70>)
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	230a      	movs	r3, #10
 80012ba:	2204      	movs	r2, #4
 80012bc:	f002 fbd6 	bl	8003a6c <ILI9341_Draw_ImageEx>
			SCREEN_HORIZONTAL_1);
		}
	}
	return bullet;
 80012c0:	88fb      	ldrh	r3, [r7, #6]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200002ac 	.word	0x200002ac
 80012d0:	200002aa 	.word	0x200002aa
 80012d4:	0800b830 	.word	0x0800b830
 80012d8:	0800b4c0 	.word	0x0800b4c0

080012dc <moveMonsterBullet>:
uint16_t moveMonsterBullet(uint16_t monsterBullet, uint16_t i) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af02      	add	r7, sp, #8
 80012e2:	4603      	mov	r3, r0
 80012e4:	460a      	mov	r2, r1
 80012e6:	80fb      	strh	r3, [r7, #6]
 80012e8:	4613      	mov	r3, r2
 80012ea:	80bb      	strh	r3, [r7, #4]
	if (monsterBullet) { //move monsterBullet
 80012ec:	88fb      	ldrh	r3, [r7, #6]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d032      	beq.n	8001358 <moveMonsterBullet+0x7c>
		posYmonsterBullet[i] += 1;
 80012f2:	88bb      	ldrh	r3, [r7, #4]
 80012f4:	4a23      	ldr	r2, [pc, #140]	; (8001384 <moveMonsterBullet+0xa8>)
 80012f6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80012fa:	88bb      	ldrh	r3, [r7, #4]
 80012fc:	3201      	adds	r2, #1
 80012fe:	b291      	uxth	r1, r2
 8001300:	4a20      	ldr	r2, [pc, #128]	; (8001384 <moveMonsterBullet+0xa8>)
 8001302:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		ILI9341_Draw_ImageEx(posXmonsterBullet[i], posYmonsterBullet[i], 4, 10,
 8001306:	88bb      	ldrh	r3, [r7, #4]
 8001308:	4a1f      	ldr	r2, [pc, #124]	; (8001388 <moveMonsterBullet+0xac>)
 800130a:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800130e:	88bb      	ldrh	r3, [r7, #4]
 8001310:	4a1c      	ldr	r2, [pc, #112]	; (8001384 <moveMonsterBullet+0xa8>)
 8001312:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001316:	2301      	movs	r3, #1
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	4b1c      	ldr	r3, [pc, #112]	; (800138c <moveMonsterBullet+0xb0>)
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	230a      	movs	r3, #10
 8001320:	2204      	movs	r2, #4
 8001322:	f002 fba3 	bl	8003a6c <ILI9341_Draw_ImageEx>
				monsters_fire, SCREEN_HORIZONTAL_1);

		if (posYmonsterBullet[i] >= 230) { //check is monsterBullet touch the buttom edge
 8001326:	88bb      	ldrh	r3, [r7, #4]
 8001328:	4a16      	ldr	r2, [pc, #88]	; (8001384 <moveMonsterBullet+0xa8>)
 800132a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800132e:	2be5      	cmp	r3, #229	; 0xe5
 8001330:	d922      	bls.n	8001378 <moveMonsterBullet+0x9c>
			monsterBullet = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	80fb      	strh	r3, [r7, #6]
			ILI9341_Draw_ImageEx(posXmonsterBullet[i], posYmonsterBullet[i], 4,
 8001336:	88bb      	ldrh	r3, [r7, #4]
 8001338:	4a13      	ldr	r2, [pc, #76]	; (8001388 <moveMonsterBullet+0xac>)
 800133a:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800133e:	88bb      	ldrh	r3, [r7, #4]
 8001340:	4a10      	ldr	r2, [pc, #64]	; (8001384 <moveMonsterBullet+0xa8>)
 8001342:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001346:	2301      	movs	r3, #1
 8001348:	9301      	str	r3, [sp, #4]
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <moveMonsterBullet+0xb4>)
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	230a      	movs	r3, #10
 8001350:	2204      	movs	r2, #4
 8001352:	f002 fb8b 	bl	8003a6c <ILI9341_Draw_ImageEx>
 8001356:	e00f      	b.n	8001378 <moveMonsterBullet+0x9c>
					10, blank_40, SCREEN_HORIZONTAL_1);
		}
	} else {
		ILI9341_Draw_ImageEx(posXmonsterBullet[i], posYmonsterBullet[i], 4, 10,
 8001358:	88bb      	ldrh	r3, [r7, #4]
 800135a:	4a0b      	ldr	r2, [pc, #44]	; (8001388 <moveMonsterBullet+0xac>)
 800135c:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8001360:	88bb      	ldrh	r3, [r7, #4]
 8001362:	4a08      	ldr	r2, [pc, #32]	; (8001384 <moveMonsterBullet+0xa8>)
 8001364:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001368:	2301      	movs	r3, #1
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <moveMonsterBullet+0xb4>)
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	230a      	movs	r3, #10
 8001372:	2204      	movs	r2, #4
 8001374:	f002 fb7a 	bl	8003a6c <ILI9341_Draw_ImageEx>
				blank_40, SCREEN_HORIZONTAL_1);
	}
	return monsterBullet;
 8001378:	88fb      	ldrh	r3, [r7, #6]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200002f4 	.word	0x200002f4
 8001388:	200002e4 	.word	0x200002e4
 800138c:	0800c1e0 	.word	0x0800c1e0
 8001390:	0800b4c0 	.word	0x0800b4c0

08001394 <controlSpaceship>:
void controlSpaceship() {
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET) { //move right
 8001398:	2108      	movs	r1, #8
 800139a:	4833      	ldr	r0, [pc, #204]	; (8001468 <controlSpaceship+0xd4>)
 800139c:	f003 fb46 	bl	8004a2c <HAL_GPIO_ReadPin>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d10a      	bne.n	80013bc <controlSpaceship+0x28>
		if (posXspace < 300) {
 80013a6:	4b31      	ldr	r3, [pc, #196]	; (800146c <controlSpaceship+0xd8>)
 80013a8:	881b      	ldrh	r3, [r3, #0]
 80013aa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80013ae:	d205      	bcs.n	80013bc <controlSpaceship+0x28>
			posXspace += 1;
 80013b0:	4b2e      	ldr	r3, [pc, #184]	; (800146c <controlSpaceship+0xd8>)
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	3301      	adds	r3, #1
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	4b2c      	ldr	r3, [pc, #176]	; (800146c <controlSpaceship+0xd8>)
 80013ba:	801a      	strh	r2, [r3, #0]
		}
	}
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_RESET) { //move left
 80013bc:	2101      	movs	r1, #1
 80013be:	482c      	ldr	r0, [pc, #176]	; (8001470 <controlSpaceship+0xdc>)
 80013c0:	f003 fb34 	bl	8004a2c <HAL_GPIO_ReadPin>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d109      	bne.n	80013de <controlSpaceship+0x4a>
		if (posXspace > 0) {
 80013ca:	4b28      	ldr	r3, [pc, #160]	; (800146c <controlSpaceship+0xd8>)
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d005      	beq.n	80013de <controlSpaceship+0x4a>
			posXspace -= 1;
 80013d2:	4b26      	ldr	r3, [pc, #152]	; (800146c <controlSpaceship+0xd8>)
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	b29a      	uxth	r2, r3
 80013da:	4b24      	ldr	r3, [pc, #144]	; (800146c <controlSpaceship+0xd8>)
 80013dc:	801a      	strh	r2, [r3, #0]
		}
	}
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == GPIO_PIN_RESET) { //move up
 80013de:	2108      	movs	r1, #8
 80013e0:	4823      	ldr	r0, [pc, #140]	; (8001470 <controlSpaceship+0xdc>)
 80013e2:	f003 fb23 	bl	8004a2c <HAL_GPIO_ReadPin>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d109      	bne.n	8001400 <controlSpaceship+0x6c>
		if (posYspace > 20) {
 80013ec:	4b21      	ldr	r3, [pc, #132]	; (8001474 <controlSpaceship+0xe0>)
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	2b14      	cmp	r3, #20
 80013f2:	d905      	bls.n	8001400 <controlSpaceship+0x6c>
			posYspace -= 1;
 80013f4:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <controlSpaceship+0xe0>)
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	3b01      	subs	r3, #1
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <controlSpaceship+0xe0>)
 80013fe:	801a      	strh	r2, [r3, #0]
		}
	}
	if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_3) == GPIO_PIN_RESET) { //move down
 8001400:	2108      	movs	r1, #8
 8001402:	481d      	ldr	r0, [pc, #116]	; (8001478 <controlSpaceship+0xe4>)
 8001404:	f003 fb12 	bl	8004a2c <HAL_GPIO_ReadPin>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d109      	bne.n	8001422 <controlSpaceship+0x8e>
		if (posYspace < 220) {
 800140e:	4b19      	ldr	r3, [pc, #100]	; (8001474 <controlSpaceship+0xe0>)
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	2bdb      	cmp	r3, #219	; 0xdb
 8001414:	d805      	bhi.n	8001422 <controlSpaceship+0x8e>
			posYspace += 1;
 8001416:	4b17      	ldr	r3, [pc, #92]	; (8001474 <controlSpaceship+0xe0>)
 8001418:	881b      	ldrh	r3, [r3, #0]
 800141a:	3301      	adds	r3, #1
 800141c:	b29a      	uxth	r2, r3
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <controlSpaceship+0xe0>)
 8001420:	801a      	strh	r2, [r3, #0]
		}
	}
	if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_5) == GPIO_PIN_RESET
 8001422:	2120      	movs	r1, #32
 8001424:	4814      	ldr	r0, [pc, #80]	; (8001478 <controlSpaceship+0xe4>)
 8001426:	f003 fb01 	bl	8004a2c <HAL_GPIO_ReadPin>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d006      	beq.n	800143e <controlSpaceship+0xaa>
			|| HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_2) == GPIO_PIN_RESET) { //shoot bullet
 8001430:	2104      	movs	r1, #4
 8001432:	4811      	ldr	r0, [pc, #68]	; (8001478 <controlSpaceship+0xe4>)
 8001434:	f003 fafa 	bl	8004a2c <HAL_GPIO_ReadPin>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d112      	bne.n	8001464 <controlSpaceship+0xd0>
		if (bullet == 0) {
 800143e:	4b0f      	ldr	r3, [pc, #60]	; (800147c <controlSpaceship+0xe8>)
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10e      	bne.n	8001464 <controlSpaceship+0xd0>
			posXbullet = posXspace + 8;
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <controlSpaceship+0xd8>)
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	3308      	adds	r3, #8
 800144c:	b29a      	uxth	r2, r3
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <controlSpaceship+0xec>)
 8001450:	801a      	strh	r2, [r3, #0]
			posYbullet = posYspace - 10;
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <controlSpaceship+0xe0>)
 8001454:	881b      	ldrh	r3, [r3, #0]
 8001456:	3b0a      	subs	r3, #10
 8001458:	b29a      	uxth	r2, r3
 800145a:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <controlSpaceship+0xf0>)
 800145c:	801a      	strh	r2, [r3, #0]
			bullet = 1;
 800145e:	4b07      	ldr	r3, [pc, #28]	; (800147c <controlSpaceship+0xe8>)
 8001460:	2201      	movs	r2, #1
 8001462:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40020000 	.word	0x40020000
 800146c:	200002a6 	.word	0x200002a6
 8001470:	40020800 	.word	0x40020800
 8001474:	200002a8 	.word	0x200002a8
 8001478:	40021400 	.word	0x40021400
 800147c:	200002ae 	.word	0x200002ae
 8001480:	200002aa 	.word	0x200002aa
 8001484:	200002ac 	.word	0x200002ac

08001488 <CompareArrays>:

static const size_t NUM_COLS = 3;
/* Lexicographically compare two arrays of size NUM_COLS. */
int CompareArrays(const void *arr1, const void *arr2) {
 8001488:	b480      	push	{r7}
 800148a:	b087      	sub	sp, #28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
	/* Convert back to the proper type. */
	int one = *((int*) arr1); // score arr1
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	617b      	str	r3, [r7, #20]
	int two = *((int*) arr2); // score arr2
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	613b      	str	r3, [r7, #16]
	int oneone = *((int*) arr1 + 1); // time arr1
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	60fb      	str	r3, [r7, #12]
	int twotwo = *((int*) arr2 + 1); // time arr2
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	60bb      	str	r3, [r7, #8]
	/* Do an element-by-element comparison.  If a mismatch is found, report how
	 * the arrays compare against one another.
	 */
	//Max -> Min (score compare)
	if (one > two)
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	dd02      	ble.n	80014b8 <CompareArrays+0x30>
		return -1;
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295
 80014b6:	e013      	b.n	80014e0 <CompareArrays+0x58>
	if (one < two)
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	429a      	cmp	r2, r3
 80014be:	da01      	bge.n	80014c4 <CompareArrays+0x3c>
		return +1;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e00d      	b.n	80014e0 <CompareArrays+0x58>
	/* If we get here, the arrays are equal to one another. */
	//Min -> Max (time compare)
	if (oneone < twotwo)
 80014c4:	68fa      	ldr	r2, [r7, #12]
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	da02      	bge.n	80014d2 <CompareArrays+0x4a>
		return -1;
 80014cc:	f04f 33ff 	mov.w	r3, #4294967295
 80014d0:	e006      	b.n	80014e0 <CompareArrays+0x58>
	if (oneone > twotwo)
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	dd01      	ble.n	80014de <CompareArrays+0x56>
		return +1;
 80014da:	2301      	movs	r3, #1
 80014dc:	e000      	b.n	80014e0 <CompareArrays+0x58>
	return 0;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	371c      	adds	r7, #28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b0c1      	sub	sp, #260	; 0x104
 80014f0:	af04      	add	r7, sp, #16
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 80014f2:	f7ff fbe1 	bl	8000cb8 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 80014f6:	f7ff fc05 	bl	8000d04 <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80014fa:	f002 ff4f 	bl	800439c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80014fe:	f001 fcab 	bl	8002e58 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001502:	f7ff f9d5 	bl	80008b0 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8001506:	f002 f92d 	bl	8003764 <MX_USART3_UART_Init>
	MX_SPI5_Init();
 800150a:	f001 fd79 	bl	8003000 <MX_SPI5_Init>
	MX_TIM1_Init();
 800150e:	f001 ff77 	bl	8003400 <MX_TIM1_Init>
	MX_RNG_Init();
 8001512:	f001 fd2d 	bl	8002f70 <MX_RNG_Init>
	MX_I2C1_Init();
 8001516:	f7ff fb2f 	bl	8000b78 <MX_I2C1_Init>
	MX_TIM2_Init();
 800151a:	f001 ffc7 	bl	80034ac <MX_TIM2_Init>
	MX_TIM3_Init();
 800151e:	f002 f813 	bl	8003548 <MX_TIM3_Init>
	MX_TIM4_Init();
 8001522:	f002 f85f 	bl	80035e4 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	ILI9341_Init(); //initial driver setup to drive ili9341
 8001526:	f002 fc31 	bl	8003d8c <ILI9341_Init>
	ILI9341_Fill_Screen(BLACK);
 800152a:	2000      	movs	r0, #0
 800152c:	f002 fdda 	bl	80040e4 <ILI9341_Fill_Screen>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001530:	2001      	movs	r0, #1
 8001532:	f002 fbcd 	bl	8003cd0 <ILI9341_Set_Rotation>
	HAL_TIM_Base_Start_IT(&htim1);
 8001536:	4877      	ldr	r0, [pc, #476]	; (8001714 <main+0x228>)
 8001538:	f005 fe32 	bl	80071a0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 800153c:	4876      	ldr	r0, [pc, #472]	; (8001718 <main+0x22c>)
 800153e:	f005 fe2f 	bl	80071a0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8001542:	4876      	ldr	r0, [pc, #472]	; (800171c <main+0x230>)
 8001544:	f005 fe2c 	bl	80071a0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8001548:	4875      	ldr	r0, [pc, #468]	; (8001720 <main+0x234>)
 800154a:	f005 fe29 	bl	80071a0 <HAL_TIM_Base_Start_IT>
//	for (int i = 0; i < 22; i++) {
//	EEPROM_PageErase(i);
//	}
//	float dataw = 0;
//	EEPROM_Write_NUM (1, 0, dataw);
	playerLen = EEPROM_Read_NUM(1, 0);
 800154e:	2100      	movs	r1, #0
 8001550:	2001      	movs	r0, #1
 8001552:	f7ff f92f 	bl	80007b4 <EEPROM_Read_NUM>
 8001556:	eef0 7a40 	vmov.f32	s15, s0
 800155a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800155e:	ee17 2a90 	vmov	r2, s15
 8001562:	4b70      	ldr	r3, [pc, #448]	; (8001724 <main+0x238>)
 8001564:	601a      	str	r2, [r3, #0]

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		//-----------------------------------------------------------------------------menu
		if (stage == 0) {
 8001566:	4b70      	ldr	r3, [pc, #448]	; (8001728 <main+0x23c>)
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	f040 80ee 	bne.w	800174c <main+0x260>
			int select; // 0 = start, 1 = score
			if (initMenu) {
 8001570:	4b6e      	ldr	r3, [pc, #440]	; (800172c <main+0x240>)
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d037      	beq.n	80015e8 <main+0xfc>
				ILI9341_Fill_Screen(BLACK);
 8001578:	2000      	movs	r0, #0
 800157a:	f002 fdb3 	bl	80040e4 <ILI9341_Fill_Screen>
				ILI9341_Draw_Text("MAD", 117, 30, WHITE, 5, BLACK);
 800157e:	2300      	movs	r3, #0
 8001580:	9301      	str	r3, [sp, #4]
 8001582:	2305      	movs	r3, #5
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800158a:	221e      	movs	r2, #30
 800158c:	2175      	movs	r1, #117	; 0x75
 800158e:	4868      	ldr	r0, [pc, #416]	; (8001730 <main+0x244>)
 8001590:	f002 fa3c 	bl	8003a0c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("Invaders", 65, 70, WHITE, 4, BLACK);
 8001594:	2300      	movs	r3, #0
 8001596:	9301      	str	r3, [sp, #4]
 8001598:	2304      	movs	r3, #4
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015a0:	2246      	movs	r2, #70	; 0x46
 80015a2:	2141      	movs	r1, #65	; 0x41
 80015a4:	4863      	ldr	r0, [pc, #396]	; (8001734 <main+0x248>)
 80015a6:	f002 fa31 	bl	8003a0c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("Start", 115, 140, YELLOW, 3, BLACK);
 80015aa:	2300      	movs	r3, #0
 80015ac:	9301      	str	r3, [sp, #4]
 80015ae:	2303      	movs	r3, #3
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80015b6:	228c      	movs	r2, #140	; 0x8c
 80015b8:	2173      	movs	r1, #115	; 0x73
 80015ba:	485f      	ldr	r0, [pc, #380]	; (8001738 <main+0x24c>)
 80015bc:	f002 fa26 	bl	8003a0c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("Score", 115, 170, WHITE, 3, BLACK);
 80015c0:	2300      	movs	r3, #0
 80015c2:	9301      	str	r3, [sp, #4]
 80015c4:	2303      	movs	r3, #3
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015cc:	22aa      	movs	r2, #170	; 0xaa
 80015ce:	2173      	movs	r1, #115	; 0x73
 80015d0:	485a      	ldr	r0, [pc, #360]	; (800173c <main+0x250>)
 80015d2:	f002 fa1b 	bl	8003a0c <ILI9341_Draw_Text>
				initMenu = 0;
 80015d6:	4b55      	ldr	r3, [pc, #340]	; (800172c <main+0x240>)
 80015d8:	2200      	movs	r2, #0
 80015da:	801a      	strh	r2, [r3, #0]
				menuButtonState = 1;
 80015dc:	4b58      	ldr	r3, [pc, #352]	; (8001740 <main+0x254>)
 80015de:	2201      	movs	r2, #1
 80015e0:	801a      	strh	r2, [r3, #0]
				select = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			}
			if (menuButtonState == 0
 80015e8:	4b55      	ldr	r3, [pc, #340]	; (8001740 <main+0x254>)
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d147      	bne.n	8001680 <main+0x194>
					&& (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == GPIO_PIN_RESET
 80015f0:	2108      	movs	r1, #8
 80015f2:	4854      	ldr	r0, [pc, #336]	; (8001744 <main+0x258>)
 80015f4:	f003 fa1a 	bl	8004a2c <HAL_GPIO_ReadPin>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d006      	beq.n	800160c <main+0x120>
							|| HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_3)
 80015fe:	2108      	movs	r1, #8
 8001600:	4851      	ldr	r0, [pc, #324]	; (8001748 <main+0x25c>)
 8001602:	f003 fa13 	bl	8004a2c <HAL_GPIO_ReadPin>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d139      	bne.n	8001680 <main+0x194>
									== GPIO_PIN_RESET)) {
				menuButtonState = 1;
 800160c:	4b4c      	ldr	r3, [pc, #304]	; (8001740 <main+0x254>)
 800160e:	2201      	movs	r2, #1
 8001610:	801a      	strh	r2, [r3, #0]
				if (select) {
 8001612:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001616:	2b00      	cmp	r3, #0
 8001618:	d019      	beq.n	800164e <main+0x162>
					ILI9341_Draw_Text("Start", 115, 140, YELLOW, 3, BLACK);
 800161a:	2300      	movs	r3, #0
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	2303      	movs	r3, #3
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001626:	228c      	movs	r2, #140	; 0x8c
 8001628:	2173      	movs	r1, #115	; 0x73
 800162a:	4843      	ldr	r0, [pc, #268]	; (8001738 <main+0x24c>)
 800162c:	f002 f9ee 	bl	8003a0c <ILI9341_Draw_Text>
					ILI9341_Draw_Text("Score", 115, 170, WHITE, 3, BLACK);
 8001630:	2300      	movs	r3, #0
 8001632:	9301      	str	r3, [sp, #4]
 8001634:	2303      	movs	r3, #3
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800163c:	22aa      	movs	r2, #170	; 0xaa
 800163e:	2173      	movs	r1, #115	; 0x73
 8001640:	483e      	ldr	r0, [pc, #248]	; (800173c <main+0x250>)
 8001642:	f002 f9e3 	bl	8003a0c <ILI9341_Draw_Text>
					select = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800164c:	e018      	b.n	8001680 <main+0x194>
				} else {
					ILI9341_Draw_Text("Start", 115, 140, WHITE, 3, BLACK);
 800164e:	2300      	movs	r3, #0
 8001650:	9301      	str	r3, [sp, #4]
 8001652:	2303      	movs	r3, #3
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800165a:	228c      	movs	r2, #140	; 0x8c
 800165c:	2173      	movs	r1, #115	; 0x73
 800165e:	4836      	ldr	r0, [pc, #216]	; (8001738 <main+0x24c>)
 8001660:	f002 f9d4 	bl	8003a0c <ILI9341_Draw_Text>
					ILI9341_Draw_Text("Score", 115, 170, YELLOW, 3, BLACK);
 8001664:	2300      	movs	r3, #0
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	2303      	movs	r3, #3
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001670:	22aa      	movs	r2, #170	; 0xaa
 8001672:	2173      	movs	r1, #115	; 0x73
 8001674:	4831      	ldr	r0, [pc, #196]	; (800173c <main+0x250>)
 8001676:	f002 f9c9 	bl	8003a0c <ILI9341_Draw_Text>
					select = 1;
 800167a:	2301      	movs	r3, #1
 800167c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
				}
			}
			if (menuButtonState == 1
 8001680:	4b2f      	ldr	r3, [pc, #188]	; (8001740 <main+0x254>)
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d117      	bne.n	80016b8 <main+0x1cc>
					&& HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == GPIO_PIN_SET
 8001688:	2108      	movs	r1, #8
 800168a:	482e      	ldr	r0, [pc, #184]	; (8001744 <main+0x258>)
 800168c:	f003 f9ce 	bl	8004a2c <HAL_GPIO_ReadPin>
 8001690:	4603      	mov	r3, r0
 8001692:	2b01      	cmp	r3, #1
 8001694:	d110      	bne.n	80016b8 <main+0x1cc>
					&& HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_3) == GPIO_PIN_SET
 8001696:	2108      	movs	r1, #8
 8001698:	482b      	ldr	r0, [pc, #172]	; (8001748 <main+0x25c>)
 800169a:	f003 f9c7 	bl	8004a2c <HAL_GPIO_ReadPin>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d109      	bne.n	80016b8 <main+0x1cc>
					&& HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_1) == GPIO_PIN_SET) {
 80016a4:	2102      	movs	r1, #2
 80016a6:	4828      	ldr	r0, [pc, #160]	; (8001748 <main+0x25c>)
 80016a8:	f003 f9c0 	bl	8004a2c <HAL_GPIO_ReadPin>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d102      	bne.n	80016b8 <main+0x1cc>
				menuButtonState = 0;
 80016b2:	4b23      	ldr	r3, [pc, #140]	; (8001740 <main+0x254>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	801a      	strh	r2, [r3, #0]
			}
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == GPIO_PIN_SET
 80016b8:	2108      	movs	r1, #8
 80016ba:	4822      	ldr	r0, [pc, #136]	; (8001744 <main+0x258>)
 80016bc:	f003 f9b6 	bl	8004a2c <HAL_GPIO_ReadPin>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	f040 86c2 	bne.w	800244c <main+0xf60>
					&& HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_3) == GPIO_PIN_SET
 80016c8:	2108      	movs	r1, #8
 80016ca:	481f      	ldr	r0, [pc, #124]	; (8001748 <main+0x25c>)
 80016cc:	f003 f9ae 	bl	8004a2c <HAL_GPIO_ReadPin>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	f040 86ba 	bne.w	800244c <main+0xf60>
					&& HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_1) == GPIO_PIN_RESET
 80016d8:	2102      	movs	r1, #2
 80016da:	481b      	ldr	r0, [pc, #108]	; (8001748 <main+0x25c>)
 80016dc:	f003 f9a6 	bl	8004a2c <HAL_GPIO_ReadPin>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f040 86b2 	bne.w	800244c <main+0xf60>
					&& menuButtonState == 0) {
 80016e8:	4b15      	ldr	r3, [pc, #84]	; (8001740 <main+0x254>)
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f040 86ad 	bne.w	800244c <main+0xf60>
				if (select) {
 80016f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d007      	beq.n	800170a <main+0x21e>
					ILI9341_Fill_Screen(BLACK);
 80016fa:	2000      	movs	r0, #0
 80016fc:	f002 fcf2 	bl	80040e4 <ILI9341_Fill_Screen>
					stage = 6;
 8001700:	4b09      	ldr	r3, [pc, #36]	; (8001728 <main+0x23c>)
 8001702:	2206      	movs	r2, #6
 8001704:	801a      	strh	r2, [r3, #0]
 8001706:	f000 bea1 	b.w	800244c <main+0xf60>
				} else {
					restart();
 800170a:	f7ff fbbb 	bl	8000e84 <restart>
 800170e:	f000 be9d 	b.w	800244c <main+0xf60>
 8001712:	bf00      	nop
 8001714:	200003ec 	.word	0x200003ec
 8001718:	20000438 	.word	0x20000438
 800171c:	20000484 	.word	0x20000484
 8001720:	200004d0 	.word	0x200004d0
 8001724:	20000314 	.word	0x20000314
 8001728:	200002a4 	.word	0x200002a4
 800172c:	2000001e 	.word	0x2000001e
 8001730:	0800b454 	.word	0x0800b454
 8001734:	0800b458 	.word	0x0800b458
 8001738:	0800b464 	.word	0x0800b464
 800173c:	0800b46c 	.word	0x0800b46c
 8001740:	20000312 	.word	0x20000312
 8001744:	40020800 	.word	0x40020800
 8001748:	40021400 	.word	0x40021400
				}
			}
		} else
		//-----------------------------------------------------------------------------game screen
		if (stage == 1) {
 800174c:	4baa      	ldr	r3, [pc, #680]	; (80019f8 <main+0x50c>)
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	2b01      	cmp	r3, #1
 8001752:	f040 83e5 	bne.w	8001f20 <main+0xa34>

			if (initGamePage) {
 8001756:	4ba9      	ldr	r3, [pc, #676]	; (80019fc <main+0x510>)
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d01b      	beq.n	8001796 <main+0x2aa>
				second = 0;
 800175e:	4ba8      	ldr	r3, [pc, #672]	; (8001a00 <main+0x514>)
 8001760:	2200      	movs	r2, #0
 8001762:	801a      	strh	r2, [r3, #0]
				ILI9341_Draw_Text("0000", 0, 15, WHITE, 2, 0x0000);
 8001764:	2300      	movs	r3, #0
 8001766:	9301      	str	r3, [sp, #4]
 8001768:	2302      	movs	r3, #2
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001770:	220f      	movs	r2, #15
 8001772:	2100      	movs	r1, #0
 8001774:	48a3      	ldr	r0, [pc, #652]	; (8001a04 <main+0x518>)
 8001776:	f002 f949 	bl	8003a0c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("00:00", 200, 0, WHITE, 2, 0x0000);
 800177a:	2300      	movs	r3, #0
 800177c:	9301      	str	r3, [sp, #4]
 800177e:	2302      	movs	r3, #2
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001786:	2200      	movs	r2, #0
 8001788:	21c8      	movs	r1, #200	; 0xc8
 800178a:	489f      	ldr	r0, [pc, #636]	; (8001a08 <main+0x51c>)
 800178c:	f002 f93e 	bl	8003a0c <ILI9341_Draw_Text>
				initGamePage = 0;
 8001790:	4b9a      	ldr	r3, [pc, #616]	; (80019fc <main+0x510>)
 8001792:	2200      	movs	r2, #0
 8001794:	801a      	strh	r2, [r3, #0]
			}
			char str[30];
			if (pause == 1) {
 8001796:	4b9d      	ldr	r3, [pc, #628]	; (8001a0c <main+0x520>)
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d136      	bne.n	800180c <main+0x320>
				pause = 0;
 800179e:	4b9b      	ldr	r3, [pc, #620]	; (8001a0c <main+0x520>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	801a      	strh	r2, [r3, #0]
				ILI9341_Fill_Screen(BLACK);
 80017a4:	2000      	movs	r0, #0
 80017a6:	f002 fc9d 	bl	80040e4 <ILI9341_Fill_Screen>
				sprintf(str, "Wave : %d", wave);
 80017aa:	4b99      	ldr	r3, [pc, #612]	; (8001a10 <main+0x524>)
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	461a      	mov	r2, r3
 80017b0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80017b4:	4997      	ldr	r1, [pc, #604]	; (8001a14 <main+0x528>)
 80017b6:	4618      	mov	r0, r3
 80017b8:	f007 fc0e 	bl	8008fd8 <siprintf>
				ILI9341_Draw_Text(str, 0, 0, WHITE, 2, 0x0000); //draw level
 80017bc:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80017c0:	2300      	movs	r3, #0
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	2302      	movs	r3, #2
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017cc:	2200      	movs	r2, #0
 80017ce:	2100      	movs	r1, #0
 80017d0:	f002 f91c 	bl	8003a0c <ILI9341_Draw_Text>
				sprintf(str, "%.4d", score);
 80017d4:	4b90      	ldr	r3, [pc, #576]	; (8001a18 <main+0x52c>)
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	461a      	mov	r2, r3
 80017da:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80017de:	498f      	ldr	r1, [pc, #572]	; (8001a1c <main+0x530>)
 80017e0:	4618      	mov	r0, r3
 80017e2:	f007 fbf9 	bl	8008fd8 <siprintf>
				ILI9341_Draw_Text(str, 0, 15, WHITE, 2, 0x0000);
 80017e6:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80017ea:	2300      	movs	r3, #0
 80017ec:	9301      	str	r3, [sp, #4]
 80017ee:	2302      	movs	r3, #2
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017f6:	220f      	movs	r2, #15
 80017f8:	2100      	movs	r1, #0
 80017fa:	f002 f907 	bl	8003a0c <ILI9341_Draw_Text>
				displayTime(second, 200, 0);
 80017fe:	4b80      	ldr	r3, [pc, #512]	; (8001a00 <main+0x514>)
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	2200      	movs	r2, #0
 8001804:	21c8      	movs	r1, #200	; 0xc8
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fac0 	bl	8000d8c <displayTime>
			}
			if (wavestate) {
 800180c:	4b84      	ldr	r3, [pc, #528]	; (8001a20 <main+0x534>)
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 80ed 	beq.w	80019f0 <main+0x504>
				ILI9341_Draw_Rectangle(0, 50, 320, 100, 0x0000);
 8001816:	2300      	movs	r3, #0
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	2364      	movs	r3, #100	; 0x64
 800181c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001820:	2132      	movs	r1, #50	; 0x32
 8001822:	2000      	movs	r0, #0
 8001824:	f002 fd5e 	bl	80042e4 <ILI9341_Draw_Rectangle>
				if (wave == 7) {
 8001828:	4b79      	ldr	r3, [pc, #484]	; (8001a10 <main+0x524>)
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	2b07      	cmp	r3, #7
 800182e:	d102      	bne.n	8001836 <main+0x34a>
					stage = 3;
 8001830:	4b71      	ldr	r3, [pc, #452]	; (80019f8 <main+0x50c>)
 8001832:	2203      	movs	r2, #3
 8001834:	801a      	strh	r2, [r3, #0]
				}
				sprintf(str, "Wave : %d", wave);
 8001836:	4b76      	ldr	r3, [pc, #472]	; (8001a10 <main+0x524>)
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	461a      	mov	r2, r3
 800183c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001840:	4974      	ldr	r1, [pc, #464]	; (8001a14 <main+0x528>)
 8001842:	4618      	mov	r0, r3
 8001844:	f007 fbc8 	bl	8008fd8 <siprintf>
				ILI9341_Draw_Text(str, 0, 0, WHITE, 2, 0x0000); //draw level
 8001848:	f107 0084 	add.w	r0, r7, #132	; 0x84
 800184c:	2300      	movs	r3, #0
 800184e:	9301      	str	r3, [sp, #4]
 8001850:	2302      	movs	r3, #2
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001858:	2200      	movs	r2, #0
 800185a:	2100      	movs	r1, #0
 800185c:	f002 f8d6 	bl	8003a0c <ILI9341_Draw_Text>
				if (wave == 1) {
 8001860:	4b6b      	ldr	r3, [pc, #428]	; (8001a10 <main+0x524>)
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d11a      	bne.n	800189e <main+0x3b2>
					setMonsterAvaliable(1, 1, 1, 0, 0, 0, 0);
 8001868:	2300      	movs	r3, #0
 800186a:	9302      	str	r3, [sp, #8]
 800186c:	2300      	movs	r3, #0
 800186e:	9301      	str	r3, [sp, #4]
 8001870:	2300      	movs	r3, #0
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	2300      	movs	r3, #0
 8001876:	2201      	movs	r2, #1
 8001878:	2101      	movs	r1, #1
 800187a:	2001      	movs	r0, #1
 800187c:	f7ff fc52 	bl	8001124 <setMonsterAvaliable>
					setMonterType(2, 2, 2, 0, 0, 0, 0);
 8001880:	2300      	movs	r3, #0
 8001882:	9302      	str	r3, [sp, #8]
 8001884:	2300      	movs	r3, #0
 8001886:	9301      	str	r3, [sp, #4]
 8001888:	2300      	movs	r3, #0
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	2300      	movs	r3, #0
 800188e:	2202      	movs	r2, #2
 8001890:	2102      	movs	r1, #2
 8001892:	2002      	movs	r0, #2
 8001894:	f7ff fc9e 	bl	80011d4 <setMonterType>
					resetMonsterBullet();
 8001898:	f7ff fcc8 	bl	800122c <resetMonsterBullet>
 800189c:	e099      	b.n	80019d2 <main+0x4e6>
				} else if (wave == 2) {
 800189e:	4b5c      	ldr	r3, [pc, #368]	; (8001a10 <main+0x524>)
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d11a      	bne.n	80018dc <main+0x3f0>
					setMonsterAvaliable(1, 1, 1, 0, 0, 0, 0);
 80018a6:	2300      	movs	r3, #0
 80018a8:	9302      	str	r3, [sp, #8]
 80018aa:	2300      	movs	r3, #0
 80018ac:	9301      	str	r3, [sp, #4]
 80018ae:	2300      	movs	r3, #0
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	2300      	movs	r3, #0
 80018b4:	2201      	movs	r2, #1
 80018b6:	2101      	movs	r1, #1
 80018b8:	2001      	movs	r0, #1
 80018ba:	f7ff fc33 	bl	8001124 <setMonsterAvaliable>
					setMonterType(2, 1, 2, 0, 0, 0, 0);
 80018be:	2300      	movs	r3, #0
 80018c0:	9302      	str	r3, [sp, #8]
 80018c2:	2300      	movs	r3, #0
 80018c4:	9301      	str	r3, [sp, #4]
 80018c6:	2300      	movs	r3, #0
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	2300      	movs	r3, #0
 80018cc:	2202      	movs	r2, #2
 80018ce:	2101      	movs	r1, #1
 80018d0:	2002      	movs	r0, #2
 80018d2:	f7ff fc7f 	bl	80011d4 <setMonterType>
					resetMonsterBullet();
 80018d6:	f7ff fca9 	bl	800122c <resetMonsterBullet>
 80018da:	e07a      	b.n	80019d2 <main+0x4e6>
				} else if (wave == 3) {
 80018dc:	4b4c      	ldr	r3, [pc, #304]	; (8001a10 <main+0x524>)
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	2b03      	cmp	r3, #3
 80018e2:	d11a      	bne.n	800191a <main+0x42e>
					setMonsterAvaliable(1, 1, 1, 1, 1, 0, 0);
 80018e4:	2300      	movs	r3, #0
 80018e6:	9302      	str	r3, [sp, #8]
 80018e8:	2300      	movs	r3, #0
 80018ea:	9301      	str	r3, [sp, #4]
 80018ec:	2301      	movs	r3, #1
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	2301      	movs	r3, #1
 80018f2:	2201      	movs	r2, #1
 80018f4:	2101      	movs	r1, #1
 80018f6:	2001      	movs	r0, #1
 80018f8:	f7ff fc14 	bl	8001124 <setMonsterAvaliable>
					setMonterType(2, 2, 2, 1, 1, 0, 0);
 80018fc:	2300      	movs	r3, #0
 80018fe:	9302      	str	r3, [sp, #8]
 8001900:	2300      	movs	r3, #0
 8001902:	9301      	str	r3, [sp, #4]
 8001904:	2301      	movs	r3, #1
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	2301      	movs	r3, #1
 800190a:	2202      	movs	r2, #2
 800190c:	2102      	movs	r1, #2
 800190e:	2002      	movs	r0, #2
 8001910:	f7ff fc60 	bl	80011d4 <setMonterType>
					resetMonsterBullet();
 8001914:	f7ff fc8a 	bl	800122c <resetMonsterBullet>
 8001918:	e05b      	b.n	80019d2 <main+0x4e6>
				} else if (wave == 4) {
 800191a:	4b3d      	ldr	r3, [pc, #244]	; (8001a10 <main+0x524>)
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	2b04      	cmp	r3, #4
 8001920:	d11a      	bne.n	8001958 <main+0x46c>
					setMonsterAvaliable(1, 1, 1, 1, 1, 0, 0);
 8001922:	2300      	movs	r3, #0
 8001924:	9302      	str	r3, [sp, #8]
 8001926:	2300      	movs	r3, #0
 8001928:	9301      	str	r3, [sp, #4]
 800192a:	2301      	movs	r3, #1
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	2301      	movs	r3, #1
 8001930:	2201      	movs	r2, #1
 8001932:	2101      	movs	r1, #1
 8001934:	2001      	movs	r0, #1
 8001936:	f7ff fbf5 	bl	8001124 <setMonsterAvaliable>
					setMonterType(1, 1, 1, 2, 2, 0, 0);
 800193a:	2300      	movs	r3, #0
 800193c:	9302      	str	r3, [sp, #8]
 800193e:	2300      	movs	r3, #0
 8001940:	9301      	str	r3, [sp, #4]
 8001942:	2302      	movs	r3, #2
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	2302      	movs	r3, #2
 8001948:	2201      	movs	r2, #1
 800194a:	2101      	movs	r1, #1
 800194c:	2001      	movs	r0, #1
 800194e:	f7ff fc41 	bl	80011d4 <setMonterType>
					resetMonsterBullet();
 8001952:	f7ff fc6b 	bl	800122c <resetMonsterBullet>
 8001956:	e03c      	b.n	80019d2 <main+0x4e6>
				} else if (wave == 5) {
 8001958:	4b2d      	ldr	r3, [pc, #180]	; (8001a10 <main+0x524>)
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	2b05      	cmp	r3, #5
 800195e:	d11a      	bne.n	8001996 <main+0x4aa>
					setMonsterAvaliable(1, 1, 1, 1, 1, 1, 1);
 8001960:	2301      	movs	r3, #1
 8001962:	9302      	str	r3, [sp, #8]
 8001964:	2301      	movs	r3, #1
 8001966:	9301      	str	r3, [sp, #4]
 8001968:	2301      	movs	r3, #1
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	2301      	movs	r3, #1
 800196e:	2201      	movs	r2, #1
 8001970:	2101      	movs	r1, #1
 8001972:	2001      	movs	r0, #1
 8001974:	f7ff fbd6 	bl	8001124 <setMonsterAvaliable>
					setMonterType(2, 2, 2, 1, 1, 1, 1);
 8001978:	2301      	movs	r3, #1
 800197a:	9302      	str	r3, [sp, #8]
 800197c:	2301      	movs	r3, #1
 800197e:	9301      	str	r3, [sp, #4]
 8001980:	2301      	movs	r3, #1
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	2301      	movs	r3, #1
 8001986:	2202      	movs	r2, #2
 8001988:	2102      	movs	r1, #2
 800198a:	2002      	movs	r0, #2
 800198c:	f7ff fc22 	bl	80011d4 <setMonterType>
					resetMonsterBullet();
 8001990:	f7ff fc4c 	bl	800122c <resetMonsterBullet>
 8001994:	e01d      	b.n	80019d2 <main+0x4e6>
				} else if (wave == 6) {
 8001996:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <main+0x524>)
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	2b06      	cmp	r3, #6
 800199c:	d119      	bne.n	80019d2 <main+0x4e6>
					setMonsterAvaliable(1, 1, 1, 1, 1, 1, 1);
 800199e:	2301      	movs	r3, #1
 80019a0:	9302      	str	r3, [sp, #8]
 80019a2:	2301      	movs	r3, #1
 80019a4:	9301      	str	r3, [sp, #4]
 80019a6:	2301      	movs	r3, #1
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	2301      	movs	r3, #1
 80019ac:	2201      	movs	r2, #1
 80019ae:	2101      	movs	r1, #1
 80019b0:	2001      	movs	r0, #1
 80019b2:	f7ff fbb7 	bl	8001124 <setMonsterAvaliable>
					setMonterType(1, 1, 1, 1, 1, 1, 1);
 80019b6:	2301      	movs	r3, #1
 80019b8:	9302      	str	r3, [sp, #8]
 80019ba:	2301      	movs	r3, #1
 80019bc:	9301      	str	r3, [sp, #4]
 80019be:	2301      	movs	r3, #1
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	2301      	movs	r3, #1
 80019c4:	2201      	movs	r2, #1
 80019c6:	2101      	movs	r1, #1
 80019c8:	2001      	movs	r0, #1
 80019ca:	f7ff fc03 	bl	80011d4 <setMonterType>
					resetMonsterBullet();
 80019ce:	f7ff fc2d 	bl	800122c <resetMonsterBullet>
				}
				setPosXMonster(50, 150, 250, 100, 200, 100, 200);
 80019d2:	23c8      	movs	r3, #200	; 0xc8
 80019d4:	9302      	str	r3, [sp, #8]
 80019d6:	2364      	movs	r3, #100	; 0x64
 80019d8:	9301      	str	r3, [sp, #4]
 80019da:	23c8      	movs	r3, #200	; 0xc8
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	2364      	movs	r3, #100	; 0x64
 80019e0:	22fa      	movs	r2, #250	; 0xfa
 80019e2:	2196      	movs	r1, #150	; 0x96
 80019e4:	2032      	movs	r0, #50	; 0x32
 80019e6:	f7ff fbc9 	bl	800117c <setPosXMonster>
				wavestate = 0;
 80019ea:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <main+0x534>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	801a      	strh	r2, [r3, #0]
			}
			for (int i = 0; i < 7; i++) { //everything about monster
 80019f0:	2300      	movs	r3, #0
 80019f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80019f6:	e211      	b.n	8001e1c <main+0x930>
 80019f8:	200002a4 	.word	0x200002a4
 80019fc:	2000030a 	.word	0x2000030a
 8001a00:	2000030c 	.word	0x2000030c
 8001a04:	0800b41c 	.word	0x0800b41c
 8001a08:	0800b414 	.word	0x0800b414
 8001a0c:	20000310 	.word	0x20000310
 8001a10:	20000304 	.word	0x20000304
 8001a14:	0800b474 	.word	0x0800b474
 8001a18:	20000308 	.word	0x20000308
 8001a1c:	0800b480 	.word	0x0800b480
 8001a20:	20000306 	.word	0x20000306

				if (monsterAvaliable[i]) {
 8001a24:	4a8d      	ldr	r2, [pc, #564]	; (8001c5c <main+0x770>)
 8001a26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001a2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 8140 	beq.w	8001cb4 <main+0x7c8>
					if ((posYbullet > posYmonster[i] - 4)
 8001a34:	4a8a      	ldr	r2, [pc, #552]	; (8001c60 <main+0x774>)
 8001a36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001a3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a3e:	3b03      	subs	r3, #3
 8001a40:	4a88      	ldr	r2, [pc, #544]	; (8001c64 <main+0x778>)
 8001a42:	8812      	ldrh	r2, [r2, #0]
 8001a44:	4293      	cmp	r3, r2
 8001a46:	f300 8088 	bgt.w	8001b5a <main+0x66e>
							&& (posYbullet < posYmonster[i] + 19)
 8001a4a:	4a85      	ldr	r2, [pc, #532]	; (8001c60 <main+0x774>)
 8001a4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001a50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a54:	3312      	adds	r3, #18
 8001a56:	4a83      	ldr	r2, [pc, #524]	; (8001c64 <main+0x778>)
 8001a58:	8812      	ldrh	r2, [r2, #0]
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	db7d      	blt.n	8001b5a <main+0x66e>
							&& (posXbullet > posXmonster[i] - 4)
 8001a5e:	4a82      	ldr	r2, [pc, #520]	; (8001c68 <main+0x77c>)
 8001a60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001a64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a68:	3b03      	subs	r3, #3
 8001a6a:	4a80      	ldr	r2, [pc, #512]	; (8001c6c <main+0x780>)
 8001a6c:	8812      	ldrh	r2, [r2, #0]
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	dc73      	bgt.n	8001b5a <main+0x66e>
							&& (posXbullet < posXmonster[i] + 19)
 8001a72:	4a7d      	ldr	r2, [pc, #500]	; (8001c68 <main+0x77c>)
 8001a74:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001a78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a7c:	3312      	adds	r3, #18
 8001a7e:	4a7b      	ldr	r2, [pc, #492]	; (8001c6c <main+0x780>)
 8001a80:	8812      	ldrh	r2, [r2, #0]
 8001a82:	4293      	cmp	r3, r2
 8001a84:	db69      	blt.n	8001b5a <main+0x66e>
							&& bullet == 1) { //check is bullet touch monster
 8001a86:	4b7a      	ldr	r3, [pc, #488]	; (8001c70 <main+0x784>)
 8001a88:	881b      	ldrh	r3, [r3, #0]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d165      	bne.n	8001b5a <main+0x66e>
						bullet = 0;
 8001a8e:	4b78      	ldr	r3, [pc, #480]	; (8001c70 <main+0x784>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	801a      	strh	r2, [r3, #0]
						ILI9341_Draw_ImageEx(posXbullet, posYbullet, 4, 10,
 8001a94:	4b75      	ldr	r3, [pc, #468]	; (8001c6c <main+0x780>)
 8001a96:	8818      	ldrh	r0, [r3, #0]
 8001a98:	4b72      	ldr	r3, [pc, #456]	; (8001c64 <main+0x778>)
 8001a9a:	8819      	ldrh	r1, [r3, #0]
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	9301      	str	r3, [sp, #4]
 8001aa0:	4b74      	ldr	r3, [pc, #464]	; (8001c74 <main+0x788>)
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	230a      	movs	r3, #10
 8001aa6:	2204      	movs	r2, #4
 8001aa8:	f001 ffe0 	bl	8003a6c <ILI9341_Draw_ImageEx>
								blank_40, SCREEN_HORIZONTAL_1); //delete bullet
						monsterAvaliable[i] = 0;
 8001aac:	4a6b      	ldr	r2, [pc, #428]	; (8001c5c <main+0x770>)
 8001aae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						checkbeep = 1;
 8001ab8:	4b6f      	ldr	r3, [pc, #444]	; (8001c78 <main+0x78c>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	801a      	strh	r2, [r3, #0]
						if (monsterType[i] == 2) {
 8001abe:	4a6f      	ldr	r2, [pc, #444]	; (8001c7c <main+0x790>)
 8001ac0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001ac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d106      	bne.n	8001ada <main+0x5ee>
							score += 35;
 8001acc:	4b6c      	ldr	r3, [pc, #432]	; (8001c80 <main+0x794>)
 8001ace:	881b      	ldrh	r3, [r3, #0]
 8001ad0:	3323      	adds	r3, #35	; 0x23
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	4b6a      	ldr	r3, [pc, #424]	; (8001c80 <main+0x794>)
 8001ad6:	801a      	strh	r2, [r3, #0]
 8001ad8:	e005      	b.n	8001ae6 <main+0x5fa>
						} else {
							score += 65;
 8001ada:	4b69      	ldr	r3, [pc, #420]	; (8001c80 <main+0x794>)
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	3341      	adds	r3, #65	; 0x41
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	4b67      	ldr	r3, [pc, #412]	; (8001c80 <main+0x794>)
 8001ae4:	801a      	strh	r2, [r3, #0]
						}
						sprintf(str, "%.4d", score);
 8001ae6:	4b66      	ldr	r3, [pc, #408]	; (8001c80 <main+0x794>)
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	461a      	mov	r2, r3
 8001aec:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001af0:	4964      	ldr	r1, [pc, #400]	; (8001c84 <main+0x798>)
 8001af2:	4618      	mov	r0, r3
 8001af4:	f007 fa70 	bl	8008fd8 <siprintf>
						ILI9341_Draw_Text(str, 0, 15, WHITE, 2, 0x0000);
 8001af8:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8001afc:	2300      	movs	r3, #0
 8001afe:	9301      	str	r3, [sp, #4]
 8001b00:	2302      	movs	r3, #2
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b08:	220f      	movs	r2, #15
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	f001 ff7e 	bl	8003a0c <ILI9341_Draw_Text>

						if (monsterAvaliable[0] == 0 && monsterAvaliable[1] == 0
 8001b10:	4b52      	ldr	r3, [pc, #328]	; (8001c5c <main+0x770>)
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d120      	bne.n	8001b5a <main+0x66e>
 8001b18:	4b50      	ldr	r3, [pc, #320]	; (8001c5c <main+0x770>)
 8001b1a:	885b      	ldrh	r3, [r3, #2]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d11c      	bne.n	8001b5a <main+0x66e>
								&& monsterAvaliable[2] == 0
 8001b20:	4b4e      	ldr	r3, [pc, #312]	; (8001c5c <main+0x770>)
 8001b22:	889b      	ldrh	r3, [r3, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d118      	bne.n	8001b5a <main+0x66e>
								&& monsterAvaliable[3] == 0
 8001b28:	4b4c      	ldr	r3, [pc, #304]	; (8001c5c <main+0x770>)
 8001b2a:	88db      	ldrh	r3, [r3, #6]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d114      	bne.n	8001b5a <main+0x66e>
								&& monsterAvaliable[4] == 0
 8001b30:	4b4a      	ldr	r3, [pc, #296]	; (8001c5c <main+0x770>)
 8001b32:	891b      	ldrh	r3, [r3, #8]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d110      	bne.n	8001b5a <main+0x66e>
								&& monsterAvaliable[5] == 0
 8001b38:	4b48      	ldr	r3, [pc, #288]	; (8001c5c <main+0x770>)
 8001b3a:	895b      	ldrh	r3, [r3, #10]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d10c      	bne.n	8001b5a <main+0x66e>
								&& monsterAvaliable[6] == 0) { //check is all monster die
 8001b40:	4b46      	ldr	r3, [pc, #280]	; (8001c5c <main+0x770>)
 8001b42:	899b      	ldrh	r3, [r3, #12]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d108      	bne.n	8001b5a <main+0x66e>
							wave++;
 8001b48:	4b4f      	ldr	r3, [pc, #316]	; (8001c88 <main+0x79c>)
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	4b4d      	ldr	r3, [pc, #308]	; (8001c88 <main+0x79c>)
 8001b52:	801a      	strh	r2, [r3, #0]
							wavestate = 1;
 8001b54:	4b4d      	ldr	r3, [pc, #308]	; (8001c8c <main+0x7a0>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	801a      	strh	r2, [r3, #0]
						}
					}

					if (isOverlap(posXspace, posYspace, posXmonster[i],
 8001b5a:	4b4d      	ldr	r3, [pc, #308]	; (8001c90 <main+0x7a4>)
 8001b5c:	8818      	ldrh	r0, [r3, #0]
 8001b5e:	4b4d      	ldr	r3, [pc, #308]	; (8001c94 <main+0x7a8>)
 8001b60:	8819      	ldrh	r1, [r3, #0]
 8001b62:	4a41      	ldr	r2, [pc, #260]	; (8001c68 <main+0x77c>)
 8001b64:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001b68:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001b6c:	4c3c      	ldr	r4, [pc, #240]	; (8001c60 <main+0x774>)
 8001b6e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001b72:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8001b76:	f7ff faa9 	bl	80010cc <isOverlap>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00b      	beq.n	8001b98 <main+0x6ac>
							posYmonster[i])) { //check is spaceship touch monster
						ILI9341_Draw_Rectangle(0, 50, 320, 100, 0x0000);
 8001b80:	2300      	movs	r3, #0
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	2364      	movs	r3, #100	; 0x64
 8001b86:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001b8a:	2132      	movs	r1, #50	; 0x32
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	f002 fba9 	bl	80042e4 <ILI9341_Draw_Rectangle>
						stage = 4;
 8001b92:	4b41      	ldr	r3, [pc, #260]	; (8001c98 <main+0x7ac>)
 8001b94:	2204      	movs	r2, #4
 8001b96:	801a      	strh	r2, [r3, #0]
					}

					if (monsterType[i] == 2) {
 8001b98:	4a38      	ldr	r2, [pc, #224]	; (8001c7c <main+0x790>)
 8001b9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001b9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d112      	bne.n	8001bcc <main+0x6e0>
						ILI9341_Draw_ImageEx(posXmonster[i], posYmonster[i], 20,
 8001ba6:	4a30      	ldr	r2, [pc, #192]	; (8001c68 <main+0x77c>)
 8001ba8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001bac:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8001bb0:	4a2b      	ldr	r2, [pc, #172]	; (8001c60 <main+0x774>)
 8001bb2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001bb6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001bba:	2301      	movs	r3, #1
 8001bbc:	9301      	str	r3, [sp, #4]
 8001bbe:	4b37      	ldr	r3, [pc, #220]	; (8001c9c <main+0x7b0>)
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	2314      	movs	r3, #20
 8001bc4:	2214      	movs	r2, #20
 8001bc6:	f001 ff51 	bl	8003a6c <ILI9341_Draw_ImageEx>
 8001bca:	e085      	b.n	8001cd8 <main+0x7ec>
								20, monster_2, SCREEN_HORIZONTAL_1); //draw monster 1
					} else { //monstertype == 1
						ILI9341_Draw_ImageEx(posXmonster[i], posYmonster[i], 20,
 8001bcc:	4a26      	ldr	r2, [pc, #152]	; (8001c68 <main+0x77c>)
 8001bce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001bd2:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8001bd6:	4a22      	ldr	r2, [pc, #136]	; (8001c60 <main+0x774>)
 8001bd8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001bdc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001be0:	2301      	movs	r3, #1
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	4b2e      	ldr	r3, [pc, #184]	; (8001ca0 <main+0x7b4>)
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	2314      	movs	r3, #20
 8001bea:	2214      	movs	r2, #20
 8001bec:	f001 ff3e 	bl	8003a6c <ILI9341_Draw_ImageEx>
								20, monster_1, SCREEN_HORIZONTAL_1); //draw monster 2
						if (rand() % 50 == 0 && monsterBullet[i] == 0) {
 8001bf0:	f007 f9b4 	bl	8008f5c <rand>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	4b2b      	ldr	r3, [pc, #172]	; (8001ca4 <main+0x7b8>)
 8001bf8:	fb83 1302 	smull	r1, r3, r3, r2
 8001bfc:	1119      	asrs	r1, r3, #4
 8001bfe:	17d3      	asrs	r3, r2, #31
 8001c00:	1acb      	subs	r3, r1, r3
 8001c02:	2132      	movs	r1, #50	; 0x32
 8001c04:	fb01 f303 	mul.w	r3, r1, r3
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d164      	bne.n	8001cd8 <main+0x7ec>
 8001c0e:	4a26      	ldr	r2, [pc, #152]	; (8001ca8 <main+0x7bc>)
 8001c10:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001c14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d15d      	bne.n	8001cd8 <main+0x7ec>
							posXmonsterBullet[i] = posXmonster[i] + 8;
 8001c1c:	4a12      	ldr	r2, [pc, #72]	; (8001c68 <main+0x77c>)
 8001c1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001c22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c26:	3308      	adds	r3, #8
 8001c28:	b299      	uxth	r1, r3
 8001c2a:	4a20      	ldr	r2, [pc, #128]	; (8001cac <main+0x7c0>)
 8001c2c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001c30:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
							posYmonsterBullet[i] = posYmonster[i] + 19;
 8001c34:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <main+0x774>)
 8001c36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001c3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c3e:	3313      	adds	r3, #19
 8001c40:	b299      	uxth	r1, r3
 8001c42:	4a1b      	ldr	r2, [pc, #108]	; (8001cb0 <main+0x7c4>)
 8001c44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001c48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
							monsterBullet[i] = 1;
 8001c4c:	4a16      	ldr	r2, [pc, #88]	; (8001ca8 <main+0x7bc>)
 8001c4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001c52:	2101      	movs	r1, #1
 8001c54:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001c58:	e03e      	b.n	8001cd8 <main+0x7ec>
 8001c5a:	bf00      	nop
 8001c5c:	200002b4 	.word	0x200002b4
 8001c60:	20000010 	.word	0x20000010
 8001c64:	200002ac 	.word	0x200002ac
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	200002aa 	.word	0x200002aa
 8001c70:	200002ae 	.word	0x200002ae
 8001c74:	0800b4c0 	.word	0x0800b4c0
 8001c78:	200002b0 	.word	0x200002b0
 8001c7c:	200002c4 	.word	0x200002c4
 8001c80:	20000308 	.word	0x20000308
 8001c84:	0800b480 	.word	0x0800b480
 8001c88:	20000304 	.word	0x20000304
 8001c8c:	20000306 	.word	0x20000306
 8001c90:	200002a6 	.word	0x200002a6
 8001c94:	200002a8 	.word	0x200002a8
 8001c98:	200002a4 	.word	0x200002a4
 8001c9c:	0800bba0 	.word	0x0800bba0
 8001ca0:	0800b880 	.word	0x0800b880
 8001ca4:	51eb851f 	.word	0x51eb851f
 8001ca8:	200002d4 	.word	0x200002d4
 8001cac:	200002e4 	.word	0x200002e4
 8001cb0:	200002f4 	.word	0x200002f4
						}
					}

				} else {
					ILI9341_Draw_ImageEx(posXmonster[i], posYmonster[i], 20, 20,
 8001cb4:	4a89      	ldr	r2, [pc, #548]	; (8001edc <main+0x9f0>)
 8001cb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001cba:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8001cbe:	4a88      	ldr	r2, [pc, #544]	; (8001ee0 <main+0x9f4>)
 8001cc0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001cc4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001cc8:	2301      	movs	r3, #1
 8001cca:	9301      	str	r3, [sp, #4]
 8001ccc:	4b85      	ldr	r3, [pc, #532]	; (8001ee4 <main+0x9f8>)
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	2314      	movs	r3, #20
 8001cd2:	2214      	movs	r2, #20
 8001cd4:	f001 feca 	bl	8003a6c <ILI9341_Draw_ImageEx>
							blank_400, SCREEN_HORIZONTAL_1); //delete monster
				}

				monsterBullet[i] = moveMonsterBullet(monsterBullet[i], i);
 8001cd8:	4a83      	ldr	r2, [pc, #524]	; (8001ee8 <main+0x9fc>)
 8001cda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001cde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ce2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8001ce6:	b292      	uxth	r2, r2
 8001ce8:	4611      	mov	r1, r2
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff faf6 	bl	80012dc <moveMonsterBullet>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4a7c      	ldr	r2, [pc, #496]	; (8001ee8 <main+0x9fc>)
 8001cf6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001cfa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if (monsterBullet[i] && posXmonsterBullet[i] >= posXspace - 4
 8001cfe:	4a7a      	ldr	r2, [pc, #488]	; (8001ee8 <main+0x9fc>)
 8001d00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001d04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d037      	beq.n	8001d7c <main+0x890>
 8001d0c:	4a77      	ldr	r2, [pc, #476]	; (8001eec <main+0xa00>)
 8001d0e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001d12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d16:	461a      	mov	r2, r3
 8001d18:	4b75      	ldr	r3, [pc, #468]	; (8001ef0 <main+0xa04>)
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	3b04      	subs	r3, #4
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	db2c      	blt.n	8001d7c <main+0x890>
						&& posXmonsterBullet[i] <= posXspace + 19
 8001d22:	4a72      	ldr	r2, [pc, #456]	; (8001eec <main+0xa00>)
 8001d24:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001d28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b70      	ldr	r3, [pc, #448]	; (8001ef0 <main+0xa04>)
 8001d30:	881b      	ldrh	r3, [r3, #0]
 8001d32:	3313      	adds	r3, #19
 8001d34:	429a      	cmp	r2, r3
 8001d36:	dc21      	bgt.n	8001d7c <main+0x890>
						&& posYmonsterBullet[i] >= posYspace - 10
 8001d38:	4a6e      	ldr	r2, [pc, #440]	; (8001ef4 <main+0xa08>)
 8001d3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001d3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d42:	461a      	mov	r2, r3
 8001d44:	4b6c      	ldr	r3, [pc, #432]	; (8001ef8 <main+0xa0c>)
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	3b0a      	subs	r3, #10
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	db16      	blt.n	8001d7c <main+0x890>
						&& posYmonsterBullet[i] <= posYspace + 10) { //check is monsterBullet touch spaceship
 8001d4e:	4a69      	ldr	r2, [pc, #420]	; (8001ef4 <main+0xa08>)
 8001d50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001d54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4b67      	ldr	r3, [pc, #412]	; (8001ef8 <main+0xa0c>)
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	330a      	adds	r3, #10
 8001d60:	429a      	cmp	r2, r3
 8001d62:	dc0b      	bgt.n	8001d7c <main+0x890>
					ILI9341_Draw_Rectangle(0, 50, 320, 100, 0x0000);
 8001d64:	2300      	movs	r3, #0
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	2364      	movs	r3, #100	; 0x64
 8001d6a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d6e:	2132      	movs	r1, #50	; 0x32
 8001d70:	2000      	movs	r0, #0
 8001d72:	f002 fab7 	bl	80042e4 <ILI9341_Draw_Rectangle>
					stage = 4;
 8001d76:	4b61      	ldr	r3, [pc, #388]	; (8001efc <main+0xa10>)
 8001d78:	2204      	movs	r2, #4
 8001d7a:	801a      	strh	r2, [r3, #0]
				}
				ILI9341_Draw_ImageEx(posXspace, posYspace, 20, 20, spaceship,
 8001d7c:	4b5c      	ldr	r3, [pc, #368]	; (8001ef0 <main+0xa04>)
 8001d7e:	8818      	ldrh	r0, [r3, #0]
 8001d80:	4b5d      	ldr	r3, [pc, #372]	; (8001ef8 <main+0xa0c>)
 8001d82:	8819      	ldrh	r1, [r3, #0]
 8001d84:	2301      	movs	r3, #1
 8001d86:	9301      	str	r3, [sp, #4]
 8001d88:	4b5d      	ldr	r3, [pc, #372]	; (8001f00 <main+0xa14>)
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	2314      	movs	r3, #20
 8001d8e:	2214      	movs	r2, #20
 8001d90:	f001 fe6c 	bl	8003a6c <ILI9341_Draw_ImageEx>
				SCREEN_HORIZONTAL_1); // draw spaceship

				if (direction) {
 8001d94:	4b5b      	ldr	r3, [pc, #364]	; (8001f04 <main+0xa18>)
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d01d      	beq.n	8001dd8 <main+0x8ec>
					if (i < 3) {
 8001d9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	dc0c      	bgt.n	8001dbe <main+0x8d2>
						//move right
						posXmonster[i] += 1;
 8001da4:	4a4d      	ldr	r2, [pc, #308]	; (8001edc <main+0x9f0>)
 8001da6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001daa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001dae:	3301      	adds	r3, #1
 8001db0:	b299      	uxth	r1, r3
 8001db2:	4a4a      	ldr	r2, [pc, #296]	; (8001edc <main+0x9f0>)
 8001db4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001db8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001dbc:	e029      	b.n	8001e12 <main+0x926>
					} else {
						//move left
						posXmonster[i] -= 1;
 8001dbe:	4a47      	ldr	r2, [pc, #284]	; (8001edc <main+0x9f0>)
 8001dc0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001dc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b299      	uxth	r1, r3
 8001dcc:	4a43      	ldr	r2, [pc, #268]	; (8001edc <main+0x9f0>)
 8001dce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001dd2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001dd6:	e01c      	b.n	8001e12 <main+0x926>
					}
				} else {
					if (i < 3) {
 8001dd8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	dc0c      	bgt.n	8001dfa <main+0x90e>
						//move left
						posXmonster[i] -= 1;
 8001de0:	4a3e      	ldr	r2, [pc, #248]	; (8001edc <main+0x9f0>)
 8001de2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001de6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	b299      	uxth	r1, r3
 8001dee:	4a3b      	ldr	r2, [pc, #236]	; (8001edc <main+0x9f0>)
 8001df0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001df4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001df8:	e00b      	b.n	8001e12 <main+0x926>
					} else {
						//move right
						posXmonster[i] += 1;
 8001dfa:	4a38      	ldr	r2, [pc, #224]	; (8001edc <main+0x9f0>)
 8001dfc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001e00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e04:	3301      	adds	r3, #1
 8001e06:	b299      	uxth	r1, r3
 8001e08:	4a34      	ldr	r2, [pc, #208]	; (8001edc <main+0x9f0>)
 8001e0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001e0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int i = 0; i < 7; i++) { //everything about monster
 8001e12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001e16:	3301      	adds	r3, #1
 8001e18:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001e1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001e20:	2b06      	cmp	r3, #6
 8001e22:	f77f adff 	ble.w	8001a24 <main+0x538>
					}
				}

			}

			if (posXmonster[0] == 70) {
 8001e26:	4b2d      	ldr	r3, [pc, #180]	; (8001edc <main+0x9f0>)
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	2b46      	cmp	r3, #70	; 0x46
 8001e2c:	d103      	bne.n	8001e36 <main+0x94a>
				direction = 0; // move left
 8001e2e:	4b35      	ldr	r3, [pc, #212]	; (8001f04 <main+0xa18>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	801a      	strh	r2, [r3, #0]
 8001e34:	e006      	b.n	8001e44 <main+0x958>
			} else if (posXmonster[0] == 30) {
 8001e36:	4b29      	ldr	r3, [pc, #164]	; (8001edc <main+0x9f0>)
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	2b1e      	cmp	r3, #30
 8001e3c:	d102      	bne.n	8001e44 <main+0x958>
				direction = 1; // move right
 8001e3e:	4b31      	ldr	r3, [pc, #196]	; (8001f04 <main+0xa18>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	801a      	strh	r2, [r3, #0]
			}

			if (checkbeep) { //checkbeep
 8001e44:	4b30      	ldr	r3, [pc, #192]	; (8001f08 <main+0xa1c>)
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d009      	beq.n	8001e60 <main+0x974>
				HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e52:	482e      	ldr	r0, [pc, #184]	; (8001f0c <main+0xa20>)
 8001e54:	f002 fe02 	bl	8004a5c <HAL_GPIO_WritePin>
				checkbeep = 0;
 8001e58:	4b2b      	ldr	r3, [pc, #172]	; (8001f08 <main+0xa1c>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	801a      	strh	r2, [r3, #0]
 8001e5e:	e005      	b.n	8001e6c <main+0x980>
			} else {
				HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8001e60:	2200      	movs	r2, #0
 8001e62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e66:	4829      	ldr	r0, [pc, #164]	; (8001f0c <main+0xa20>)
 8001e68:	f002 fdf8 	bl	8004a5c <HAL_GPIO_WritePin>
			}

			if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_5) == GPIO_PIN_RESET
 8001e6c:	2120      	movs	r1, #32
 8001e6e:	4828      	ldr	r0, [pc, #160]	; (8001f10 <main+0xa24>)
 8001e70:	f002 fddc 	bl	8004a2c <HAL_GPIO_ReadPin>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d116      	bne.n	8001ea8 <main+0x9bc>
					&& HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_2) == GPIO_PIN_RESET
 8001e7a:	2104      	movs	r1, #4
 8001e7c:	4824      	ldr	r0, [pc, #144]	; (8001f10 <main+0xa24>)
 8001e7e:	f002 fdd5 	bl	8004a2c <HAL_GPIO_ReadPin>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d10f      	bne.n	8001ea8 <main+0x9bc>
					&& cheatButtonState == 0) { //cheat
 8001e88:	4b22      	ldr	r3, [pc, #136]	; (8001f14 <main+0xa28>)
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10b      	bne.n	8001ea8 <main+0x9bc>
				wave++;
 8001e90:	4b21      	ldr	r3, [pc, #132]	; (8001f18 <main+0xa2c>)
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	3301      	adds	r3, #1
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	4b1f      	ldr	r3, [pc, #124]	; (8001f18 <main+0xa2c>)
 8001e9a:	801a      	strh	r2, [r3, #0]
				wavestate = 1;
 8001e9c:	4b1f      	ldr	r3, [pc, #124]	; (8001f1c <main+0xa30>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	801a      	strh	r2, [r3, #0]
				cheatButtonState = 1;
 8001ea2:	4b1c      	ldr	r3, [pc, #112]	; (8001f14 <main+0xa28>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	801a      	strh	r2, [r3, #0]
			}
			if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_5) == GPIO_PIN_SET
 8001ea8:	2120      	movs	r1, #32
 8001eaa:	4819      	ldr	r0, [pc, #100]	; (8001f10 <main+0xa24>)
 8001eac:	f002 fdbe 	bl	8004a2c <HAL_GPIO_ReadPin>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	f040 82ca 	bne.w	800244c <main+0xf60>
					&& HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_2) == GPIO_PIN_SET
 8001eb8:	2104      	movs	r1, #4
 8001eba:	4815      	ldr	r0, [pc, #84]	; (8001f10 <main+0xa24>)
 8001ebc:	f002 fdb6 	bl	8004a2c <HAL_GPIO_ReadPin>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	f040 82c2 	bne.w	800244c <main+0xf60>
					&& cheatButtonState == 1) {
 8001ec8:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <main+0xa28>)
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	f040 82bd 	bne.w	800244c <main+0xf60>
				cheatButtonState = 0;
 8001ed2:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <main+0xa28>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	801a      	strh	r2, [r3, #0]
 8001ed8:	e2b8      	b.n	800244c <main+0xf60>
 8001eda:	bf00      	nop
 8001edc:	20000000 	.word	0x20000000
 8001ee0:	20000010 	.word	0x20000010
 8001ee4:	0800b510 	.word	0x0800b510
 8001ee8:	200002d4 	.word	0x200002d4
 8001eec:	200002e4 	.word	0x200002e4
 8001ef0:	200002a6 	.word	0x200002a6
 8001ef4:	200002f4 	.word	0x200002f4
 8001ef8:	200002a8 	.word	0x200002a8
 8001efc:	200002a4 	.word	0x200002a4
 8001f00:	0800bec0 	.word	0x0800bec0
 8001f04:	20000302 	.word	0x20000302
 8001f08:	200002b0 	.word	0x200002b0
 8001f0c:	40021800 	.word	0x40021800
 8001f10:	40021400 	.word	0x40021400
 8001f14:	2000030e 	.word	0x2000030e
 8001f18:	20000304 	.word	0x20000304
 8001f1c:	20000306 	.word	0x20000306
			}
		} else
		//----------------------------------------------------------pause
		if (stage == 2) {
 8001f20:	4ba4      	ldr	r3, [pc, #656]	; (80021b4 <main+0xcc8>)
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	f040 8119 	bne.w	800215c <main+0xc70>
			int select; //0 = resume, 1 = restart , 2 = menu
			int buttonState;
			if (pause == 0) {
 8001f2a:	4ba3      	ldr	r3, [pc, #652]	; (80021b8 <main+0xccc>)
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d137      	bne.n	8001fa2 <main+0xab6>
				ILI9341_Fill_Screen(0x0000);
 8001f32:	2000      	movs	r0, #0
 8001f34:	f002 f8d6 	bl	80040e4 <ILI9341_Fill_Screen>
				ILI9341_Draw_Text("PAUSE", 85, 40, WHITE, 5, 0x0000);
 8001f38:	2300      	movs	r3, #0
 8001f3a:	9301      	str	r3, [sp, #4]
 8001f3c:	2305      	movs	r3, #5
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f44:	2228      	movs	r2, #40	; 0x28
 8001f46:	2155      	movs	r1, #85	; 0x55
 8001f48:	489c      	ldr	r0, [pc, #624]	; (80021bc <main+0xcd0>)
 8001f4a:	f001 fd5f 	bl	8003a0c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("resume", 105, 100, YELLOW, 3, BLACK);
 8001f4e:	2300      	movs	r3, #0
 8001f50:	9301      	str	r3, [sp, #4]
 8001f52:	2303      	movs	r3, #3
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f5a:	2264      	movs	r2, #100	; 0x64
 8001f5c:	2169      	movs	r1, #105	; 0x69
 8001f5e:	4898      	ldr	r0, [pc, #608]	; (80021c0 <main+0xcd4>)
 8001f60:	f001 fd54 	bl	8003a0c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("restart", 95, 130, WHITE, 3, BLACK);
 8001f64:	2300      	movs	r3, #0
 8001f66:	9301      	str	r3, [sp, #4]
 8001f68:	2303      	movs	r3, #3
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f70:	2282      	movs	r2, #130	; 0x82
 8001f72:	215f      	movs	r1, #95	; 0x5f
 8001f74:	4893      	ldr	r0, [pc, #588]	; (80021c4 <main+0xcd8>)
 8001f76:	f001 fd49 	bl	8003a0c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("menu", 120, 160, WHITE, 3, BLACK);
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	9301      	str	r3, [sp, #4]
 8001f7e:	2303      	movs	r3, #3
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f86:	22a0      	movs	r2, #160	; 0xa0
 8001f88:	2178      	movs	r1, #120	; 0x78
 8001f8a:	488f      	ldr	r0, [pc, #572]	; (80021c8 <main+0xcdc>)
 8001f8c:	f001 fd3e 	bl	8003a0c <ILI9341_Draw_Text>
				pause = 1;
 8001f90:	4b89      	ldr	r3, [pc, #548]	; (80021b8 <main+0xccc>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	801a      	strh	r2, [r3, #0]
				select = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
				buttonState = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
			}
			if (buttonState == 0
 8001fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f040 809d 	bne.w	80020e6 <main+0xbfa>
					&& (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == GPIO_PIN_RESET
 8001fac:	2108      	movs	r1, #8
 8001fae:	4887      	ldr	r0, [pc, #540]	; (80021cc <main+0xce0>)
 8001fb0:	f002 fd3c 	bl	8004a2c <HAL_GPIO_ReadPin>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d007      	beq.n	8001fca <main+0xade>
							|| HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_3)
 8001fba:	2108      	movs	r1, #8
 8001fbc:	4884      	ldr	r0, [pc, #528]	; (80021d0 <main+0xce4>)
 8001fbe:	f002 fd35 	bl	8004a2c <HAL_GPIO_ReadPin>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f040 808e 	bne.w	80020e6 <main+0xbfa>
									== GPIO_PIN_RESET)) {
				buttonState = 1;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
				if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == GPIO_PIN_RESET) {
 8001fd0:	2108      	movs	r1, #8
 8001fd2:	487e      	ldr	r0, [pc, #504]	; (80021cc <main+0xce0>)
 8001fd4:	f002 fd2a 	bl	8004a2c <HAL_GPIO_ReadPin>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d109      	bne.n	8001ff2 <main+0xb06>
					if (select != 0) {
 8001fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00e      	beq.n	8002004 <main+0xb18>
						select--;
 8001fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fea:	3b01      	subs	r3, #1
 8001fec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001ff0:	e008      	b.n	8002004 <main+0xb18>
					}
				} else {
					if (select != 2) {
 8001ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d004      	beq.n	8002004 <main+0xb18>
						select++;
 8001ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ffe:	3301      	adds	r3, #1
 8002000:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
					}
				}

				if (select == 0) {
 8002004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002008:	2b00      	cmp	r3, #0
 800200a:	d121      	bne.n	8002050 <main+0xb64>
					ILI9341_Draw_Text("resume", 105, 100, YELLOW, 3, BLACK);
 800200c:	2300      	movs	r3, #0
 800200e:	9301      	str	r3, [sp, #4]
 8002010:	2303      	movs	r3, #3
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002018:	2264      	movs	r2, #100	; 0x64
 800201a:	2169      	movs	r1, #105	; 0x69
 800201c:	4868      	ldr	r0, [pc, #416]	; (80021c0 <main+0xcd4>)
 800201e:	f001 fcf5 	bl	8003a0c <ILI9341_Draw_Text>
					ILI9341_Draw_Text("restart", 95, 130, WHITE, 3, BLACK);
 8002022:	2300      	movs	r3, #0
 8002024:	9301      	str	r3, [sp, #4]
 8002026:	2303      	movs	r3, #3
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800202e:	2282      	movs	r2, #130	; 0x82
 8002030:	215f      	movs	r1, #95	; 0x5f
 8002032:	4864      	ldr	r0, [pc, #400]	; (80021c4 <main+0xcd8>)
 8002034:	f001 fcea 	bl	8003a0c <ILI9341_Draw_Text>
					ILI9341_Draw_Text("menu", 120, 160, WHITE, 3, BLACK);
 8002038:	2300      	movs	r3, #0
 800203a:	9301      	str	r3, [sp, #4]
 800203c:	2303      	movs	r3, #3
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002044:	22a0      	movs	r2, #160	; 0xa0
 8002046:	2178      	movs	r1, #120	; 0x78
 8002048:	485f      	ldr	r0, [pc, #380]	; (80021c8 <main+0xcdc>)
 800204a:	f001 fcdf 	bl	8003a0c <ILI9341_Draw_Text>
 800204e:	e04a      	b.n	80020e6 <main+0xbfa>
				} else if (select == 1) {
 8002050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002054:	2b01      	cmp	r3, #1
 8002056:	d121      	bne.n	800209c <main+0xbb0>
					ILI9341_Draw_Text("resume", 105, 100, WHITE, 3, BLACK);
 8002058:	2300      	movs	r3, #0
 800205a:	9301      	str	r3, [sp, #4]
 800205c:	2303      	movs	r3, #3
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002064:	2264      	movs	r2, #100	; 0x64
 8002066:	2169      	movs	r1, #105	; 0x69
 8002068:	4855      	ldr	r0, [pc, #340]	; (80021c0 <main+0xcd4>)
 800206a:	f001 fccf 	bl	8003a0c <ILI9341_Draw_Text>
					ILI9341_Draw_Text("restart", 95, 130, YELLOW, 3, BLACK);
 800206e:	2300      	movs	r3, #0
 8002070:	9301      	str	r3, [sp, #4]
 8002072:	2303      	movs	r3, #3
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800207a:	2282      	movs	r2, #130	; 0x82
 800207c:	215f      	movs	r1, #95	; 0x5f
 800207e:	4851      	ldr	r0, [pc, #324]	; (80021c4 <main+0xcd8>)
 8002080:	f001 fcc4 	bl	8003a0c <ILI9341_Draw_Text>
					ILI9341_Draw_Text("menu", 120, 160, WHITE, 3, BLACK);
 8002084:	2300      	movs	r3, #0
 8002086:	9301      	str	r3, [sp, #4]
 8002088:	2303      	movs	r3, #3
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002090:	22a0      	movs	r2, #160	; 0xa0
 8002092:	2178      	movs	r1, #120	; 0x78
 8002094:	484c      	ldr	r0, [pc, #304]	; (80021c8 <main+0xcdc>)
 8002096:	f001 fcb9 	bl	8003a0c <ILI9341_Draw_Text>
 800209a:	e024      	b.n	80020e6 <main+0xbfa>
				} else if (select == 2) {
 800209c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d120      	bne.n	80020e6 <main+0xbfa>
					ILI9341_Draw_Text("resume", 105, 100, WHITE, 3, BLACK);
 80020a4:	2300      	movs	r3, #0
 80020a6:	9301      	str	r3, [sp, #4]
 80020a8:	2303      	movs	r3, #3
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020b0:	2264      	movs	r2, #100	; 0x64
 80020b2:	2169      	movs	r1, #105	; 0x69
 80020b4:	4842      	ldr	r0, [pc, #264]	; (80021c0 <main+0xcd4>)
 80020b6:	f001 fca9 	bl	8003a0c <ILI9341_Draw_Text>
					ILI9341_Draw_Text("restart", 95, 130, WHITE, 3, BLACK);
 80020ba:	2300      	movs	r3, #0
 80020bc:	9301      	str	r3, [sp, #4]
 80020be:	2303      	movs	r3, #3
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020c6:	2282      	movs	r2, #130	; 0x82
 80020c8:	215f      	movs	r1, #95	; 0x5f
 80020ca:	483e      	ldr	r0, [pc, #248]	; (80021c4 <main+0xcd8>)
 80020cc:	f001 fc9e 	bl	8003a0c <ILI9341_Draw_Text>
					ILI9341_Draw_Text("menu", 120, 160, YELLOW, 3, BLACK);
 80020d0:	2300      	movs	r3, #0
 80020d2:	9301      	str	r3, [sp, #4]
 80020d4:	2303      	movs	r3, #3
 80020d6:	9300      	str	r3, [sp, #0]
 80020d8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80020dc:	22a0      	movs	r2, #160	; 0xa0
 80020de:	2178      	movs	r1, #120	; 0x78
 80020e0:	4839      	ldr	r0, [pc, #228]	; (80021c8 <main+0xcdc>)
 80020e2:	f001 fc93 	bl	8003a0c <ILI9341_Draw_Text>
				}
			}
			if (buttonState == 1
 80020e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d110      	bne.n	8002110 <main+0xc24>
					&& HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == GPIO_PIN_SET
 80020ee:	2108      	movs	r1, #8
 80020f0:	4836      	ldr	r0, [pc, #216]	; (80021cc <main+0xce0>)
 80020f2:	f002 fc9b 	bl	8004a2c <HAL_GPIO_ReadPin>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d109      	bne.n	8002110 <main+0xc24>
					&& HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_3) == GPIO_PIN_SET) {
 80020fc:	2108      	movs	r1, #8
 80020fe:	4834      	ldr	r0, [pc, #208]	; (80021d0 <main+0xce4>)
 8002100:	f002 fc94 	bl	8004a2c <HAL_GPIO_ReadPin>
 8002104:	4603      	mov	r3, r0
 8002106:	2b01      	cmp	r3, #1
 8002108:	d102      	bne.n	8002110 <main+0xc24>
				buttonState = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
			}
			if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_1) == GPIO_PIN_RESET) {
 8002110:	2102      	movs	r1, #2
 8002112:	482f      	ldr	r0, [pc, #188]	; (80021d0 <main+0xce4>)
 8002114:	f002 fc8a 	bl	8004a2c <HAL_GPIO_ReadPin>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	f040 8196 	bne.w	800244c <main+0xf60>
				ILI9341_Fill_Screen(BLACK);
 8002120:	2000      	movs	r0, #0
 8002122:	f001 ffdf 	bl	80040e4 <ILI9341_Fill_Screen>
				if (select == 0) {
 8002126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800212a:	2b00      	cmp	r3, #0
 800212c:	d103      	bne.n	8002136 <main+0xc4a>
					stage = 1;
 800212e:	4b21      	ldr	r3, [pc, #132]	; (80021b4 <main+0xcc8>)
 8002130:	2201      	movs	r2, #1
 8002132:	801a      	strh	r2, [r3, #0]
 8002134:	e18a      	b.n	800244c <main+0xf60>
				} else if (select == 1) {
 8002136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800213a:	2b01      	cmp	r3, #1
 800213c:	d102      	bne.n	8002144 <main+0xc58>
					restart();
 800213e:	f7fe fea1 	bl	8000e84 <restart>
 8002142:	e183      	b.n	800244c <main+0xf60>
				} else if (select == 2) {
 8002144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002148:	2b02      	cmp	r3, #2
 800214a:	f040 817f 	bne.w	800244c <main+0xf60>
					stage = 0;
 800214e:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <main+0xcc8>)
 8002150:	2200      	movs	r2, #0
 8002152:	801a      	strh	r2, [r3, #0]
					initMenu = 1;
 8002154:	4b1f      	ldr	r3, [pc, #124]	; (80021d4 <main+0xce8>)
 8002156:	2201      	movs	r2, #1
 8002158:	801a      	strh	r2, [r3, #0]
 800215a:	e177      	b.n	800244c <main+0xf60>
				}
			}
		} else
		//----------------------------------------------------------win Screen
		if (stage == 3) {
 800215c:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <main+0xcc8>)
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	2b03      	cmp	r3, #3
 8002162:	f040 80c2 	bne.w	80022ea <main+0xdfe>
			gamewin();
 8002166:	f7fe fedd 	bl	8000f24 <gamewin>
			HAL_Delay(4900);
 800216a:	f241 3024 	movw	r0, #4900	; 0x1324
 800216e:	f002 f97b 	bl	8004468 <HAL_Delay>
			ILI9341_Fill_Screen(BLACK);
 8002172:	2000      	movs	r0, #0
 8002174:	f001 ffb6 	bl	80040e4 <ILI9341_Fill_Screen>
			playerLen = EEPROM_Read_NUM(1, 0);
 8002178:	2100      	movs	r1, #0
 800217a:	2001      	movs	r0, #1
 800217c:	f7fe fb1a 	bl	80007b4 <EEPROM_Read_NUM>
 8002180:	eef0 7a40 	vmov.f32	s15, s0
 8002184:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002188:	ee17 2a90 	vmov	r2, s15
 800218c:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <main+0xcec>)
 800218e:	601a      	str	r2, [r3, #0]
			if (playerLen < 5) {
 8002190:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <main+0xcec>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b04      	cmp	r3, #4
 8002196:	dc03      	bgt.n	80021a0 <main+0xcb4>
				stage = 5;
 8002198:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <main+0xcc8>)
 800219a:	2205      	movs	r2, #5
 800219c:	801a      	strh	r2, [r3, #0]
 800219e:	e155      	b.n	800244c <main+0xf60>
			} else if (playerLen == 5) {
 80021a0:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <main+0xcec>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b05      	cmp	r3, #5
 80021a6:	f040 8096 	bne.w	80022d6 <main+0xdea>
				for (int i = 0; i < playerLen; i++) {
 80021aa:	2300      	movs	r3, #0
 80021ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80021b0:	e05f      	b.n	8002272 <main+0xd86>
 80021b2:	bf00      	nop
 80021b4:	200002a4 	.word	0x200002a4
 80021b8:	20000310 	.word	0x20000310
 80021bc:	0800b488 	.word	0x0800b488
 80021c0:	0800b490 	.word	0x0800b490
 80021c4:	0800b498 	.word	0x0800b498
 80021c8:	0800b4a0 	.word	0x0800b4a0
 80021cc:	40020800 	.word	0x40020800
 80021d0:	40021400 	.word	0x40021400
 80021d4:	2000001e 	.word	0x2000001e
 80021d8:	20000314 	.word	0x20000314
					int indexshow = (i * 4) + 2;
 80021dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	3302      	adds	r3, #2
 80021e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
					playerNumberSort[i][0] = EEPROM_Read_NUM(indexshow + 2, 0);
 80021e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	3302      	adds	r3, #2
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	2100      	movs	r1, #0
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7fe fadd 	bl	80007b4 <EEPROM_Read_NUM>
 80021fa:	eef0 7a40 	vmov.f32	s15, s0
 80021fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002202:	ee17 0a90 	vmov	r0, s15
 8002206:	49a3      	ldr	r1, [pc, #652]	; (8002494 <main+0xfa8>)
 8002208:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800220c:	4613      	mov	r3, r2
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	4413      	add	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	6018      	str	r0, [r3, #0]
					playerNumberSort[i][1] = EEPROM_Read_NUM(indexshow + 3, 0);
 8002218:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800221c:	b29b      	uxth	r3, r3
 800221e:	3303      	adds	r3, #3
 8002220:	b29b      	uxth	r3, r3
 8002222:	2100      	movs	r1, #0
 8002224:	4618      	mov	r0, r3
 8002226:	f7fe fac5 	bl	80007b4 <EEPROM_Read_NUM>
 800222a:	eef0 7a40 	vmov.f32	s15, s0
 800222e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002232:	ee17 0a90 	vmov	r0, s15
 8002236:	4997      	ldr	r1, [pc, #604]	; (8002494 <main+0xfa8>)
 8002238:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800223c:	4613      	mov	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4413      	add	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	3304      	adds	r3, #4
 8002248:	6018      	str	r0, [r3, #0]
					playerNumberSort[i][2] = indexdefault[i];
 800224a:	4a93      	ldr	r2, [pc, #588]	; (8002498 <main+0xfac>)
 800224c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002250:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002254:	488f      	ldr	r0, [pc, #572]	; (8002494 <main+0xfa8>)
 8002256:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800225a:	4613      	mov	r3, r2
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	4413      	add	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4403      	add	r3, r0
 8002264:	3308      	adds	r3, #8
 8002266:	6019      	str	r1, [r3, #0]
				for (int i = 0; i < playerLen; i++) {
 8002268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800226c:	3301      	adds	r3, #1
 800226e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002272:	4b8a      	ldr	r3, [pc, #552]	; (800249c <main+0xfb0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800227a:	429a      	cmp	r2, r3
 800227c:	dbae      	blt.n	80021dc <main+0xcf0>
				}

				qsort((const int*) &playerNumberSort, playerLen,
 800227e:	4b87      	ldr	r3, [pc, #540]	; (800249c <main+0xfb0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4619      	mov	r1, r3
 8002284:	2303      	movs	r3, #3
 8002286:	009a      	lsls	r2, r3, #2
 8002288:	4b85      	ldr	r3, [pc, #532]	; (80024a0 <main+0xfb4>)
 800228a:	4882      	ldr	r0, [pc, #520]	; (8002494 <main+0xfa8>)
 800228c:	f006 fd16 	bl	8008cbc <qsort>
						sizeof(int[NUM_COLS]), CompareArrays);

				if (score > playerNumberSort[4][0]
 8002290:	4b84      	ldr	r3, [pc, #528]	; (80024a4 <main+0xfb8>)
 8002292:	881b      	ldrh	r3, [r3, #0]
 8002294:	461a      	mov	r2, r3
 8002296:	4b7f      	ldr	r3, [pc, #508]	; (8002494 <main+0xfa8>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	429a      	cmp	r2, r3
 800229c:	dc0d      	bgt.n	80022ba <main+0xdce>
						|| (second < playerNumberSort[4][1]
 800229e:	4b82      	ldr	r3, [pc, #520]	; (80024a8 <main+0xfbc>)
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	4b7b      	ldr	r3, [pc, #492]	; (8002494 <main+0xfa8>)
 80022a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a8:	429a      	cmp	r2, r3
 80022aa:	da0a      	bge.n	80022c2 <main+0xdd6>
								&& score == playerNumberSort[4][0])) {
 80022ac:	4b7d      	ldr	r3, [pc, #500]	; (80024a4 <main+0xfb8>)
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
 80022b2:	4b78      	ldr	r3, [pc, #480]	; (8002494 <main+0xfa8>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d103      	bne.n	80022c2 <main+0xdd6>
					stage = 5;
 80022ba:	4b7c      	ldr	r3, [pc, #496]	; (80024ac <main+0xfc0>)
 80022bc:	2205      	movs	r2, #5
 80022be:	801a      	strh	r2, [r3, #0]
 80022c0:	e0c4      	b.n	800244c <main+0xf60>
				} else {
					ILI9341_Fill_Screen(BLACK);
 80022c2:	2000      	movs	r0, #0
 80022c4:	f001 ff0e 	bl	80040e4 <ILI9341_Fill_Screen>
					stage = 0;
 80022c8:	4b78      	ldr	r3, [pc, #480]	; (80024ac <main+0xfc0>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	801a      	strh	r2, [r3, #0]
					initMenu = 1;
 80022ce:	4b78      	ldr	r3, [pc, #480]	; (80024b0 <main+0xfc4>)
 80022d0:	2201      	movs	r2, #1
 80022d2:	801a      	strh	r2, [r3, #0]
 80022d4:	e0ba      	b.n	800244c <main+0xf60>
				}
			} else {
				ILI9341_Fill_Screen(BLACK);
 80022d6:	2000      	movs	r0, #0
 80022d8:	f001 ff04 	bl	80040e4 <ILI9341_Fill_Screen>
				stage = 0;
 80022dc:	4b73      	ldr	r3, [pc, #460]	; (80024ac <main+0xfc0>)
 80022de:	2200      	movs	r2, #0
 80022e0:	801a      	strh	r2, [r3, #0]
				initMenu = 1;
 80022e2:	4b73      	ldr	r3, [pc, #460]	; (80024b0 <main+0xfc4>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	801a      	strh	r2, [r3, #0]
 80022e8:	e0b0      	b.n	800244c <main+0xf60>
			}
		} else
		//----------------------------------------------------------lose Screen
		if (stage == 4) {
 80022ea:	4b70      	ldr	r3, [pc, #448]	; (80024ac <main+0xfc0>)
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	f040 80ac 	bne.w	800244c <main+0xf60>
			gamelose();
 80022f4:	f7fe fe80 	bl	8000ff8 <gamelose>
			HAL_Delay(4900);
 80022f8:	f241 3024 	movw	r0, #4900	; 0x1324
 80022fc:	f002 f8b4 	bl	8004468 <HAL_Delay>
			ILI9341_Fill_Screen(BLACK);
 8002300:	2000      	movs	r0, #0
 8002302:	f001 feef 	bl	80040e4 <ILI9341_Fill_Screen>
			playerLen = EEPROM_Read_NUM(1, 0);
 8002306:	2100      	movs	r1, #0
 8002308:	2001      	movs	r0, #1
 800230a:	f7fe fa53 	bl	80007b4 <EEPROM_Read_NUM>
 800230e:	eef0 7a40 	vmov.f32	s15, s0
 8002312:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002316:	ee17 2a90 	vmov	r2, s15
 800231a:	4b60      	ldr	r3, [pc, #384]	; (800249c <main+0xfb0>)
 800231c:	601a      	str	r2, [r3, #0]
			if (playerLen < 5) {
 800231e:	4b5f      	ldr	r3, [pc, #380]	; (800249c <main+0xfb0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2b04      	cmp	r3, #4
 8002324:	dc03      	bgt.n	800232e <main+0xe42>
				stage = 5;
 8002326:	4b61      	ldr	r3, [pc, #388]	; (80024ac <main+0xfc0>)
 8002328:	2205      	movs	r2, #5
 800232a:	801a      	strh	r2, [r3, #0]
 800232c:	e08e      	b.n	800244c <main+0xf60>
			} else if (playerLen == 5) {
 800232e:	4b5b      	ldr	r3, [pc, #364]	; (800249c <main+0xfb0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2b05      	cmp	r3, #5
 8002334:	f040 8081 	bne.w	800243a <main+0xf4e>
				for (int i = 0; i < playerLen; i++) {
 8002338:	2300      	movs	r3, #0
 800233a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800233e:	e04a      	b.n	80023d6 <main+0xeea>
					int indexshow = (i * 4) + 2;
 8002340:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	3302      	adds	r3, #2
 8002348:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
					playerNumberSort[i][0] = EEPROM_Read_NUM(indexshow + 2, 0);
 800234c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002350:	b29b      	uxth	r3, r3
 8002352:	3302      	adds	r3, #2
 8002354:	b29b      	uxth	r3, r3
 8002356:	2100      	movs	r1, #0
 8002358:	4618      	mov	r0, r3
 800235a:	f7fe fa2b 	bl	80007b4 <EEPROM_Read_NUM>
 800235e:	eef0 7a40 	vmov.f32	s15, s0
 8002362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002366:	ee17 0a90 	vmov	r0, s15
 800236a:	494a      	ldr	r1, [pc, #296]	; (8002494 <main+0xfa8>)
 800236c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8002370:	4613      	mov	r3, r2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4413      	add	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	6018      	str	r0, [r3, #0]
					playerNumberSort[i][1] = EEPROM_Read_NUM(indexshow + 3, 0);
 800237c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002380:	b29b      	uxth	r3, r3
 8002382:	3303      	adds	r3, #3
 8002384:	b29b      	uxth	r3, r3
 8002386:	2100      	movs	r1, #0
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe fa13 	bl	80007b4 <EEPROM_Read_NUM>
 800238e:	eef0 7a40 	vmov.f32	s15, s0
 8002392:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002396:	ee17 0a90 	vmov	r0, s15
 800239a:	493e      	ldr	r1, [pc, #248]	; (8002494 <main+0xfa8>)
 800239c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80023a0:	4613      	mov	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4413      	add	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	3304      	adds	r3, #4
 80023ac:	6018      	str	r0, [r3, #0]
					playerNumberSort[i][2] = indexdefault[i];
 80023ae:	4a3a      	ldr	r2, [pc, #232]	; (8002498 <main+0xfac>)
 80023b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80023b4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80023b8:	4836      	ldr	r0, [pc, #216]	; (8002494 <main+0xfa8>)
 80023ba:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80023be:	4613      	mov	r3, r2
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4403      	add	r3, r0
 80023c8:	3308      	adds	r3, #8
 80023ca:	6019      	str	r1, [r3, #0]
				for (int i = 0; i < playerLen; i++) {
 80023cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80023d0:	3301      	adds	r3, #1
 80023d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80023d6:	4b31      	ldr	r3, [pc, #196]	; (800249c <main+0xfb0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80023de:	429a      	cmp	r2, r3
 80023e0:	dbae      	blt.n	8002340 <main+0xe54>
				}

				qsort((const int*) &playerNumberSort, playerLen,
 80023e2:	4b2e      	ldr	r3, [pc, #184]	; (800249c <main+0xfb0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4619      	mov	r1, r3
 80023e8:	2303      	movs	r3, #3
 80023ea:	009a      	lsls	r2, r3, #2
 80023ec:	4b2c      	ldr	r3, [pc, #176]	; (80024a0 <main+0xfb4>)
 80023ee:	4829      	ldr	r0, [pc, #164]	; (8002494 <main+0xfa8>)
 80023f0:	f006 fc64 	bl	8008cbc <qsort>
						sizeof(int[NUM_COLS]), CompareArrays);

				if (score > playerNumberSort[4][0]
 80023f4:	4b2b      	ldr	r3, [pc, #172]	; (80024a4 <main+0xfb8>)
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	4b26      	ldr	r3, [pc, #152]	; (8002494 <main+0xfa8>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	429a      	cmp	r2, r3
 8002400:	dc0d      	bgt.n	800241e <main+0xf32>
						|| (second < playerNumberSort[4][1]
 8002402:	4b29      	ldr	r3, [pc, #164]	; (80024a8 <main+0xfbc>)
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	461a      	mov	r2, r3
 8002408:	4b22      	ldr	r3, [pc, #136]	; (8002494 <main+0xfa8>)
 800240a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800240c:	429a      	cmp	r2, r3
 800240e:	da0a      	bge.n	8002426 <main+0xf3a>
								&& score == playerNumberSort[4][0])) {
 8002410:	4b24      	ldr	r3, [pc, #144]	; (80024a4 <main+0xfb8>)
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	461a      	mov	r2, r3
 8002416:	4b1f      	ldr	r3, [pc, #124]	; (8002494 <main+0xfa8>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	429a      	cmp	r2, r3
 800241c:	d103      	bne.n	8002426 <main+0xf3a>
					stage = 5;
 800241e:	4b23      	ldr	r3, [pc, #140]	; (80024ac <main+0xfc0>)
 8002420:	2205      	movs	r2, #5
 8002422:	801a      	strh	r2, [r3, #0]
 8002424:	e012      	b.n	800244c <main+0xf60>
				} else {
					ILI9341_Fill_Screen(BLACK);
 8002426:	2000      	movs	r0, #0
 8002428:	f001 fe5c 	bl	80040e4 <ILI9341_Fill_Screen>
					stage = 0;
 800242c:	4b1f      	ldr	r3, [pc, #124]	; (80024ac <main+0xfc0>)
 800242e:	2200      	movs	r2, #0
 8002430:	801a      	strh	r2, [r3, #0]
					initMenu = 1;
 8002432:	4b1f      	ldr	r3, [pc, #124]	; (80024b0 <main+0xfc4>)
 8002434:	2201      	movs	r2, #1
 8002436:	801a      	strh	r2, [r3, #0]
 8002438:	e008      	b.n	800244c <main+0xf60>
				}
			} else {
				ILI9341_Fill_Screen(BLACK);
 800243a:	2000      	movs	r0, #0
 800243c:	f001 fe52 	bl	80040e4 <ILI9341_Fill_Screen>
				stage = 0;
 8002440:	4b1a      	ldr	r3, [pc, #104]	; (80024ac <main+0xfc0>)
 8002442:	2200      	movs	r2, #0
 8002444:	801a      	strh	r2, [r3, #0]
				initMenu = 1;
 8002446:	4b1a      	ldr	r3, [pc, #104]	; (80024b0 <main+0xfc4>)
 8002448:	2201      	movs	r2, #1
 800244a:	801a      	strh	r2, [r3, #0]
			}
		}
		//----------------------------------------------------------submit Screen
		if (stage == 5) {
 800244c:	4b17      	ldr	r3, [pc, #92]	; (80024ac <main+0xfc0>)
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	2b05      	cmp	r3, #5
 8002452:	f040 8367 	bne.w	8002b24 <main+0x1638>

			uint8_t numx = 15;
 8002456:	230f      	movs	r3, #15
 8002458:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			uint8_t numy = 120;
 800245c:	2378      	movs	r3, #120	; 0x78
 800245e:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
			uint8_t num2x = 12;
 8002462:	230c      	movs	r3, #12
 8002464:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
			uint8_t num2y = 136;
 8002468:	2388      	movs	r3, #136	; 0x88
 800246a:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
			uint8_t check = 0;
 800246e:	2300      	movs	r3, #0
 8002470:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
			uint8_t num3x = 40;
 8002474:	2328      	movs	r3, #40	; 0x28
 8002476:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
			memset(name, 0, strlen(name)); //Clear name
 800247a:	480e      	ldr	r0, [pc, #56]	; (80024b4 <main+0xfc8>)
 800247c:	f7fd fee0 	bl	8000240 <strlen>
 8002480:	4603      	mov	r3, r0
 8002482:	461a      	mov	r2, r3
 8002484:	2100      	movs	r1, #0
 8002486:	480b      	ldr	r0, [pc, #44]	; (80024b4 <main+0xfc8>)
 8002488:	f005 ff96 	bl	80083b8 <memset>
			char temp[1];

			int dataTemp;

			//Draw text
			for (int i = 0; i < 26; i++) {
 800248c:	2300      	movs	r3, #0
 800248e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002492:	e043      	b.n	800251c <main+0x1030>
 8002494:	20000320 	.word	0x20000320
 8002498:	2000003c 	.word	0x2000003c
 800249c:	20000314 	.word	0x20000314
 80024a0:	08001489 	.word	0x08001489
 80024a4:	20000308 	.word	0x20000308
 80024a8:	2000030c 	.word	0x2000030c
 80024ac:	200002a4 	.word	0x200002a4
 80024b0:	2000001e 	.word	0x2000001e
 80024b4:	20000318 	.word	0x20000318
				char str[100];
				sprintf(str, "%c", text[i]);
 80024b8:	4aba      	ldr	r2, [pc, #744]	; (80027a4 <main+0x12b8>)
 80024ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024be:	4413      	add	r3, r2
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	1d3b      	adds	r3, r7, #4
 80024c6:	49b8      	ldr	r1, [pc, #736]	; (80027a8 <main+0x12bc>)
 80024c8:	4618      	mov	r0, r3
 80024ca:	f006 fd85 	bl	8008fd8 <siprintf>
				if (i == 10 || i == 20) {
 80024ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024d2:	2b0a      	cmp	r3, #10
 80024d4:	d003      	beq.n	80024de <main+0xff2>
 80024d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024da:	2b14      	cmp	r3, #20
 80024dc:	d107      	bne.n	80024ee <main+0x1002>
					numx = 15;
 80024de:	230f      	movs	r3, #15
 80024e0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
					numy += 30;
 80024e4:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 80024e8:	331e      	adds	r3, #30
 80024ea:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
				}
				ILI9341_Draw_Text(str, numx, numy, WHITE, 2, BLACK);
 80024ee:	f897 20d6 	ldrb.w	r2, [r7, #214]	; 0xd6
 80024f2:	f897 10d7 	ldrb.w	r1, [r7, #215]	; 0xd7
 80024f6:	1d38      	adds	r0, r7, #4
 80024f8:	2300      	movs	r3, #0
 80024fa:	9301      	str	r3, [sp, #4]
 80024fc:	2302      	movs	r3, #2
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002504:	f001 fa82 	bl	8003a0c <ILI9341_Draw_Text>
				numx += 25;
 8002508:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800250c:	3319      	adds	r3, #25
 800250e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			for (int i = 0; i < 26; i++) {
 8002512:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002516:	3301      	adds	r3, #1
 8002518:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800251c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002520:	2b19      	cmp	r3, #25
 8002522:	ddc9      	ble.n	80024b8 <main+0xfcc>
			}

			//Draw cursor
			ILI9341_Draw_Rectangle(num2x, num2y, 16, 4, WHITE);
 8002524:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8002528:	b298      	uxth	r0, r3
 800252a:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 800252e:	b299      	uxth	r1, r3
 8002530:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	2304      	movs	r3, #4
 8002538:	2210      	movs	r2, #16
 800253a:	f001 fed3 	bl	80042e4 <ILI9341_Draw_Rectangle>

			while (1) {
				HAL_Delay(100);
 800253e:	2064      	movs	r0, #100	; 0x64
 8002540:	f001 ff92 	bl	8004468 <HAL_Delay>
				//Move right
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET) {
 8002544:	2108      	movs	r1, #8
 8002546:	4899      	ldr	r0, [pc, #612]	; (80027ac <main+0x12c0>)
 8002548:	f002 fa70 	bl	8004a2c <HAL_GPIO_ReadPin>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d147      	bne.n	80025e2 <main+0x10f6>
					ILI9341_Draw_Rectangle(num2x, num2y, 16, 5, BLACK);
 8002552:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8002556:	b298      	uxth	r0, r3
 8002558:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 800255c:	b299      	uxth	r1, r3
 800255e:	2300      	movs	r3, #0
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	2305      	movs	r3, #5
 8002564:	2210      	movs	r2, #16
 8002566:	f001 febd 	bl	80042e4 <ILI9341_Draw_Rectangle>
					if (check == 9 || check == 19) {
 800256a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800256e:	2b09      	cmp	r3, #9
 8002570:	d003      	beq.n	800257a <main+0x108e>
 8002572:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002576:	2b13      	cmp	r3, #19
 8002578:	d10d      	bne.n	8002596 <main+0x10aa>
						num2x = 12;
 800257a:	230c      	movs	r3, #12
 800257c:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
						num2y += 30;
 8002580:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8002584:	331e      	adds	r3, #30
 8002586:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
						check += 1;
 800258a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800258e:	3301      	adds	r3, #1
 8002590:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 8002594:	e017      	b.n	80025c6 <main+0x10da>
					} else if (check == 25) {
 8002596:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800259a:	2b19      	cmp	r3, #25
 800259c:	d109      	bne.n	80025b2 <main+0x10c6>
						num2x = 12;
 800259e:	230c      	movs	r3, #12
 80025a0:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
						num2y = 136;
 80025a4:	2388      	movs	r3, #136	; 0x88
 80025a6:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
						check = 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 80025b0:	e009      	b.n	80025c6 <main+0x10da>
					} else {
						num2x += 25;
 80025b2:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80025b6:	3319      	adds	r3, #25
 80025b8:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
						check += 1;
 80025bc:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80025c0:	3301      	adds	r3, #1
 80025c2:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
					}
					ILI9341_Draw_Rectangle(num2x, num2y, 16, 5, WHITE);
 80025c6:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80025ca:	b298      	uxth	r0, r3
 80025cc:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 80025d0:	b299      	uxth	r1, r3
 80025d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	2305      	movs	r3, #5
 80025da:	2210      	movs	r2, #16
 80025dc:	f001 fe82 	bl	80042e4 <ILI9341_Draw_Rectangle>
 80025e0:	e7ad      	b.n	800253e <main+0x1052>
					//Move left
				} else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)
 80025e2:	2101      	movs	r1, #1
 80025e4:	4872      	ldr	r0, [pc, #456]	; (80027b0 <main+0x12c4>)
 80025e6:	f002 fa21 	bl	8004a2c <HAL_GPIO_ReadPin>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d147      	bne.n	8002680 <main+0x1194>
						== GPIO_PIN_RESET) {
					ILI9341_Draw_Rectangle(num2x, num2y, 16, 5, BLACK);
 80025f0:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80025f4:	b298      	uxth	r0, r3
 80025f6:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 80025fa:	b299      	uxth	r1, r3
 80025fc:	2300      	movs	r3, #0
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2305      	movs	r3, #5
 8002602:	2210      	movs	r2, #16
 8002604:	f001 fe6e 	bl	80042e4 <ILI9341_Draw_Rectangle>
					if (check == 10 || check == 20) {
 8002608:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800260c:	2b0a      	cmp	r3, #10
 800260e:	d003      	beq.n	8002618 <main+0x112c>
 8002610:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002614:	2b14      	cmp	r3, #20
 8002616:	d10d      	bne.n	8002634 <main+0x1148>
						num2x = 237;
 8002618:	23ed      	movs	r3, #237	; 0xed
 800261a:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
						num2y -= 30;
 800261e:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8002622:	3b1e      	subs	r3, #30
 8002624:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
						check -= 1;
 8002628:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800262c:	3b01      	subs	r3, #1
 800262e:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 8002632:	e017      	b.n	8002664 <main+0x1178>
					} else if (check == 0) {
 8002634:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002638:	2b00      	cmp	r3, #0
 800263a:	d109      	bne.n	8002650 <main+0x1164>
						num2x = 137;
 800263c:	2389      	movs	r3, #137	; 0x89
 800263e:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
						num2y = 196;
 8002642:	23c4      	movs	r3, #196	; 0xc4
 8002644:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
						check = 25;
 8002648:	2319      	movs	r3, #25
 800264a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 800264e:	e009      	b.n	8002664 <main+0x1178>
					} else {
						num2x -= 25;
 8002650:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8002654:	3b19      	subs	r3, #25
 8002656:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
						check -= 1;
 800265a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800265e:	3b01      	subs	r3, #1
 8002660:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
					}
					ILI9341_Draw_Rectangle(num2x, num2y, 16, 5, WHITE);
 8002664:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8002668:	b298      	uxth	r0, r3
 800266a:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 800266e:	b299      	uxth	r1, r3
 8002670:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	2305      	movs	r3, #5
 8002678:	2210      	movs	r2, #16
 800267a:	f001 fe33 	bl	80042e4 <ILI9341_Draw_Rectangle>
 800267e:	e75e      	b.n	800253e <main+0x1052>

				} else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)
 8002680:	2108      	movs	r1, #8
 8002682:	484b      	ldr	r0, [pc, #300]	; (80027b0 <main+0x12c4>)
 8002684:	f002 f9d2 	bl	8004a2c <HAL_GPIO_ReadPin>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d141      	bne.n	8002712 <main+0x1226>
						== GPIO_PIN_RESET) {
					//Move top
					ILI9341_Draw_Rectangle(num2x, num2y, 16, 5, BLACK);
 800268e:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8002692:	b298      	uxth	r0, r3
 8002694:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8002698:	b299      	uxth	r1, r3
 800269a:	2300      	movs	r3, #0
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	2305      	movs	r3, #5
 80026a0:	2210      	movs	r2, #16
 80026a2:	f001 fe1f 	bl	80042e4 <ILI9341_Draw_Rectangle>
					if (check <= 5) {
 80026a6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80026aa:	2b05      	cmp	r3, #5
 80026ac:	d80a      	bhi.n	80026c4 <main+0x11d8>
						num2y += 60;
 80026ae:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 80026b2:	333c      	adds	r3, #60	; 0x3c
 80026b4:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
						check += 20;
 80026b8:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80026bc:	3314      	adds	r3, #20
 80026be:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 80026c2:	e018      	b.n	80026f6 <main+0x120a>
					} else if (check <= 9) {
 80026c4:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80026c8:	2b09      	cmp	r3, #9
 80026ca:	d80a      	bhi.n	80026e2 <main+0x11f6>
						num2y += 30;
 80026cc:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 80026d0:	331e      	adds	r3, #30
 80026d2:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
						check += 10;
 80026d6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80026da:	330a      	adds	r3, #10
 80026dc:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 80026e0:	e009      	b.n	80026f6 <main+0x120a>
					} else {
						num2y -= 30;
 80026e2:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 80026e6:	3b1e      	subs	r3, #30
 80026e8:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
						check -= 10;
 80026ec:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80026f0:	3b0a      	subs	r3, #10
 80026f2:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
					}
					ILI9341_Draw_Rectangle(num2x, num2y, 16, 5, WHITE);
 80026f6:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80026fa:	b298      	uxth	r0, r3
 80026fc:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8002700:	b299      	uxth	r1, r3
 8002702:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	2305      	movs	r3, #5
 800270a:	2210      	movs	r2, #16
 800270c:	f001 fdea 	bl	80042e4 <ILI9341_Draw_Rectangle>
 8002710:	e715      	b.n	800253e <main+0x1052>
				} else if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_3)
 8002712:	2108      	movs	r1, #8
 8002714:	4827      	ldr	r0, [pc, #156]	; (80027b4 <main+0x12c8>)
 8002716:	f002 f989 	bl	8004a2c <HAL_GPIO_ReadPin>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d14b      	bne.n	80027b8 <main+0x12cc>
						== GPIO_PIN_RESET) {
					//Move bottom
					ILI9341_Draw_Rectangle(num2x, num2y, 16, 5, BLACK);
 8002720:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8002724:	b298      	uxth	r0, r3
 8002726:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 800272a:	b299      	uxth	r1, r3
 800272c:	2300      	movs	r3, #0
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	2305      	movs	r3, #5
 8002732:	2210      	movs	r2, #16
 8002734:	f001 fdd6 	bl	80042e4 <ILI9341_Draw_Rectangle>
					if (check >= 20) {
 8002738:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800273c:	2b13      	cmp	r3, #19
 800273e:	d90a      	bls.n	8002756 <main+0x126a>
						num2y -= 60;
 8002740:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8002744:	3b3c      	subs	r3, #60	; 0x3c
 8002746:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
						check -= 20;
 800274a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800274e:	3b14      	subs	r3, #20
 8002750:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 8002754:	e018      	b.n	8002788 <main+0x129c>
					} else if (check >= 16) {
 8002756:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800275a:	2b0f      	cmp	r3, #15
 800275c:	d90a      	bls.n	8002774 <main+0x1288>
						num2y -= 30;
 800275e:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8002762:	3b1e      	subs	r3, #30
 8002764:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
						check -= 10;
 8002768:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800276c:	3b0a      	subs	r3, #10
 800276e:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 8002772:	e009      	b.n	8002788 <main+0x129c>
					} else {
						num2y += 30;
 8002774:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8002778:	331e      	adds	r3, #30
 800277a:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
						check += 10;
 800277e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002782:	330a      	adds	r3, #10
 8002784:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
					}
					ILI9341_Draw_Rectangle(num2x, num2y, 16, 5, WHITE);
 8002788:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 800278c:	b298      	uxth	r0, r3
 800278e:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8002792:	b299      	uxth	r1, r3
 8002794:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	2305      	movs	r3, #5
 800279c:	2210      	movs	r2, #16
 800279e:	f001 fda1 	bl	80042e4 <ILI9341_Draw_Rectangle>
 80027a2:	e6cc      	b.n	800253e <main+0x1052>
 80027a4:	20000020 	.word	0x20000020
 80027a8:	0800b4a8 	.word	0x0800b4a8
 80027ac:	40020000 	.word	0x40020000
 80027b0:	40020800 	.word	0x40020800
 80027b4:	40021400 	.word	0x40021400

				} else if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_1)
 80027b8:	2102      	movs	r1, #2
 80027ba:	4872      	ldr	r0, [pc, #456]	; (8002984 <main+0x1498>)
 80027bc:	f002 f936 	bl	8004a2c <HAL_GPIO_ReadPin>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d133      	bne.n	800282e <main+0x1342>
						== GPIO_PIN_RESET) { //select
					//Select character
					if (strlen(name) < 5) {
 80027c6:	4870      	ldr	r0, [pc, #448]	; (8002988 <main+0x149c>)
 80027c8:	f7fd fd3a 	bl	8000240 <strlen>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	f63f aeb5 	bhi.w	800253e <main+0x1052>
						char str[100];
						sprintf(str, "%c", text[check]);
 80027d4:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80027d8:	4a6c      	ldr	r2, [pc, #432]	; (800298c <main+0x14a0>)
 80027da:	5cd3      	ldrb	r3, [r2, r3]
 80027dc:	461a      	mov	r2, r3
 80027de:	1d3b      	adds	r3, r7, #4
 80027e0:	496b      	ldr	r1, [pc, #428]	; (8002990 <main+0x14a4>)
 80027e2:	4618      	mov	r0, r3
 80027e4:	f006 fbf8 	bl	8008fd8 <siprintf>
						ILI9341_Draw_Text(str, num3x, 80, WHITE, 2,
 80027e8:	f897 10d2 	ldrb.w	r1, [r7, #210]	; 0xd2
 80027ec:	1d38      	adds	r0, r7, #4
 80027ee:	2300      	movs	r3, #0
 80027f0:	9301      	str	r3, [sp, #4]
 80027f2:	2302      	movs	r3, #2
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027fa:	2250      	movs	r2, #80	; 0x50
 80027fc:	f001 f906 	bl	8003a0c <ILI9341_Draw_Text>
						BLACK);
						num3x += 12;
 8002800:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8002804:	330c      	adds	r3, #12
 8002806:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
						sprintf(temp, "%c", text[check]);
 800280a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800280e:	4a5f      	ldr	r2, [pc, #380]	; (800298c <main+0x14a0>)
 8002810:	5cd3      	ldrb	r3, [r2, r3]
 8002812:	461a      	mov	r2, r3
 8002814:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002818:	495d      	ldr	r1, [pc, #372]	; (8002990 <main+0x14a4>)
 800281a:	4618      	mov	r0, r3
 800281c:	f006 fbdc 	bl	8008fd8 <siprintf>
						strcat(name, temp);
 8002820:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002824:	4619      	mov	r1, r3
 8002826:	4858      	ldr	r0, [pc, #352]	; (8002988 <main+0x149c>)
 8002828:	f006 fbf6 	bl	8009018 <strcat>
 800282c:	e687      	b.n	800253e <main+0x1052>
					}

				} else if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_0)
 800282e:	2101      	movs	r1, #1
 8002830:	4854      	ldr	r0, [pc, #336]	; (8002984 <main+0x1498>)
 8002832:	f002 f8fb 	bl	8004a2c <HAL_GPIO_ReadPin>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d11c      	bne.n	8002876 <main+0x138a>
						== GPIO_PIN_RESET) { //pause
					//					delete name
					if (strlen(name) > 0) {
 800283c:	4b52      	ldr	r3, [pc, #328]	; (8002988 <main+0x149c>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	f43f ae7c 	beq.w	800253e <main+0x1052>
						num3x -= 12;
 8002846:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800284a:	3b0c      	subs	r3, #12
 800284c:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
						ILI9341_Draw_Rectangle(num3x, 80, 12, 20,
 8002850:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8002854:	b298      	uxth	r0, r3
 8002856:	2300      	movs	r3, #0
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	2314      	movs	r3, #20
 800285c:	220c      	movs	r2, #12
 800285e:	2150      	movs	r1, #80	; 0x50
 8002860:	f001 fd40 	bl	80042e4 <ILI9341_Draw_Rectangle>
						BLACK);
						name[strlen(name) - 1] = 0;
 8002864:	4848      	ldr	r0, [pc, #288]	; (8002988 <main+0x149c>)
 8002866:	f7fd fceb 	bl	8000240 <strlen>
 800286a:	4603      	mov	r3, r0
 800286c:	3b01      	subs	r3, #1
 800286e:	4a46      	ldr	r2, [pc, #280]	; (8002988 <main+0x149c>)
 8002870:	2100      	movs	r1, #0
 8002872:	54d1      	strb	r1, [r2, r3]
 8002874:	e663      	b.n	800253e <main+0x1052>
					}
				} else if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_5) == GPIO_PIN_RESET
 8002876:	2120      	movs	r1, #32
 8002878:	4842      	ldr	r0, [pc, #264]	; (8002984 <main+0x1498>)
 800287a:	f002 f8d7 	bl	8004a2c <HAL_GPIO_ReadPin>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d007      	beq.n	8002894 <main+0x13a8>
						|| HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_2) == GPIO_PIN_RESET) { //A,B
 8002884:	2104      	movs	r1, #4
 8002886:	483f      	ldr	r0, [pc, #252]	; (8002984 <main+0x1498>)
 8002888:	f002 f8d0 	bl	8004a2c <HAL_GPIO_ReadPin>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	f47f ae55 	bne.w	800253e <main+0x1052>
						//submit name
					playerLen = EEPROM_Read_NUM(1, 0);
 8002894:	2100      	movs	r1, #0
 8002896:	2001      	movs	r0, #1
 8002898:	f7fd ff8c 	bl	80007b4 <EEPROM_Read_NUM>
 800289c:	eef0 7a40 	vmov.f32	s15, s0
 80028a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028a4:	ee17 2a90 	vmov	r2, s15
 80028a8:	4b3a      	ldr	r3, [pc, #232]	; (8002994 <main+0x14a8>)
 80028aa:	601a      	str	r2, [r3, #0]
					if (playerLen < 5) {
 80028ac:	4b39      	ldr	r3, [pc, #228]	; (8002994 <main+0x14a8>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	dc5d      	bgt.n	8002970 <main+0x1484>
						namelen = strlen(name);
 80028b4:	4834      	ldr	r0, [pc, #208]	; (8002988 <main+0x149c>)
 80028b6:	f7fd fcc3 	bl	8000240 <strlen>
 80028ba:	ee07 0a90 	vmov	s15, r0
 80028be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028c2:	4b35      	ldr	r3, [pc, #212]	; (8002998 <main+0x14ac>)
 80028c4:	edc3 7a00 	vstr	s15, [r3]
						int index = (playerLen * 4) + 2;
 80028c8:	4b32      	ldr	r3, [pc, #200]	; (8002994 <main+0x14a8>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	3302      	adds	r3, #2
 80028d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
						EEPROM_Write_NUM(index, 0, namelen);
 80028d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80028d8:	b29b      	uxth	r3, r3
 80028da:	4a2f      	ldr	r2, [pc, #188]	; (8002998 <main+0x14ac>)
 80028dc:	edd2 7a00 	vldr	s15, [r2]
 80028e0:	eeb0 0a67 	vmov.f32	s0, s15
 80028e4:	2100      	movs	r1, #0
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fd ff48 	bl	800077c <EEPROM_Write_NUM>
						EEPROM_Write(index + 1, 0, name, strlen(name));
 80028ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	3301      	adds	r3, #1
 80028f4:	b29c      	uxth	r4, r3
 80028f6:	4824      	ldr	r0, [pc, #144]	; (8002988 <main+0x149c>)
 80028f8:	f7fd fca2 	bl	8000240 <strlen>
 80028fc:	4603      	mov	r3, r0
 80028fe:	b29b      	uxth	r3, r3
 8002900:	4a21      	ldr	r2, [pc, #132]	; (8002988 <main+0x149c>)
 8002902:	2100      	movs	r1, #0
 8002904:	4620      	mov	r0, r4
 8002906:	f7fd fe8f 	bl	8000628 <EEPROM_Write>
						EEPROM_Write_NUM(index + 2, 0, score);
 800290a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800290e:	b29b      	uxth	r3, r3
 8002910:	3302      	adds	r3, #2
 8002912:	b29b      	uxth	r3, r3
 8002914:	4a21      	ldr	r2, [pc, #132]	; (800299c <main+0x14b0>)
 8002916:	8812      	ldrh	r2, [r2, #0]
 8002918:	ee07 2a90 	vmov	s15, r2
 800291c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002920:	eeb0 0a67 	vmov.f32	s0, s15
 8002924:	2100      	movs	r1, #0
 8002926:	4618      	mov	r0, r3
 8002928:	f7fd ff28 	bl	800077c <EEPROM_Write_NUM>
						EEPROM_Write_NUM(index + 3, 0, second);
 800292c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002930:	b29b      	uxth	r3, r3
 8002932:	3303      	adds	r3, #3
 8002934:	b29b      	uxth	r3, r3
 8002936:	4a1a      	ldr	r2, [pc, #104]	; (80029a0 <main+0x14b4>)
 8002938:	8812      	ldrh	r2, [r2, #0]
 800293a:	ee07 2a90 	vmov	s15, r2
 800293e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002942:	eeb0 0a67 	vmov.f32	s0, s15
 8002946:	2100      	movs	r1, #0
 8002948:	4618      	mov	r0, r3
 800294a:	f7fd ff17 	bl	800077c <EEPROM_Write_NUM>
						dataTemp = playerLen + 1;
 800294e:	4b11      	ldr	r3, [pc, #68]	; (8002994 <main+0x14a8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	3301      	adds	r3, #1
 8002954:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
						EEPROM_Write_NUM(1, 0, dataTemp);
 8002958:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800295c:	ee07 3a90 	vmov	s15, r3
 8002960:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002964:	eeb0 0a67 	vmov.f32	s0, s15
 8002968:	2100      	movs	r1, #0
 800296a:	2001      	movs	r0, #1
 800296c:	f7fd ff06 	bl	800077c <EEPROM_Write_NUM>
					}
					if (playerLen == 5) {
 8002970:	4b08      	ldr	r3, [pc, #32]	; (8002994 <main+0x14a8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b05      	cmp	r3, #5
 8002976:	f040 80cb 	bne.w	8002b10 <main+0x1624>
						for (int i = 0; i < playerLen; i++) {
 800297a:	2300      	movs	r3, #0
 800297c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002980:	e05b      	b.n	8002a3a <main+0x154e>
 8002982:	bf00      	nop
 8002984:	40021400 	.word	0x40021400
 8002988:	20000318 	.word	0x20000318
 800298c:	20000020 	.word	0x20000020
 8002990:	0800b4a8 	.word	0x0800b4a8
 8002994:	20000314 	.word	0x20000314
 8002998:	20000370 	.word	0x20000370
 800299c:	20000308 	.word	0x20000308
 80029a0:	2000030c 	.word	0x2000030c
							int indexshow = (i * 4) + 2;
 80029a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	3302      	adds	r3, #2
 80029ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
							playerNumberSort[i][0] = EEPROM_Read_NUM(
 80029b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	3302      	adds	r3, #2
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	2100      	movs	r1, #0
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fd fef9 	bl	80007b4 <EEPROM_Read_NUM>
 80029c2:	eef0 7a40 	vmov.f32	s15, s0
 80029c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029ca:	ee17 0a90 	vmov	r0, s15
 80029ce:	49a1      	ldr	r1, [pc, #644]	; (8002c54 <main+0x1768>)
 80029d0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80029d4:	4613      	mov	r3, r2
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	6018      	str	r0, [r3, #0]
									indexshow + 2, 0);
							playerNumberSort[i][1] = EEPROM_Read_NUM(
 80029e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	3303      	adds	r3, #3
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	2100      	movs	r1, #0
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fd fee1 	bl	80007b4 <EEPROM_Read_NUM>
 80029f2:	eef0 7a40 	vmov.f32	s15, s0
 80029f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029fa:	ee17 0a90 	vmov	r0, s15
 80029fe:	4995      	ldr	r1, [pc, #596]	; (8002c54 <main+0x1768>)
 8002a00:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002a04:	4613      	mov	r3, r2
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	4413      	add	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	3304      	adds	r3, #4
 8002a10:	6018      	str	r0, [r3, #0]
									indexshow + 3, 0);
							playerNumberSort[i][2] = indexdefault[i];
 8002a12:	4a91      	ldr	r2, [pc, #580]	; (8002c58 <main+0x176c>)
 8002a14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a18:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002a1c:	488d      	ldr	r0, [pc, #564]	; (8002c54 <main+0x1768>)
 8002a1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002a22:	4613      	mov	r3, r2
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4403      	add	r3, r0
 8002a2c:	3308      	adds	r3, #8
 8002a2e:	6019      	str	r1, [r3, #0]
						for (int i = 0; i < playerLen; i++) {
 8002a30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a34:	3301      	adds	r3, #1
 8002a36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a3a:	4b88      	ldr	r3, [pc, #544]	; (8002c5c <main+0x1770>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002a42:	429a      	cmp	r2, r3
 8002a44:	dbae      	blt.n	80029a4 <main+0x14b8>
						}

						qsort((const int*) &playerNumberSort, playerLen,
 8002a46:	4b85      	ldr	r3, [pc, #532]	; (8002c5c <main+0x1770>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	009a      	lsls	r2, r3, #2
 8002a50:	4b83      	ldr	r3, [pc, #524]	; (8002c60 <main+0x1774>)
 8002a52:	4880      	ldr	r0, [pc, #512]	; (8002c54 <main+0x1768>)
 8002a54:	f006 f932 	bl	8008cbc <qsort>
								sizeof(int[NUM_COLS]), CompareArrays);

						if (score > playerNumberSort[4][0]
 8002a58:	4b82      	ldr	r3, [pc, #520]	; (8002c64 <main+0x1778>)
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4b7d      	ldr	r3, [pc, #500]	; (8002c54 <main+0x1768>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	429a      	cmp	r2, r3
 8002a64:	dc0d      	bgt.n	8002a82 <main+0x1596>
								|| (second < playerNumberSort[4][1]
 8002a66:	4b80      	ldr	r3, [pc, #512]	; (8002c68 <main+0x177c>)
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	4b79      	ldr	r3, [pc, #484]	; (8002c54 <main+0x1768>)
 8002a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a70:	429a      	cmp	r2, r3
 8002a72:	da4d      	bge.n	8002b10 <main+0x1624>
										&& score == playerNumberSort[4][0])) {
 8002a74:	4b7b      	ldr	r3, [pc, #492]	; (8002c64 <main+0x1778>)
 8002a76:	881b      	ldrh	r3, [r3, #0]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	4b76      	ldr	r3, [pc, #472]	; (8002c54 <main+0x1768>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d146      	bne.n	8002b10 <main+0x1624>
							namelen = strlen(name);
 8002a82:	487a      	ldr	r0, [pc, #488]	; (8002c6c <main+0x1780>)
 8002a84:	f7fd fbdc 	bl	8000240 <strlen>
 8002a88:	ee07 0a90 	vmov	s15, r0
 8002a8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a90:	4b77      	ldr	r3, [pc, #476]	; (8002c70 <main+0x1784>)
 8002a92:	edc3 7a00 	vstr	s15, [r3]
							EEPROM_Write_NUM(playerNumberSort[4][2], 0,
 8002a96:	4b6f      	ldr	r3, [pc, #444]	; (8002c54 <main+0x1768>)
 8002a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	4a74      	ldr	r2, [pc, #464]	; (8002c70 <main+0x1784>)
 8002a9e:	edd2 7a00 	vldr	s15, [r2]
 8002aa2:	eeb0 0a67 	vmov.f32	s0, s15
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fd fe67 	bl	800077c <EEPROM_Write_NUM>
									namelen);
							EEPROM_Write(playerNumberSort[4][2] + 1, 0, name,
 8002aae:	4b69      	ldr	r3, [pc, #420]	; (8002c54 <main+0x1768>)
 8002ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	b29c      	uxth	r4, r3
									strlen(name));
 8002ab8:	486c      	ldr	r0, [pc, #432]	; (8002c6c <main+0x1780>)
 8002aba:	f7fd fbc1 	bl	8000240 <strlen>
 8002abe:	4603      	mov	r3, r0
							EEPROM_Write(playerNumberSort[4][2] + 1, 0, name,
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	4a6a      	ldr	r2, [pc, #424]	; (8002c6c <main+0x1780>)
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	4620      	mov	r0, r4
 8002ac8:	f7fd fdae 	bl	8000628 <EEPROM_Write>
							EEPROM_Write_NUM(playerNumberSort[4][2] + 2, 0,
 8002acc:	4b61      	ldr	r3, [pc, #388]	; (8002c54 <main+0x1768>)
 8002ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	3302      	adds	r3, #2
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	4a63      	ldr	r2, [pc, #396]	; (8002c64 <main+0x1778>)
 8002ad8:	8812      	ldrh	r2, [r2, #0]
 8002ada:	ee07 2a90 	vmov	s15, r2
 8002ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fd fe47 	bl	800077c <EEPROM_Write_NUM>
									score);
							EEPROM_Write_NUM(playerNumberSort[4][2] + 3, 0,
 8002aee:	4b59      	ldr	r3, [pc, #356]	; (8002c54 <main+0x1768>)
 8002af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	3303      	adds	r3, #3
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	4a5b      	ldr	r2, [pc, #364]	; (8002c68 <main+0x177c>)
 8002afa:	8812      	ldrh	r2, [r2, #0]
 8002afc:	ee07 2a90 	vmov	s15, r2
 8002b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b04:	eeb0 0a67 	vmov.f32	s0, s15
 8002b08:	2100      	movs	r1, #0
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fd fe36 	bl	800077c <EEPROM_Write_NUM>
									second);
						}
					}
					break;
 8002b10:	bf00      	nop
				}
			}

			ILI9341_Fill_Screen(BLACK);
 8002b12:	2000      	movs	r0, #0
 8002b14:	f001 fae6 	bl	80040e4 <ILI9341_Fill_Screen>
			stage = 0;
 8002b18:	4b56      	ldr	r3, [pc, #344]	; (8002c74 <main+0x1788>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	801a      	strh	r2, [r3, #0]
			initMenu = 1;
 8002b1e:	4b56      	ldr	r3, [pc, #344]	; (8002c78 <main+0x178c>)
 8002b20:	2201      	movs	r2, #1
 8002b22:	801a      	strh	r2, [r3, #0]
		}
		//---------------------------------------------------------------------High score
		if (stage == 6) {
 8002b24:	4b53      	ldr	r3, [pc, #332]	; (8002c74 <main+0x1788>)
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	2b06      	cmp	r3, #6
 8002b2a:	f47e ad1c 	bne.w	8001566 <main+0x7a>
			uint8_t num4y = 60;
 8002b2e:	233c      	movs	r3, #60	; 0x3c
 8002b30:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
			playerLen = EEPROM_Read_NUM(1, 0);
 8002b34:	2100      	movs	r1, #0
 8002b36:	2001      	movs	r0, #1
 8002b38:	f7fd fe3c 	bl	80007b4 <EEPROM_Read_NUM>
 8002b3c:	eef0 7a40 	vmov.f32	s15, s0
 8002b40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b44:	ee17 2a90 	vmov	r2, s15
 8002b48:	4b44      	ldr	r3, [pc, #272]	; (8002c5c <main+0x1770>)
 8002b4a:	601a      	str	r2, [r3, #0]

			for (int i = 0; i < playerLen; i++) {
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b52:	e04a      	b.n	8002bea <main+0x16fe>
				int indexshow = (i * 4) + 2;
 8002b54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	3302      	adds	r3, #2
 8002b5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
				playerNumberSort[i][0] = EEPROM_Read_NUM(indexshow + 2, 0);
 8002b60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	3302      	adds	r3, #2
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fd fe21 	bl	80007b4 <EEPROM_Read_NUM>
 8002b72:	eef0 7a40 	vmov.f32	s15, s0
 8002b76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b7a:	ee17 0a90 	vmov	r0, s15
 8002b7e:	4935      	ldr	r1, [pc, #212]	; (8002c54 <main+0x1768>)
 8002b80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002b84:	4613      	mov	r3, r2
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	4413      	add	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	6018      	str	r0, [r3, #0]
				playerNumberSort[i][1] = EEPROM_Read_NUM(indexshow + 3, 0);
 8002b90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	3303      	adds	r3, #3
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fd fe09 	bl	80007b4 <EEPROM_Read_NUM>
 8002ba2:	eef0 7a40 	vmov.f32	s15, s0
 8002ba6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002baa:	ee17 0a90 	vmov	r0, s15
 8002bae:	4929      	ldr	r1, [pc, #164]	; (8002c54 <main+0x1768>)
 8002bb0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	4413      	add	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	6018      	str	r0, [r3, #0]
				playerNumberSort[i][2] = indexdefault[i];
 8002bc2:	4a25      	ldr	r2, [pc, #148]	; (8002c58 <main+0x176c>)
 8002bc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bc8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002bcc:	4821      	ldr	r0, [pc, #132]	; (8002c54 <main+0x1768>)
 8002bce:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	4413      	add	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4403      	add	r3, r0
 8002bdc:	3308      	adds	r3, #8
 8002bde:	6019      	str	r1, [r3, #0]
			for (int i = 0; i < playerLen; i++) {
 8002be0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002be4:	3301      	adds	r3, #1
 8002be6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bea:	4b1c      	ldr	r3, [pc, #112]	; (8002c5c <main+0x1770>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	dbae      	blt.n	8002b54 <main+0x1668>
			}

			qsort((const int*) &playerNumberSort, playerLen,
 8002bf6:	4b19      	ldr	r3, [pc, #100]	; (8002c5c <main+0x1770>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	009a      	lsls	r2, r3, #2
 8002c00:	4b17      	ldr	r3, [pc, #92]	; (8002c60 <main+0x1774>)
 8002c02:	4814      	ldr	r0, [pc, #80]	; (8002c54 <main+0x1768>)
 8002c04:	f006 f85a 	bl	8008cbc <qsort>
					sizeof(int[NUM_COLS]), CompareArrays);

			ILI9341_Draw_Text("Name", 45, 25, WHITE, 2, BLACK);
 8002c08:	2300      	movs	r3, #0
 8002c0a:	9301      	str	r3, [sp, #4]
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c14:	2219      	movs	r2, #25
 8002c16:	212d      	movs	r1, #45	; 0x2d
 8002c18:	4818      	ldr	r0, [pc, #96]	; (8002c7c <main+0x1790>)
 8002c1a:	f000 fef7 	bl	8003a0c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("Score", 120, 25, WHITE, 2, BLACK);
 8002c1e:	2300      	movs	r3, #0
 8002c20:	9301      	str	r3, [sp, #4]
 8002c22:	2302      	movs	r3, #2
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c2a:	2219      	movs	r2, #25
 8002c2c:	2178      	movs	r1, #120	; 0x78
 8002c2e:	4814      	ldr	r0, [pc, #80]	; (8002c80 <main+0x1794>)
 8002c30:	f000 feec 	bl	8003a0c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("Time", 200, 25, WHITE, 2, BLACK);
 8002c34:	2300      	movs	r3, #0
 8002c36:	9301      	str	r3, [sp, #4]
 8002c38:	2302      	movs	r3, #2
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c40:	2219      	movs	r2, #25
 8002c42:	21c8      	movs	r1, #200	; 0xc8
 8002c44:	480f      	ldr	r0, [pc, #60]	; (8002c84 <main+0x1798>)
 8002c46:	f000 fee1 	bl	8003a0c <ILI9341_Draw_Text>

			//Draw player leaderboard
			for (int i = 0; i < playerLen; i++) {
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002c50:	e0cb      	b.n	8002dea <main+0x18fe>
 8002c52:	bf00      	nop
 8002c54:	20000320 	.word	0x20000320
 8002c58:	2000003c 	.word	0x2000003c
 8002c5c:	20000314 	.word	0x20000314
 8002c60:	08001489 	.word	0x08001489
 8002c64:	20000308 	.word	0x20000308
 8002c68:	2000030c 	.word	0x2000030c
 8002c6c:	20000318 	.word	0x20000318
 8002c70:	20000370 	.word	0x20000370
 8002c74:	200002a4 	.word	0x200002a4
 8002c78:	2000001e 	.word	0x2000001e
 8002c7c:	0800b4ac 	.word	0x0800b4ac
 8002c80:	0800b46c 	.word	0x0800b46c
 8002c84:	0800b4b4 	.word	0x0800b4b4
				memset(player1Name, 0, strlen(player1Name));
 8002c88:	4868      	ldr	r0, [pc, #416]	; (8002e2c <main+0x1940>)
 8002c8a:	f7fd fad9 	bl	8000240 <strlen>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	461a      	mov	r2, r3
 8002c92:	2100      	movs	r1, #0
 8002c94:	4865      	ldr	r0, [pc, #404]	; (8002e2c <main+0x1940>)
 8002c96:	f005 fb8f 	bl	80083b8 <memset>
				player1Len = EEPROM_Read_NUM(playerNumberSort[i][2], 0);
 8002c9a:	4965      	ldr	r1, [pc, #404]	; (8002e30 <main+0x1944>)
 8002c9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	4413      	add	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	3308      	adds	r3, #8
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fd fd7e 	bl	80007b4 <EEPROM_Read_NUM>
 8002cb8:	eef0 7a40 	vmov.f32	s15, s0
 8002cbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cc0:	ee17 2a90 	vmov	r2, s15
 8002cc4:	4b5b      	ldr	r3, [pc, #364]	; (8002e34 <main+0x1948>)
 8002cc6:	601a      	str	r2, [r3, #0]
				EEPROM_Read(playerNumberSort[i][2] + 1, 0, player1Name,
 8002cc8:	4959      	ldr	r1, [pc, #356]	; (8002e30 <main+0x1944>)
 8002cca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cce:	4613      	mov	r3, r2
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	4413      	add	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	3308      	adds	r3, #8
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	3301      	adds	r3, #1
 8002ce0:	b298      	uxth	r0, r3
 8002ce2:	4b54      	ldr	r3, [pc, #336]	; (8002e34 <main+0x1948>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	4a50      	ldr	r2, [pc, #320]	; (8002e2c <main+0x1940>)
 8002cea:	2100      	movs	r1, #0
 8002cec:	f7fd fd7e 	bl	80007ec <EEPROM_Read>
						player1Len);
				player1Score = EEPROM_Read_NUM(playerNumberSort[i][2] + 2, 0);
 8002cf0:	494f      	ldr	r1, [pc, #316]	; (8002e30 <main+0x1944>)
 8002cf2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	4413      	add	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	440b      	add	r3, r1
 8002d00:	3308      	adds	r3, #8
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	3302      	adds	r3, #2
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fd fd51 	bl	80007b4 <EEPROM_Read_NUM>
 8002d12:	eef0 7a40 	vmov.f32	s15, s0
 8002d16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d1a:	ee17 2a90 	vmov	r2, s15
 8002d1e:	4b46      	ldr	r3, [pc, #280]	; (8002e38 <main+0x194c>)
 8002d20:	601a      	str	r2, [r3, #0]
				player1Time = EEPROM_Read_NUM(playerNumberSort[i][2] + 3, 0);
 8002d22:	4943      	ldr	r1, [pc, #268]	; (8002e30 <main+0x1944>)
 8002d24:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d28:	4613      	mov	r3, r2
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	3308      	adds	r3, #8
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	3303      	adds	r3, #3
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fd fd38 	bl	80007b4 <EEPROM_Read_NUM>
 8002d44:	eef0 7a40 	vmov.f32	s15, s0
 8002d48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d4c:	ee17 2a90 	vmov	r2, s15
 8002d50:	4b3a      	ldr	r3, [pc, #232]	; (8002e3c <main+0x1950>)
 8002d52:	601a      	str	r2, [r3, #0]

				char str[10];
				sprintf(str, "%d.", i + 1);
 8002d54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002d5e:	4938      	ldr	r1, [pc, #224]	; (8002e40 <main+0x1954>)
 8002d60:	4618      	mov	r0, r3
 8002d62:	f006 f939 	bl	8008fd8 <siprintf>
				ILI9341_Draw_Text(str, 25, num4y, WHITE, 2, BLACK);
 8002d66:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 8002d6a:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8002d6e:	2300      	movs	r3, #0
 8002d70:	9301      	str	r3, [sp, #4]
 8002d72:	2302      	movs	r3, #2
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d7a:	2119      	movs	r1, #25
 8002d7c:	f000 fe46 	bl	8003a0c <ILI9341_Draw_Text>
				ILI9341_Draw_Text(player1Name, 45, num4y, WHITE, 2,
 8002d80:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 8002d84:	2300      	movs	r3, #0
 8002d86:	9301      	str	r3, [sp, #4]
 8002d88:	2302      	movs	r3, #2
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d90:	212d      	movs	r1, #45	; 0x2d
 8002d92:	4826      	ldr	r0, [pc, #152]	; (8002e2c <main+0x1940>)
 8002d94:	f000 fe3a 	bl	8003a0c <ILI9341_Draw_Text>
				BLACK);
				char str1[10];
				sprintf(str1, "%.4d", player1Score);
 8002d98:	4b27      	ldr	r3, [pc, #156]	; (8002e38 <main+0x194c>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002da0:	4928      	ldr	r1, [pc, #160]	; (8002e44 <main+0x1958>)
 8002da2:	4618      	mov	r0, r3
 8002da4:	f006 f918 	bl	8008fd8 <siprintf>
				ILI9341_Draw_Text(str1, 120, num4y, WHITE, 2, BLACK);
 8002da8:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 8002dac:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8002db0:	2300      	movs	r3, #0
 8002db2:	9301      	str	r3, [sp, #4]
 8002db4:	2302      	movs	r3, #2
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dbc:	2178      	movs	r1, #120	; 0x78
 8002dbe:	f000 fe25 	bl	8003a0c <ILI9341_Draw_Text>
				displayPlayerTime(player1Time, 200, num4y);
 8002dc2:	4b1e      	ldr	r3, [pc, #120]	; (8002e3c <main+0x1950>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	f897 20c7 	ldrb.w	r2, [r7, #199]	; 0xc7
 8002dcc:	b292      	uxth	r2, r2
 8002dce:	21c8      	movs	r1, #200	; 0xc8
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7fe f81d 	bl	8000e10 <displayPlayerTime>
				num4y += 35;
 8002dd6:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8002dda:	3323      	adds	r3, #35	; 0x23
 8002ddc:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
			for (int i = 0; i < playerLen; i++) {
 8002de0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002de4:	3301      	adds	r3, #1
 8002de6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002dea:	4b17      	ldr	r3, [pc, #92]	; (8002e48 <main+0x195c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002df2:	429a      	cmp	r2, r3
 8002df4:	f6ff af48 	blt.w	8002c88 <main+0x179c>
			}
			while (1) {
				if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_5) == GPIO_PIN_RESET
 8002df8:	2120      	movs	r1, #32
 8002dfa:	4814      	ldr	r0, [pc, #80]	; (8002e4c <main+0x1960>)
 8002dfc:	f001 fe16 	bl	8004a2c <HAL_GPIO_ReadPin>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d006      	beq.n	8002e14 <main+0x1928>
						|| HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_2) == GPIO_PIN_RESET)				//A,B
 8002e06:	2104      	movs	r1, #4
 8002e08:	4810      	ldr	r0, [pc, #64]	; (8002e4c <main+0x1960>)
 8002e0a:	f001 fe0f 	bl	8004a2c <HAL_GPIO_ReadPin>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1f1      	bne.n	8002df8 <main+0x190c>
								{
					stage = 0;
 8002e14:	4b0e      	ldr	r3, [pc, #56]	; (8002e50 <main+0x1964>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	801a      	strh	r2, [r3, #0]
					ILI9341_Fill_Screen(BLACK);
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	f001 f962 	bl	80040e4 <ILI9341_Fill_Screen>
					initMenu = 1;
 8002e20:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <main+0x1968>)
 8002e22:	2201      	movs	r2, #1
 8002e24:	801a      	strh	r2, [r3, #0]
					break;
 8002e26:	bf00      	nop
		if (stage == 0) {
 8002e28:	f7fe bb9d 	b.w	8001566 <main+0x7a>
 8002e2c:	20000360 	.word	0x20000360
 8002e30:	20000320 	.word	0x20000320
 8002e34:	2000035c 	.word	0x2000035c
 8002e38:	20000368 	.word	0x20000368
 8002e3c:	2000036c 	.word	0x2000036c
 8002e40:	0800b4bc 	.word	0x0800b4bc
 8002e44:	0800b480 	.word	0x0800b480
 8002e48:	20000314 	.word	0x20000314
 8002e4c:	40021400 	.word	0x40021400
 8002e50:	200002a4 	.word	0x200002a4
 8002e54:	2000001e 	.word	0x2000001e

08002e58 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b094      	sub	sp, #80	; 0x50
 8002e5c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002e5e:	f107 031c 	add.w	r3, r7, #28
 8002e62:	2234      	movs	r2, #52	; 0x34
 8002e64:	2100      	movs	r1, #0
 8002e66:	4618      	mov	r0, r3
 8002e68:	f005 faa6 	bl	80083b8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002e6c:	f107 0308 	add.w	r3, r7, #8
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	605a      	str	r2, [r3, #4]
 8002e76:	609a      	str	r2, [r3, #8]
 8002e78:	60da      	str	r2, [r3, #12]
 8002e7a:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8002e7c:	f002 fc10 	bl	80056a0 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002e80:	4b2b      	ldr	r3, [pc, #172]	; (8002f30 <SystemClock_Config+0xd8>)
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	4a2a      	ldr	r2, [pc, #168]	; (8002f30 <SystemClock_Config+0xd8>)
 8002e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e8c:	4b28      	ldr	r3, [pc, #160]	; (8002f30 <SystemClock_Config+0xd8>)
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e94:	607b      	str	r3, [r7, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e98:	4b26      	ldr	r3, [pc, #152]	; (8002f34 <SystemClock_Config+0xdc>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a25      	ldr	r2, [pc, #148]	; (8002f34 <SystemClock_Config+0xdc>)
 8002e9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ea2:	6013      	str	r3, [r2, #0]
 8002ea4:	4b23      	ldr	r3, [pc, #140]	; (8002f34 <SystemClock_Config+0xdc>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002eac:	603b      	str	r3, [r7, #0]
 8002eae:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002eb4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002eb8:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ebe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ec2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8002ec4:	2304      	movs	r3, #4
 8002ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 216;
 8002ec8:	23d8      	movs	r3, #216	; 0xd8
 8002eca:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ecc:	2302      	movs	r3, #2
 8002ece:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8002ed0:	2309      	movs	r3, #9
 8002ed2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002ed8:	f107 031c 	add.w	r3, r7, #28
 8002edc:	4618      	mov	r0, r3
 8002ede:	f002 fc3f 	bl	8005760 <HAL_RCC_OscConfig>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <SystemClock_Config+0x94>
		Error_Handler();
 8002ee8:	f000 f83e 	bl	8002f68 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8002eec:	f002 fbe8 	bl	80056c0 <HAL_PWREx_EnableOverDrive>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <SystemClock_Config+0xa2>
		Error_Handler();
 8002ef6:	f000 f837 	bl	8002f68 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002efa:	230f      	movs	r3, #15
 8002efc:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002efe:	2302      	movs	r3, #2
 8002f00:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f02:	2300      	movs	r3, #0
 8002f04:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f06:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f0a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f10:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 8002f12:	f107 0308 	add.w	r3, r7, #8
 8002f16:	2107      	movs	r1, #7
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f002 fecf 	bl	8005cbc <HAL_RCC_ClockConfig>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <SystemClock_Config+0xd0>
		Error_Handler();
 8002f24:	f000 f820 	bl	8002f68 <Error_Handler>
	}
}
 8002f28:	bf00      	nop
 8002f2a:	3750      	adds	r7, #80	; 0x50
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40007000 	.word	0x40007000

08002f38 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 8002f42:	88fb      	ldrh	r3, [r7, #6]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d106      	bne.n	8002f56 <HAL_GPIO_EXTI_Callback+0x1e>
		if (stage == 1) {
 8002f48:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d102      	bne.n	8002f56 <HAL_GPIO_EXTI_Callback+0x1e>
			stage = 2;
 8002f50:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002f52:	2202      	movs	r2, #2
 8002f54:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	200002a4 	.word	0x200002a4

08002f68 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 8002f6c:	e7fe      	b.n	8002f6c <Error_Handler+0x4>
	...

08002f70 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002f74:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <MX_RNG_Init+0x20>)
 8002f76:	4a07      	ldr	r2, [pc, #28]	; (8002f94 <MX_RNG_Init+0x24>)
 8002f78:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002f7a:	4805      	ldr	r0, [pc, #20]	; (8002f90 <MX_RNG_Init+0x20>)
 8002f7c:	f003 fcec 	bl	8006958 <HAL_RNG_Init>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002f86:	f7ff ffef 	bl	8002f68 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002f8a:	bf00      	nop
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000374 	.word	0x20000374
 8002f94:	50060800 	.word	0x50060800

08002f98 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b0a8      	sub	sp, #160	; 0xa0
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fa0:	f107 0310 	add.w	r3, r7, #16
 8002fa4:	2290      	movs	r2, #144	; 0x90
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f005 fa05 	bl	80083b8 <memset>
  if(rngHandle->Instance==RNG)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a11      	ldr	r2, [pc, #68]	; (8002ff8 <HAL_RNG_MspInit+0x60>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d11b      	bne.n	8002ff0 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002fb8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002fbc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fc4:	f107 0310 	add.w	r3, r7, #16
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f003 f89d 	bl	8006108 <HAL_RCCEx_PeriphCLKConfig>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8002fd4:	f7ff ffc8 	bl	8002f68 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002fd8:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <HAL_RNG_MspInit+0x64>)
 8002fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fdc:	4a07      	ldr	r2, [pc, #28]	; (8002ffc <HAL_RNG_MspInit+0x64>)
 8002fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fe2:	6353      	str	r3, [r2, #52]	; 0x34
 8002fe4:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <HAL_RNG_MspInit+0x64>)
 8002fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8002ff0:	bf00      	nop
 8002ff2:	37a0      	adds	r7, #160	; 0xa0
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	50060800 	.word	0x50060800
 8002ffc:	40023800 	.word	0x40023800

08003000 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8003004:	4b1b      	ldr	r3, [pc, #108]	; (8003074 <MX_SPI5_Init+0x74>)
 8003006:	4a1c      	ldr	r2, [pc, #112]	; (8003078 <MX_SPI5_Init+0x78>)
 8003008:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800300a:	4b1a      	ldr	r3, [pc, #104]	; (8003074 <MX_SPI5_Init+0x74>)
 800300c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003010:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003012:	4b18      	ldr	r3, [pc, #96]	; (8003074 <MX_SPI5_Init+0x74>)
 8003014:	2200      	movs	r2, #0
 8003016:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003018:	4b16      	ldr	r3, [pc, #88]	; (8003074 <MX_SPI5_Init+0x74>)
 800301a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800301e:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003020:	4b14      	ldr	r3, [pc, #80]	; (8003074 <MX_SPI5_Init+0x74>)
 8003022:	2200      	movs	r2, #0
 8003024:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003026:	4b13      	ldr	r3, [pc, #76]	; (8003074 <MX_SPI5_Init+0x74>)
 8003028:	2200      	movs	r2, #0
 800302a:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800302c:	4b11      	ldr	r3, [pc, #68]	; (8003074 <MX_SPI5_Init+0x74>)
 800302e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003032:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003034:	4b0f      	ldr	r3, [pc, #60]	; (8003074 <MX_SPI5_Init+0x74>)
 8003036:	2200      	movs	r2, #0
 8003038:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800303a:	4b0e      	ldr	r3, [pc, #56]	; (8003074 <MX_SPI5_Init+0x74>)
 800303c:	2200      	movs	r2, #0
 800303e:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003040:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <MX_SPI5_Init+0x74>)
 8003042:	2200      	movs	r2, #0
 8003044:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003046:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <MX_SPI5_Init+0x74>)
 8003048:	2200      	movs	r2, #0
 800304a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 800304c:	4b09      	ldr	r3, [pc, #36]	; (8003074 <MX_SPI5_Init+0x74>)
 800304e:	2207      	movs	r2, #7
 8003050:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003052:	4b08      	ldr	r3, [pc, #32]	; (8003074 <MX_SPI5_Init+0x74>)
 8003054:	2200      	movs	r2, #0
 8003056:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003058:	4b06      	ldr	r3, [pc, #24]	; (8003074 <MX_SPI5_Init+0x74>)
 800305a:	2200      	movs	r2, #0
 800305c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800305e:	4805      	ldr	r0, [pc, #20]	; (8003074 <MX_SPI5_Init+0x74>)
 8003060:	f003 fca4 	bl	80069ac <HAL_SPI_Init>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 800306a:	f7ff ff7d 	bl	8002f68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800306e:	bf00      	nop
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	20000384 	.word	0x20000384
 8003078:	40015000 	.word	0x40015000

0800307c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b08a      	sub	sp, #40	; 0x28
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003084:	f107 0314 	add.w	r3, r7, #20
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	605a      	str	r2, [r3, #4]
 800308e:	609a      	str	r2, [r3, #8]
 8003090:	60da      	str	r2, [r3, #12]
 8003092:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a17      	ldr	r2, [pc, #92]	; (80030f8 <HAL_SPI_MspInit+0x7c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d128      	bne.n	80030f0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800309e:	4b17      	ldr	r3, [pc, #92]	; (80030fc <HAL_SPI_MspInit+0x80>)
 80030a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a2:	4a16      	ldr	r2, [pc, #88]	; (80030fc <HAL_SPI_MspInit+0x80>)
 80030a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030a8:	6453      	str	r3, [r2, #68]	; 0x44
 80030aa:	4b14      	ldr	r3, [pc, #80]	; (80030fc <HAL_SPI_MspInit+0x80>)
 80030ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030b2:	613b      	str	r3, [r7, #16]
 80030b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80030b6:	4b11      	ldr	r3, [pc, #68]	; (80030fc <HAL_SPI_MspInit+0x80>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	4a10      	ldr	r2, [pc, #64]	; (80030fc <HAL_SPI_MspInit+0x80>)
 80030bc:	f043 0320 	orr.w	r3, r3, #32
 80030c0:	6313      	str	r3, [r2, #48]	; 0x30
 80030c2:	4b0e      	ldr	r3, [pc, #56]	; (80030fc <HAL_SPI_MspInit+0x80>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	f003 0320 	and.w	r3, r3, #32
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80030ce:	f44f 7360 	mov.w	r3, #896	; 0x380
 80030d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d4:	2302      	movs	r3, #2
 80030d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d8:	2300      	movs	r3, #0
 80030da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030dc:	2303      	movs	r3, #3
 80030de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80030e0:	2305      	movs	r3, #5
 80030e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80030e4:	f107 0314 	add.w	r3, r7, #20
 80030e8:	4619      	mov	r1, r3
 80030ea:	4805      	ldr	r0, [pc, #20]	; (8003100 <HAL_SPI_MspInit+0x84>)
 80030ec:	f001 faf2 	bl	80046d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80030f0:	bf00      	nop
 80030f2:	3728      	adds	r7, #40	; 0x28
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40015000 	.word	0x40015000
 80030fc:	40023800 	.word	0x40023800
 8003100:	40021400 	.word	0x40021400

08003104 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800310a:	4b0f      	ldr	r3, [pc, #60]	; (8003148 <HAL_MspInit+0x44>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	4a0e      	ldr	r2, [pc, #56]	; (8003148 <HAL_MspInit+0x44>)
 8003110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003114:	6413      	str	r3, [r2, #64]	; 0x40
 8003116:	4b0c      	ldr	r3, [pc, #48]	; (8003148 <HAL_MspInit+0x44>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311e:	607b      	str	r3, [r7, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003122:	4b09      	ldr	r3, [pc, #36]	; (8003148 <HAL_MspInit+0x44>)
 8003124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003126:	4a08      	ldr	r2, [pc, #32]	; (8003148 <HAL_MspInit+0x44>)
 8003128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800312c:	6453      	str	r3, [r2, #68]	; 0x44
 800312e:	4b06      	ldr	r3, [pc, #24]	; (8003148 <HAL_MspInit+0x44>)
 8003130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	40023800 	.word	0x40023800

0800314c <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003150:	f001 f96a 	bl	8004428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003154:	bf00      	nop
 8003156:	bd80      	pop	{r7, pc}

08003158 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800315c:	2001      	movs	r0, #1
 800315e:	f001 fc97 	bl	8004a90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003162:	bf00      	nop
 8003164:	bd80      	pop	{r7, pc}
	...

08003168 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800316c:	4808      	ldr	r0, [pc, #32]	; (8003190 <TIM2_IRQHandler+0x28>)
 800316e:	f004 f88f 	bl	8007290 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  if(stage == 1){
 8003172:	4b08      	ldr	r3, [pc, #32]	; (8003194 <TIM2_IRQHandler+0x2c>)
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d108      	bne.n	800318c <TIM2_IRQHandler+0x24>
	  bullet = moveBullet(bullet);
 800317a:	4b07      	ldr	r3, [pc, #28]	; (8003198 <TIM2_IRQHandler+0x30>)
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7fe f872 	bl	8001268 <moveBullet>
 8003184:	4603      	mov	r3, r0
 8003186:	b29a      	uxth	r2, r3
 8003188:	4b03      	ldr	r3, [pc, #12]	; (8003198 <TIM2_IRQHandler+0x30>)
 800318a:	801a      	strh	r2, [r3, #0]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 800318c:	bf00      	nop
 800318e:	bd80      	pop	{r7, pc}
 8003190:	20000438 	.word	0x20000438
 8003194:	200002a4 	.word	0x200002a4
 8003198:	200002ae 	.word	0x200002ae

0800319c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80031a0:	4805      	ldr	r0, [pc, #20]	; (80031b8 <TIM3_IRQHandler+0x1c>)
 80031a2:	f004 f875 	bl	8007290 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  if(stage == 1){
 80031a6:	4b05      	ldr	r3, [pc, #20]	; (80031bc <TIM3_IRQHandler+0x20>)
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <TIM3_IRQHandler+0x16>
	  controlSpaceship();
 80031ae:	f7fe f8f1 	bl	8001394 <controlSpaceship>
  }
  /* USER CODE END TIM3_IRQn 1 */
}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20000484 	.word	0x20000484
 80031bc:	200002a4 	.word	0x200002a4

080031c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80031c4:	480d      	ldr	r0, [pc, #52]	; (80031fc <TIM4_IRQHandler+0x3c>)
 80031c6:	f004 f863 	bl	8007290 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  	second++;
 80031ca:	4b0d      	ldr	r3, [pc, #52]	; (8003200 <TIM4_IRQHandler+0x40>)
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	3301      	adds	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <TIM4_IRQHandler+0x40>)
 80031d4:	801a      	strh	r2, [r3, #0]
  	displayTime(second, 200, 0);
 80031d6:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <TIM4_IRQHandler+0x40>)
 80031d8:	881b      	ldrh	r3, [r3, #0]
 80031da:	2200      	movs	r2, #0
 80031dc:	21c8      	movs	r1, #200	; 0xc8
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fd fdd4 	bl	8000d8c <displayTime>
  	if(stage != 1){
 80031e4:	4b07      	ldr	r3, [pc, #28]	; (8003204 <TIM4_IRQHandler+0x44>)
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d005      	beq.n	80031f8 <TIM4_IRQHandler+0x38>
  		second -=1;
 80031ec:	4b04      	ldr	r3, [pc, #16]	; (8003200 <TIM4_IRQHandler+0x40>)
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	4b02      	ldr	r3, [pc, #8]	; (8003200 <TIM4_IRQHandler+0x40>)
 80031f6:	801a      	strh	r2, [r3, #0]
  	}
  /* USER CODE END TIM4_IRQn 1 */
}
 80031f8:	bf00      	nop
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	200004d0 	.word	0x200004d0
 8003200:	2000030c 	.word	0x2000030c
 8003204:	200002a4 	.word	0x200002a4

08003208 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
	return 1;
 800320c:	2301      	movs	r3, #1
}
 800320e:	4618      	mov	r0, r3
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <_kill>:

int _kill(int pid, int sig)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003222:	f005 f89f 	bl	8008364 <__errno>
 8003226:	4603      	mov	r3, r0
 8003228:	2216      	movs	r2, #22
 800322a:	601a      	str	r2, [r3, #0]
	return -1;
 800322c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003230:	4618      	mov	r0, r3
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <_exit>:

void _exit (int status)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003240:	f04f 31ff 	mov.w	r1, #4294967295
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f7ff ffe7 	bl	8003218 <_kill>
	while (1) {}		/* Make sure we hang here */
 800324a:	e7fe      	b.n	800324a <_exit+0x12>

0800324c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	e00a      	b.n	8003274 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800325e:	f3af 8000 	nop.w
 8003262:	4601      	mov	r1, r0
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	60ba      	str	r2, [r7, #8]
 800326a:	b2ca      	uxtb	r2, r1
 800326c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	3301      	adds	r3, #1
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	429a      	cmp	r2, r3
 800327a:	dbf0      	blt.n	800325e <_read+0x12>
	}

return len;
 800327c:	687b      	ldr	r3, [r7, #4]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b086      	sub	sp, #24
 800328a:	af00      	add	r7, sp, #0
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003292:	2300      	movs	r3, #0
 8003294:	617b      	str	r3, [r7, #20]
 8003296:	e009      	b.n	80032ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	60ba      	str	r2, [r7, #8]
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	3301      	adds	r3, #1
 80032aa:	617b      	str	r3, [r7, #20]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	dbf1      	blt.n	8003298 <_write+0x12>
	}
	return len;
 80032b4:	687b      	ldr	r3, [r7, #4]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <_close>:

int _close(int file)
{
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
	return -1;
 80032c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032e6:	605a      	str	r2, [r3, #4]
	return 0;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <_isatty>:

int _isatty(int file)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
	return 1;
 80032fe:	2301      	movs	r3, #1
}
 8003300:	4618      	mov	r0, r3
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
	return 0;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
	...

08003328 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003330:	4a14      	ldr	r2, [pc, #80]	; (8003384 <_sbrk+0x5c>)
 8003332:	4b15      	ldr	r3, [pc, #84]	; (8003388 <_sbrk+0x60>)
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800333c:	4b13      	ldr	r3, [pc, #76]	; (800338c <_sbrk+0x64>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d102      	bne.n	800334a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003344:	4b11      	ldr	r3, [pc, #68]	; (800338c <_sbrk+0x64>)
 8003346:	4a12      	ldr	r2, [pc, #72]	; (8003390 <_sbrk+0x68>)
 8003348:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800334a:	4b10      	ldr	r3, [pc, #64]	; (800338c <_sbrk+0x64>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	429a      	cmp	r2, r3
 8003356:	d207      	bcs.n	8003368 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003358:	f005 f804 	bl	8008364 <__errno>
 800335c:	4603      	mov	r3, r0
 800335e:	220c      	movs	r2, #12
 8003360:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003362:	f04f 33ff 	mov.w	r3, #4294967295
 8003366:	e009      	b.n	800337c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003368:	4b08      	ldr	r3, [pc, #32]	; (800338c <_sbrk+0x64>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800336e:	4b07      	ldr	r3, [pc, #28]	; (800338c <_sbrk+0x64>)
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4413      	add	r3, r2
 8003376:	4a05      	ldr	r2, [pc, #20]	; (800338c <_sbrk+0x64>)
 8003378:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800337a:	68fb      	ldr	r3, [r7, #12]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3718      	adds	r7, #24
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	20080000 	.word	0x20080000
 8003388:	00000400 	.word	0x00000400
 800338c:	200003e8 	.word	0x200003e8
 8003390:	200005b8 	.word	0x200005b8

08003394 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003398:	4b15      	ldr	r3, [pc, #84]	; (80033f0 <SystemInit+0x5c>)
 800339a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339e:	4a14      	ldr	r2, [pc, #80]	; (80033f0 <SystemInit+0x5c>)
 80033a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80033a8:	4b12      	ldr	r3, [pc, #72]	; (80033f4 <SystemInit+0x60>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a11      	ldr	r2, [pc, #68]	; (80033f4 <SystemInit+0x60>)
 80033ae:	f043 0301 	orr.w	r3, r3, #1
 80033b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80033b4:	4b0f      	ldr	r3, [pc, #60]	; (80033f4 <SystemInit+0x60>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80033ba:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <SystemInit+0x60>)
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	490d      	ldr	r1, [pc, #52]	; (80033f4 <SystemInit+0x60>)
 80033c0:	4b0d      	ldr	r3, [pc, #52]	; (80033f8 <SystemInit+0x64>)
 80033c2:	4013      	ands	r3, r2
 80033c4:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80033c6:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <SystemInit+0x60>)
 80033c8:	4a0c      	ldr	r2, [pc, #48]	; (80033fc <SystemInit+0x68>)
 80033ca:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80033cc:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <SystemInit+0x60>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a08      	ldr	r2, [pc, #32]	; (80033f4 <SystemInit+0x60>)
 80033d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <SystemInit+0x60>)
 80033da:	2200      	movs	r2, #0
 80033dc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80033de:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <SystemInit+0x5c>)
 80033e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033e4:	609a      	str	r2, [r3, #8]
#endif
}
 80033e6:	bf00      	nop
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	e000ed00 	.word	0xe000ed00
 80033f4:	40023800 	.word	0x40023800
 80033f8:	fef6ffff 	.word	0xfef6ffff
 80033fc:	24003010 	.word	0x24003010

08003400 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b088      	sub	sp, #32
 8003404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003406:	f107 0310 	add.w	r3, r7, #16
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	605a      	str	r2, [r3, #4]
 8003410:	609a      	str	r2, [r3, #8]
 8003412:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003414:	1d3b      	adds	r3, r7, #4
 8003416:	2200      	movs	r2, #0
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	605a      	str	r2, [r3, #4]
 800341c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800341e:	4b21      	ldr	r3, [pc, #132]	; (80034a4 <MX_TIM1_Init+0xa4>)
 8003420:	4a21      	ldr	r2, [pc, #132]	; (80034a8 <MX_TIM1_Init+0xa8>)
 8003422:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21600-1;
 8003424:	4b1f      	ldr	r3, [pc, #124]	; (80034a4 <MX_TIM1_Init+0xa4>)
 8003426:	f245 425f 	movw	r2, #21599	; 0x545f
 800342a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800342c:	4b1d      	ldr	r3, [pc, #116]	; (80034a4 <MX_TIM1_Init+0xa4>)
 800342e:	2200      	movs	r2, #0
 8003430:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8003432:	4b1c      	ldr	r3, [pc, #112]	; (80034a4 <MX_TIM1_Init+0xa4>)
 8003434:	f242 720f 	movw	r2, #9999	; 0x270f
 8003438:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800343a:	4b1a      	ldr	r3, [pc, #104]	; (80034a4 <MX_TIM1_Init+0xa4>)
 800343c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003440:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003442:	4b18      	ldr	r3, [pc, #96]	; (80034a4 <MX_TIM1_Init+0xa4>)
 8003444:	2200      	movs	r2, #0
 8003446:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003448:	4b16      	ldr	r3, [pc, #88]	; (80034a4 <MX_TIM1_Init+0xa4>)
 800344a:	2200      	movs	r2, #0
 800344c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800344e:	4815      	ldr	r0, [pc, #84]	; (80034a4 <MX_TIM1_Init+0xa4>)
 8003450:	f003 fe4e 	bl	80070f0 <HAL_TIM_Base_Init>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800345a:	f7ff fd85 	bl	8002f68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800345e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003462:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003464:	f107 0310 	add.w	r3, r7, #16
 8003468:	4619      	mov	r1, r3
 800346a:	480e      	ldr	r0, [pc, #56]	; (80034a4 <MX_TIM1_Init+0xa4>)
 800346c:	f004 f830 	bl	80074d0 <HAL_TIM_ConfigClockSource>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003476:	f7ff fd77 	bl	8002f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800347a:	2300      	movs	r3, #0
 800347c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800347e:	2300      	movs	r3, #0
 8003480:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003482:	2300      	movs	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003486:	1d3b      	adds	r3, r7, #4
 8003488:	4619      	mov	r1, r3
 800348a:	4806      	ldr	r0, [pc, #24]	; (80034a4 <MX_TIM1_Init+0xa4>)
 800348c:	f004 fa56 	bl	800793c <HAL_TIMEx_MasterConfigSynchronization>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8003496:	f7ff fd67 	bl	8002f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800349a:	bf00      	nop
 800349c:	3720      	adds	r7, #32
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	200003ec 	.word	0x200003ec
 80034a8:	40010000 	.word	0x40010000

080034ac <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034b2:	f107 0310 	add.w	r3, r7, #16
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	605a      	str	r2, [r3, #4]
 80034bc:	609a      	str	r2, [r3, #8]
 80034be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034c0:	1d3b      	adds	r3, r7, #4
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	605a      	str	r2, [r3, #4]
 80034c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80034ca:	4b1e      	ldr	r3, [pc, #120]	; (8003544 <MX_TIM2_Init+0x98>)
 80034cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 80034d2:	4b1c      	ldr	r3, [pc, #112]	; (8003544 <MX_TIM2_Init+0x98>)
 80034d4:	226b      	movs	r2, #107	; 0x6b
 80034d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034d8:	4b1a      	ldr	r3, [pc, #104]	; (8003544 <MX_TIM2_Init+0x98>)
 80034da:	2200      	movs	r2, #0
 80034dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 80034de:	4b19      	ldr	r3, [pc, #100]	; (8003544 <MX_TIM2_Init+0x98>)
 80034e0:	f241 3287 	movw	r2, #4999	; 0x1387
 80034e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034e6:	4b17      	ldr	r3, [pc, #92]	; (8003544 <MX_TIM2_Init+0x98>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034ec:	4b15      	ldr	r3, [pc, #84]	; (8003544 <MX_TIM2_Init+0x98>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80034f2:	4814      	ldr	r0, [pc, #80]	; (8003544 <MX_TIM2_Init+0x98>)
 80034f4:	f003 fdfc 	bl	80070f0 <HAL_TIM_Base_Init>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80034fe:	f7ff fd33 	bl	8002f68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003502:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003506:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003508:	f107 0310 	add.w	r3, r7, #16
 800350c:	4619      	mov	r1, r3
 800350e:	480d      	ldr	r0, [pc, #52]	; (8003544 <MX_TIM2_Init+0x98>)
 8003510:	f003 ffde 	bl	80074d0 <HAL_TIM_ConfigClockSource>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800351a:	f7ff fd25 	bl	8002f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800351e:	2300      	movs	r3, #0
 8003520:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003522:	2300      	movs	r3, #0
 8003524:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003526:	1d3b      	adds	r3, r7, #4
 8003528:	4619      	mov	r1, r3
 800352a:	4806      	ldr	r0, [pc, #24]	; (8003544 <MX_TIM2_Init+0x98>)
 800352c:	f004 fa06 	bl	800793c <HAL_TIMEx_MasterConfigSynchronization>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003536:	f7ff fd17 	bl	8002f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800353a:	bf00      	nop
 800353c:	3720      	adds	r7, #32
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	20000438 	.word	0x20000438

08003548 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b088      	sub	sp, #32
 800354c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800354e:	f107 0310 	add.w	r3, r7, #16
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	605a      	str	r2, [r3, #4]
 8003558:	609a      	str	r2, [r3, #8]
 800355a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800355c:	1d3b      	adds	r3, r7, #4
 800355e:	2200      	movs	r2, #0
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	605a      	str	r2, [r3, #4]
 8003564:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003566:	4b1d      	ldr	r3, [pc, #116]	; (80035dc <MX_TIM3_Init+0x94>)
 8003568:	4a1d      	ldr	r2, [pc, #116]	; (80035e0 <MX_TIM3_Init+0x98>)
 800356a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 108-1;
 800356c:	4b1b      	ldr	r3, [pc, #108]	; (80035dc <MX_TIM3_Init+0x94>)
 800356e:	226b      	movs	r2, #107	; 0x6b
 8003570:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003572:	4b1a      	ldr	r3, [pc, #104]	; (80035dc <MX_TIM3_Init+0x94>)
 8003574:	2200      	movs	r2, #0
 8003576:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8003578:	4b18      	ldr	r3, [pc, #96]	; (80035dc <MX_TIM3_Init+0x94>)
 800357a:	f242 720f 	movw	r2, #9999	; 0x270f
 800357e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003580:	4b16      	ldr	r3, [pc, #88]	; (80035dc <MX_TIM3_Init+0x94>)
 8003582:	2200      	movs	r2, #0
 8003584:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003586:	4b15      	ldr	r3, [pc, #84]	; (80035dc <MX_TIM3_Init+0x94>)
 8003588:	2200      	movs	r2, #0
 800358a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800358c:	4813      	ldr	r0, [pc, #76]	; (80035dc <MX_TIM3_Init+0x94>)
 800358e:	f003 fdaf 	bl	80070f0 <HAL_TIM_Base_Init>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003598:	f7ff fce6 	bl	8002f68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800359c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80035a2:	f107 0310 	add.w	r3, r7, #16
 80035a6:	4619      	mov	r1, r3
 80035a8:	480c      	ldr	r0, [pc, #48]	; (80035dc <MX_TIM3_Init+0x94>)
 80035aa:	f003 ff91 	bl	80074d0 <HAL_TIM_ConfigClockSource>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80035b4:	f7ff fcd8 	bl	8002f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035b8:	2300      	movs	r3, #0
 80035ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035bc:	2300      	movs	r3, #0
 80035be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80035c0:	1d3b      	adds	r3, r7, #4
 80035c2:	4619      	mov	r1, r3
 80035c4:	4805      	ldr	r0, [pc, #20]	; (80035dc <MX_TIM3_Init+0x94>)
 80035c6:	f004 f9b9 	bl	800793c <HAL_TIMEx_MasterConfigSynchronization>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80035d0:	f7ff fcca 	bl	8002f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80035d4:	bf00      	nop
 80035d6:	3720      	adds	r7, #32
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	20000484 	.word	0x20000484
 80035e0:	40000400 	.word	0x40000400

080035e4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b088      	sub	sp, #32
 80035e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035ea:	f107 0310 	add.w	r3, r7, #16
 80035ee:	2200      	movs	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	605a      	str	r2, [r3, #4]
 80035f4:	609a      	str	r2, [r3, #8]
 80035f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035f8:	1d3b      	adds	r3, r7, #4
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	605a      	str	r2, [r3, #4]
 8003600:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003602:	4b1e      	ldr	r3, [pc, #120]	; (800367c <MX_TIM4_Init+0x98>)
 8003604:	4a1e      	ldr	r2, [pc, #120]	; (8003680 <MX_TIM4_Init+0x9c>)
 8003606:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10800-1;
 8003608:	4b1c      	ldr	r3, [pc, #112]	; (800367c <MX_TIM4_Init+0x98>)
 800360a:	f642 222f 	movw	r2, #10799	; 0x2a2f
 800360e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003610:	4b1a      	ldr	r3, [pc, #104]	; (800367c <MX_TIM4_Init+0x98>)
 8003612:	2200      	movs	r2, #0
 8003614:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8003616:	4b19      	ldr	r3, [pc, #100]	; (800367c <MX_TIM4_Init+0x98>)
 8003618:	f242 720f 	movw	r2, #9999	; 0x270f
 800361c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800361e:	4b17      	ldr	r3, [pc, #92]	; (800367c <MX_TIM4_Init+0x98>)
 8003620:	2200      	movs	r2, #0
 8003622:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003624:	4b15      	ldr	r3, [pc, #84]	; (800367c <MX_TIM4_Init+0x98>)
 8003626:	2200      	movs	r2, #0
 8003628:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800362a:	4814      	ldr	r0, [pc, #80]	; (800367c <MX_TIM4_Init+0x98>)
 800362c:	f003 fd60 	bl	80070f0 <HAL_TIM_Base_Init>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8003636:	f7ff fc97 	bl	8002f68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800363a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800363e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003640:	f107 0310 	add.w	r3, r7, #16
 8003644:	4619      	mov	r1, r3
 8003646:	480d      	ldr	r0, [pc, #52]	; (800367c <MX_TIM4_Init+0x98>)
 8003648:	f003 ff42 	bl	80074d0 <HAL_TIM_ConfigClockSource>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8003652:	f7ff fc89 	bl	8002f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003656:	2300      	movs	r3, #0
 8003658:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800365a:	2300      	movs	r3, #0
 800365c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800365e:	1d3b      	adds	r3, r7, #4
 8003660:	4619      	mov	r1, r3
 8003662:	4806      	ldr	r0, [pc, #24]	; (800367c <MX_TIM4_Init+0x98>)
 8003664:	f004 f96a 	bl	800793c <HAL_TIMEx_MasterConfigSynchronization>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800366e:	f7ff fc7b 	bl	8002f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003672:	bf00      	nop
 8003674:	3720      	adds	r7, #32
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	200004d0 	.word	0x200004d0
 8003680:	40000800 	.word	0x40000800

08003684 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a30      	ldr	r2, [pc, #192]	; (8003754 <HAL_TIM_Base_MspInit+0xd0>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d10c      	bne.n	80036b0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003696:	4b30      	ldr	r3, [pc, #192]	; (8003758 <HAL_TIM_Base_MspInit+0xd4>)
 8003698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369a:	4a2f      	ldr	r2, [pc, #188]	; (8003758 <HAL_TIM_Base_MspInit+0xd4>)
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	6453      	str	r3, [r2, #68]	; 0x44
 80036a2:	4b2d      	ldr	r3, [pc, #180]	; (8003758 <HAL_TIM_Base_MspInit+0xd4>)
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80036ae:	e04c      	b.n	800374a <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM2)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b8:	d114      	bne.n	80036e4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036ba:	4b27      	ldr	r3, [pc, #156]	; (8003758 <HAL_TIM_Base_MspInit+0xd4>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	4a26      	ldr	r2, [pc, #152]	; (8003758 <HAL_TIM_Base_MspInit+0xd4>)
 80036c0:	f043 0301 	orr.w	r3, r3, #1
 80036c4:	6413      	str	r3, [r2, #64]	; 0x40
 80036c6:	4b24      	ldr	r3, [pc, #144]	; (8003758 <HAL_TIM_Base_MspInit+0xd4>)
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	613b      	str	r3, [r7, #16]
 80036d0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80036d2:	2200      	movs	r2, #0
 80036d4:	2103      	movs	r1, #3
 80036d6:	201c      	movs	r0, #28
 80036d8:	f000 ffc5 	bl	8004666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80036dc:	201c      	movs	r0, #28
 80036de:	f000 ffde 	bl	800469e <HAL_NVIC_EnableIRQ>
}
 80036e2:	e032      	b.n	800374a <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM3)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a1c      	ldr	r2, [pc, #112]	; (800375c <HAL_TIM_Base_MspInit+0xd8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d114      	bne.n	8003718 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036ee:	4b1a      	ldr	r3, [pc, #104]	; (8003758 <HAL_TIM_Base_MspInit+0xd4>)
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	4a19      	ldr	r2, [pc, #100]	; (8003758 <HAL_TIM_Base_MspInit+0xd4>)
 80036f4:	f043 0302 	orr.w	r3, r3, #2
 80036f8:	6413      	str	r3, [r2, #64]	; 0x40
 80036fa:	4b17      	ldr	r3, [pc, #92]	; (8003758 <HAL_TIM_Base_MspInit+0xd4>)
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 4, 0);
 8003706:	2200      	movs	r2, #0
 8003708:	2104      	movs	r1, #4
 800370a:	201d      	movs	r0, #29
 800370c:	f000 ffab 	bl	8004666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003710:	201d      	movs	r0, #29
 8003712:	f000 ffc4 	bl	800469e <HAL_NVIC_EnableIRQ>
}
 8003716:	e018      	b.n	800374a <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM4)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a10      	ldr	r2, [pc, #64]	; (8003760 <HAL_TIM_Base_MspInit+0xdc>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d113      	bne.n	800374a <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003722:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <HAL_TIM_Base_MspInit+0xd4>)
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	4a0c      	ldr	r2, [pc, #48]	; (8003758 <HAL_TIM_Base_MspInit+0xd4>)
 8003728:	f043 0304 	orr.w	r3, r3, #4
 800372c:	6413      	str	r3, [r2, #64]	; 0x40
 800372e:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <HAL_TIM_Base_MspInit+0xd4>)
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	f003 0304 	and.w	r3, r3, #4
 8003736:	60bb      	str	r3, [r7, #8]
 8003738:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 800373a:	2200      	movs	r2, #0
 800373c:	2102      	movs	r1, #2
 800373e:	201e      	movs	r0, #30
 8003740:	f000 ff91 	bl	8004666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003744:	201e      	movs	r0, #30
 8003746:	f000 ffaa 	bl	800469e <HAL_NVIC_EnableIRQ>
}
 800374a:	bf00      	nop
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40010000 	.word	0x40010000
 8003758:	40023800 	.word	0x40023800
 800375c:	40000400 	.word	0x40000400
 8003760:	40000800 	.word	0x40000800

08003764 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003768:	4b14      	ldr	r3, [pc, #80]	; (80037bc <MX_USART3_UART_Init+0x58>)
 800376a:	4a15      	ldr	r2, [pc, #84]	; (80037c0 <MX_USART3_UART_Init+0x5c>)
 800376c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800376e:	4b13      	ldr	r3, [pc, #76]	; (80037bc <MX_USART3_UART_Init+0x58>)
 8003770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003774:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003776:	4b11      	ldr	r3, [pc, #68]	; (80037bc <MX_USART3_UART_Init+0x58>)
 8003778:	2200      	movs	r2, #0
 800377a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800377c:	4b0f      	ldr	r3, [pc, #60]	; (80037bc <MX_USART3_UART_Init+0x58>)
 800377e:	2200      	movs	r2, #0
 8003780:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003782:	4b0e      	ldr	r3, [pc, #56]	; (80037bc <MX_USART3_UART_Init+0x58>)
 8003784:	2200      	movs	r2, #0
 8003786:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003788:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <MX_USART3_UART_Init+0x58>)
 800378a:	220c      	movs	r2, #12
 800378c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800378e:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <MX_USART3_UART_Init+0x58>)
 8003790:	2200      	movs	r2, #0
 8003792:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003794:	4b09      	ldr	r3, [pc, #36]	; (80037bc <MX_USART3_UART_Init+0x58>)
 8003796:	2200      	movs	r2, #0
 8003798:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800379a:	4b08      	ldr	r3, [pc, #32]	; (80037bc <MX_USART3_UART_Init+0x58>)
 800379c:	2200      	movs	r2, #0
 800379e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037a0:	4b06      	ldr	r3, [pc, #24]	; (80037bc <MX_USART3_UART_Init+0x58>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80037a6:	4805      	ldr	r0, [pc, #20]	; (80037bc <MX_USART3_UART_Init+0x58>)
 80037a8:	f004 f974 	bl	8007a94 <HAL_UART_Init>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80037b2:	f7ff fbd9 	bl	8002f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80037b6:	bf00      	nop
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	2000051c 	.word	0x2000051c
 80037c0:	40004800 	.word	0x40004800

080037c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b0ae      	sub	sp, #184	; 0xb8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	605a      	str	r2, [r3, #4]
 80037d6:	609a      	str	r2, [r3, #8]
 80037d8:	60da      	str	r2, [r3, #12]
 80037da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80037dc:	f107 0314 	add.w	r3, r7, #20
 80037e0:	2290      	movs	r2, #144	; 0x90
 80037e2:	2100      	movs	r1, #0
 80037e4:	4618      	mov	r0, r3
 80037e6:	f004 fde7 	bl	80083b8 <memset>
  if(uartHandle->Instance==USART3)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a22      	ldr	r2, [pc, #136]	; (8003878 <HAL_UART_MspInit+0xb4>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d13c      	bne.n	800386e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80037f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037f8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80037fa:	2300      	movs	r3, #0
 80037fc:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037fe:	f107 0314 	add.w	r3, r7, #20
 8003802:	4618      	mov	r0, r3
 8003804:	f002 fc80 	bl	8006108 <HAL_RCCEx_PeriphCLKConfig>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800380e:	f7ff fbab 	bl	8002f68 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003812:	4b1a      	ldr	r3, [pc, #104]	; (800387c <HAL_UART_MspInit+0xb8>)
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	4a19      	ldr	r2, [pc, #100]	; (800387c <HAL_UART_MspInit+0xb8>)
 8003818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800381c:	6413      	str	r3, [r2, #64]	; 0x40
 800381e:	4b17      	ldr	r3, [pc, #92]	; (800387c <HAL_UART_MspInit+0xb8>)
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003826:	613b      	str	r3, [r7, #16]
 8003828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800382a:	4b14      	ldr	r3, [pc, #80]	; (800387c <HAL_UART_MspInit+0xb8>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	4a13      	ldr	r2, [pc, #76]	; (800387c <HAL_UART_MspInit+0xb8>)
 8003830:	f043 0308 	orr.w	r3, r3, #8
 8003834:	6313      	str	r3, [r2, #48]	; 0x30
 8003836:	4b11      	ldr	r3, [pc, #68]	; (800387c <HAL_UART_MspInit+0xb8>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003842:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003846:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384a:	2302      	movs	r3, #2
 800384c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003850:	2300      	movs	r3, #0
 8003852:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003856:	2303      	movs	r3, #3
 8003858:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800385c:	2307      	movs	r3, #7
 800385e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003862:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003866:	4619      	mov	r1, r3
 8003868:	4805      	ldr	r0, [pc, #20]	; (8003880 <HAL_UART_MspInit+0xbc>)
 800386a:	f000 ff33 	bl	80046d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800386e:	bf00      	nop
 8003870:	37b8      	adds	r7, #184	; 0xb8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40004800 	.word	0x40004800
 800387c:	40023800 	.word	0x40023800
 8003880:	40020c00 	.word	0x40020c00

08003884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003884:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003888:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800388a:	e003      	b.n	8003894 <LoopCopyDataInit>

0800388c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800388c:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800388e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003890:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003892:	3104      	adds	r1, #4

08003894 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003894:	480b      	ldr	r0, [pc, #44]	; (80038c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003896:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003898:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800389a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800389c:	d3f6      	bcc.n	800388c <CopyDataInit>
  ldr  r2, =_sbss
 800389e:	4a0b      	ldr	r2, [pc, #44]	; (80038cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80038a0:	e002      	b.n	80038a8 <LoopFillZerobss>

080038a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80038a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80038a4:	f842 3b04 	str.w	r3, [r2], #4

080038a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80038a8:	4b09      	ldr	r3, [pc, #36]	; (80038d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80038aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80038ac:	d3f9      	bcc.n	80038a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80038ae:	f7ff fd71 	bl	8003394 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038b2:	f004 fd5d 	bl	8008370 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038b6:	f7fd fe19 	bl	80014ec <main>
  bx  lr    
 80038ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80038bc:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80038c0:	0800c8d4 	.word	0x0800c8d4
  ldr  r0, =_sdata
 80038c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80038c8:	20000230 	.word	0x20000230
  ldr  r2, =_sbss
 80038cc:	20000230 	.word	0x20000230
  ldr  r3, = _ebss
 80038d0:	200005b8 	.word	0x200005b8

080038d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038d4:	e7fe      	b.n	80038d4 <ADC_IRQHandler>
	...

080038d8 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 80038d8:	b590      	push	{r4, r7, lr}
 80038da:	b089      	sub	sp, #36	; 0x24
 80038dc:	af02      	add	r7, sp, #8
 80038de:	4604      	mov	r4, r0
 80038e0:	4608      	mov	r0, r1
 80038e2:	4611      	mov	r1, r2
 80038e4:	461a      	mov	r2, r3
 80038e6:	4623      	mov	r3, r4
 80038e8:	71fb      	strb	r3, [r7, #7]
 80038ea:	4603      	mov	r3, r0
 80038ec:	71bb      	strb	r3, [r7, #6]
 80038ee:	460b      	mov	r3, r1
 80038f0:	717b      	strb	r3, [r7, #5]
 80038f2:	4613      	mov	r3, r2
 80038f4:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 80038f6:	79fb      	ldrb	r3, [r7, #7]
 80038f8:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 80038fa:	7dfb      	ldrb	r3, [r7, #23]
 80038fc:	2b1f      	cmp	r3, #31
 80038fe:	d802      	bhi.n	8003906 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8003900:	2300      	movs	r3, #0
 8003902:	71fb      	strb	r3, [r7, #7]
 8003904:	e002      	b.n	800390c <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8003906:	7dfb      	ldrb	r3, [r7, #23]
 8003908:	3b20      	subs	r3, #32
 800390a:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800390c:	2300      	movs	r3, #0
 800390e:	753b      	strb	r3, [r7, #20]
 8003910:	e012      	b.n	8003938 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8003912:	7dfa      	ldrb	r2, [r7, #23]
 8003914:	7d38      	ldrb	r0, [r7, #20]
 8003916:	7d39      	ldrb	r1, [r7, #20]
 8003918:	4c3b      	ldr	r4, [pc, #236]	; (8003a08 <ILI9341_Draw_Char+0x130>)
 800391a:	4613      	mov	r3, r2
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	4413      	add	r3, r2
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	4423      	add	r3, r4
 8003924:	4403      	add	r3, r0
 8003926:	781a      	ldrb	r2, [r3, #0]
 8003928:	f101 0318 	add.w	r3, r1, #24
 800392c:	443b      	add	r3, r7
 800392e:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8003932:	7d3b      	ldrb	r3, [r7, #20]
 8003934:	3301      	adds	r3, #1
 8003936:	753b      	strb	r3, [r7, #20]
 8003938:	7d3b      	ldrb	r3, [r7, #20]
 800393a:	2b05      	cmp	r3, #5
 800393c:	d9e9      	bls.n	8003912 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 800393e:	79bb      	ldrb	r3, [r7, #6]
 8003940:	b298      	uxth	r0, r3
 8003942:	797b      	ldrb	r3, [r7, #5]
 8003944:	b299      	uxth	r1, r3
 8003946:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003948:	461a      	mov	r2, r3
 800394a:	0052      	lsls	r2, r2, #1
 800394c:	4413      	add	r3, r2
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	b29a      	uxth	r2, r3
 8003952:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	b29c      	uxth	r4, r3
 8003958:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	4623      	mov	r3, r4
 800395e:	f000 fcc1 	bl	80042e4 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8003962:	2300      	movs	r3, #0
 8003964:	757b      	strb	r3, [r7, #21]
 8003966:	e047      	b.n	80039f8 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8003968:	2300      	movs	r3, #0
 800396a:	75bb      	strb	r3, [r7, #22]
 800396c:	e03e      	b.n	80039ec <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 800396e:	7d7b      	ldrb	r3, [r7, #21]
 8003970:	3318      	adds	r3, #24
 8003972:	443b      	add	r3, r7
 8003974:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003978:	461a      	mov	r2, r3
 800397a:	7dbb      	ldrb	r3, [r7, #22]
 800397c:	fa42 f303 	asr.w	r3, r2, r3
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d02e      	beq.n	80039e6 <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8003988:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800398a:	2b01      	cmp	r3, #1
 800398c:	d110      	bne.n	80039b0 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 800398e:	79bb      	ldrb	r3, [r7, #6]
 8003990:	b29a      	uxth	r2, r3
 8003992:	7d7b      	ldrb	r3, [r7, #21]
 8003994:	b29b      	uxth	r3, r3
 8003996:	4413      	add	r3, r2
 8003998:	b298      	uxth	r0, r3
 800399a:	797b      	ldrb	r3, [r7, #5]
 800399c:	b29a      	uxth	r2, r3
 800399e:	7dbb      	ldrb	r3, [r7, #22]
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	4413      	add	r3, r2
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	887a      	ldrh	r2, [r7, #2]
 80039a8:	4619      	mov	r1, r3
 80039aa:	f000 fbc1 	bl	8004130 <ILI9341_Draw_Pixel>
 80039ae:	e01a      	b.n	80039e6 <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 80039b0:	79bb      	ldrb	r3, [r7, #6]
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	7d7b      	ldrb	r3, [r7, #21]
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80039ba:	fb11 f303 	smulbb	r3, r1, r3
 80039be:	b29b      	uxth	r3, r3
 80039c0:	4413      	add	r3, r2
 80039c2:	b298      	uxth	r0, r3
 80039c4:	797b      	ldrb	r3, [r7, #5]
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	7dbb      	ldrb	r3, [r7, #22]
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80039ce:	fb11 f303 	smulbb	r3, r1, r3
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	4413      	add	r3, r2
 80039d6:	b299      	uxth	r1, r3
 80039d8:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80039da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80039dc:	887b      	ldrh	r3, [r7, #2]
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	4623      	mov	r3, r4
 80039e2:	f000 fc7f 	bl	80042e4 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80039e6:	7dbb      	ldrb	r3, [r7, #22]
 80039e8:	3301      	adds	r3, #1
 80039ea:	75bb      	strb	r3, [r7, #22]
 80039ec:	7dbb      	ldrb	r3, [r7, #22]
 80039ee:	2b07      	cmp	r3, #7
 80039f0:	d9bd      	bls.n	800396e <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 80039f2:	7d7b      	ldrb	r3, [r7, #21]
 80039f4:	3301      	adds	r3, #1
 80039f6:	757b      	strb	r3, [r7, #21]
 80039f8:	7d7b      	ldrb	r3, [r7, #21]
 80039fa:	2b05      	cmp	r3, #5
 80039fc:	d9b4      	bls.n	8003968 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 80039fe:	bf00      	nop
 8003a00:	bf00      	nop
 8003a02:	371c      	adds	r7, #28
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd90      	pop	{r4, r7, pc}
 8003a08:	0800c248 	.word	0x0800c248

08003a0c <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8003a0c:	b590      	push	{r4, r7, lr}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af02      	add	r7, sp, #8
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	4608      	mov	r0, r1
 8003a16:	4611      	mov	r1, r2
 8003a18:	461a      	mov	r2, r3
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	70fb      	strb	r3, [r7, #3]
 8003a1e:	460b      	mov	r3, r1
 8003a20:	70bb      	strb	r3, [r7, #2]
 8003a22:	4613      	mov	r3, r2
 8003a24:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8003a26:	e017      	b.n	8003a58 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	1c5a      	adds	r2, r3, #1
 8003a2c:	607a      	str	r2, [r7, #4]
 8003a2e:	7818      	ldrb	r0, [r3, #0]
 8003a30:	883c      	ldrh	r4, [r7, #0]
 8003a32:	78ba      	ldrb	r2, [r7, #2]
 8003a34:	78f9      	ldrb	r1, [r7, #3]
 8003a36:	8bbb      	ldrh	r3, [r7, #28]
 8003a38:	9301      	str	r3, [sp, #4]
 8003a3a:	8b3b      	ldrh	r3, [r7, #24]
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	4623      	mov	r3, r4
 8003a40:	f7ff ff4a 	bl	80038d8 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8003a44:	8b3b      	ldrh	r3, [r7, #24]
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	461a      	mov	r2, r3
 8003a4a:	0052      	lsls	r2, r2, #1
 8003a4c:	4413      	add	r3, r2
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	78fb      	ldrb	r3, [r7, #3]
 8003a54:	4413      	add	r3, r2
 8003a56:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1e3      	bne.n	8003a28 <ILI9341_Draw_Text+0x1c>
    }
}
 8003a60:	bf00      	nop
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd90      	pop	{r4, r7, pc}
	...

08003a6c <ILI9341_Draw_ImageEx>:
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
	}
}


void ILI9341_Draw_ImageEx(uint16_t x, uint16_t y, uint16_t wd, uint16_t ht, const char* data, uint8_t orientation) {
 8003a6c:	b590      	push	{r4, r7, lr}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4604      	mov	r4, r0
 8003a74:	4608      	mov	r0, r1
 8003a76:	4611      	mov	r1, r2
 8003a78:	461a      	mov	r2, r3
 8003a7a:	4623      	mov	r3, r4
 8003a7c:	80fb      	strh	r3, [r7, #6]
 8003a7e:	4603      	mov	r3, r0
 8003a80:	80bb      	strh	r3, [r7, #4]
 8003a82:	460b      	mov	r3, r1
 8003a84:	807b      	strh	r3, [r7, #2]
 8003a86:	4613      	mov	r3, r2
 8003a88:	803b      	strh	r3, [r7, #0]
    ILI9341_Set_Rotation(orientation);
 8003a8a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 f91e 	bl	8003cd0 <ILI9341_Set_Rotation>
    ILI9341_Set_Address(x, y, x + wd - 1, y + ht - 1);
 8003a94:	88fa      	ldrh	r2, [r7, #6]
 8003a96:	887b      	ldrh	r3, [r7, #2]
 8003a98:	4413      	add	r3, r2
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29c      	uxth	r4, r3
 8003aa0:	88ba      	ldrh	r2, [r7, #4]
 8003aa2:	883b      	ldrh	r3, [r7, #0]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	88b9      	ldrh	r1, [r7, #4]
 8003aae:	88f8      	ldrh	r0, [r7, #6]
 8003ab0:	4622      	mov	r2, r4
 8003ab2:	f000 f8a3 	bl	8003bfc <ILI9341_Set_Address>

    HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003abc:	481a      	ldr	r0, [pc, #104]	; (8003b28 <ILI9341_Draw_ImageEx+0xbc>)
 8003abe:	f000 ffcd 	bl	8004a5c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ac8:	4817      	ldr	r0, [pc, #92]	; (8003b28 <ILI9341_Draw_ImageEx+0xbc>)
 8003aca:	f000 ffc7 	bl	8004a5c <HAL_GPIO_WritePin>

    uint32_t size = (uint32_t)wd * (uint32_t)ht * sizeof(uint16_t);
 8003ace:	887b      	ldrh	r3, [r7, #2]
 8003ad0:	883a      	ldrh	r2, [r7, #0]
 8003ad2:	fb02 f303 	mul.w	r3, r2, r3
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	617b      	str	r3, [r7, #20]

    const uint32_t MAXCHUNK = 32768;
 8003ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ade:	613b      	str	r3, [r7, #16]
    while (size > 0) {
 8003ae0:	e014      	b.n	8003b0c <ILI9341_Draw_ImageEx+0xa0>
        uint32_t chunk = size > MAXCHUNK ? MAXCHUNK : size;
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	bf28      	it	cs
 8003aea:	4613      	movcs	r3, r2
 8003aec:	60fb      	str	r3, [r7, #12]

        HAL_SPI_Transmit(HSPI_INSTANCE, data, chunk, 10);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	230a      	movs	r3, #10
 8003af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003af6:	480d      	ldr	r0, [pc, #52]	; (8003b2c <ILI9341_Draw_ImageEx+0xc0>)
 8003af8:	f003 f803 	bl	8006b02 <HAL_SPI_Transmit>

        data += chunk;
 8003afc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4413      	add	r3, r2
 8003b02:	62bb      	str	r3, [r7, #40]	; 0x28
        size -= chunk;
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	617b      	str	r3, [r7, #20]
    while (size > 0) {
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1e7      	bne.n	8003ae2 <ILI9341_Draw_ImageEx+0x76>
    }

    HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003b12:	2201      	movs	r2, #1
 8003b14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b18:	4803      	ldr	r0, [pc, #12]	; (8003b28 <ILI9341_Draw_ImageEx+0xbc>)
 8003b1a:	f000 ff9f 	bl	8004a5c <HAL_GPIO_WritePin>
}
 8003b1e:	bf00      	nop
 8003b20:	371c      	adds	r7, #28
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd90      	pop	{r4, r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40020800 	.word	0x40020800
 8003b2c:	20000384 	.word	0x20000384

08003b30 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 8003b34:	f7ff fa64 	bl	8003000 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 8003b38:	f7fc feba 	bl	80008b0 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b42:	4802      	ldr	r0, [pc, #8]	; (8003b4c <ILI9341_SPI_Init+0x1c>)
 8003b44:	f000 ff8a 	bl	8004a5c <HAL_GPIO_WritePin>
}
 8003b48:	bf00      	nop
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40020800 	.word	0x40020800

08003b50 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	4603      	mov	r3, r0
 8003b58:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8003b5a:	1df9      	adds	r1, r7, #7
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	2201      	movs	r2, #1
 8003b60:	4803      	ldr	r0, [pc, #12]	; (8003b70 <ILI9341_SPI_Send+0x20>)
 8003b62:	f002 ffce 	bl	8006b02 <HAL_SPI_Transmit>
}
 8003b66:	bf00      	nop
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20000384 	.word	0x20000384

08003b74 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b84:	480b      	ldr	r0, [pc, #44]	; (8003bb4 <ILI9341_Write_Command+0x40>)
 8003b86:	f000 ff69 	bl	8004a5c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b90:	4808      	ldr	r0, [pc, #32]	; (8003bb4 <ILI9341_Write_Command+0x40>)
 8003b92:	f000 ff63 	bl	8004a5c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8003b96:	79fb      	ldrb	r3, [r7, #7]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7ff ffd9 	bl	8003b50 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ba4:	4803      	ldr	r0, [pc, #12]	; (8003bb4 <ILI9341_Write_Command+0x40>)
 8003ba6:	f000 ff59 	bl	8004a5c <HAL_GPIO_WritePin>
}
 8003baa:	bf00      	nop
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40020800 	.word	0x40020800

08003bb8 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003bc8:	480b      	ldr	r0, [pc, #44]	; (8003bf8 <ILI9341_Write_Data+0x40>)
 8003bca:	f000 ff47 	bl	8004a5c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bd4:	4808      	ldr	r0, [pc, #32]	; (8003bf8 <ILI9341_Write_Data+0x40>)
 8003bd6:	f000 ff41 	bl	8004a5c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8003bda:	79fb      	ldrb	r3, [r7, #7]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff ffb7 	bl	8003b50 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003be2:	2201      	movs	r2, #1
 8003be4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003be8:	4803      	ldr	r0, [pc, #12]	; (8003bf8 <ILI9341_Write_Data+0x40>)
 8003bea:	f000 ff37 	bl	8004a5c <HAL_GPIO_WritePin>
}
 8003bee:	bf00      	nop
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40020800 	.word	0x40020800

08003bfc <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8003bfc:	b590      	push	{r4, r7, lr}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	4604      	mov	r4, r0
 8003c04:	4608      	mov	r0, r1
 8003c06:	4611      	mov	r1, r2
 8003c08:	461a      	mov	r2, r3
 8003c0a:	4623      	mov	r3, r4
 8003c0c:	80fb      	strh	r3, [r7, #6]
 8003c0e:	4603      	mov	r3, r0
 8003c10:	80bb      	strh	r3, [r7, #4]
 8003c12:	460b      	mov	r3, r1
 8003c14:	807b      	strh	r3, [r7, #2]
 8003c16:	4613      	mov	r3, r2
 8003c18:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8003c1a:	202a      	movs	r0, #42	; 0x2a
 8003c1c:	f7ff ffaa 	bl	8003b74 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8003c20:	88fb      	ldrh	r3, [r7, #6]
 8003c22:	0a1b      	lsrs	r3, r3, #8
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff ffc5 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8003c2e:	88fb      	ldrh	r3, [r7, #6]
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff ffc0 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8003c38:	887b      	ldrh	r3, [r7, #2]
 8003c3a:	0a1b      	lsrs	r3, r3, #8
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff ffb9 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8003c46:	887b      	ldrh	r3, [r7, #2]
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff ffb4 	bl	8003bb8 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8003c50:	202b      	movs	r0, #43	; 0x2b
 8003c52:	f7ff ff8f 	bl	8003b74 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8003c56:	88bb      	ldrh	r3, [r7, #4]
 8003c58:	0a1b      	lsrs	r3, r3, #8
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7ff ffaa 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8003c64:	88bb      	ldrh	r3, [r7, #4]
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff ffa5 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8003c6e:	883b      	ldrh	r3, [r7, #0]
 8003c70:	0a1b      	lsrs	r3, r3, #8
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff ff9e 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8003c7c:	883b      	ldrh	r3, [r7, #0]
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff ff99 	bl	8003bb8 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8003c86:	202c      	movs	r0, #44	; 0x2c
 8003c88:	f7ff ff74 	bl	8003b74 <ILI9341_Write_Command>
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd90      	pop	{r4, r7, pc}

08003c94 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003c9e:	480b      	ldr	r0, [pc, #44]	; (8003ccc <ILI9341_Reset+0x38>)
 8003ca0:	f000 fedc 	bl	8004a5c <HAL_GPIO_WritePin>
HAL_Delay(200);
 8003ca4:	20c8      	movs	r0, #200	; 0xc8
 8003ca6:	f000 fbdf 	bl	8004468 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003caa:	2200      	movs	r2, #0
 8003cac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003cb0:	4806      	ldr	r0, [pc, #24]	; (8003ccc <ILI9341_Reset+0x38>)
 8003cb2:	f000 fed3 	bl	8004a5c <HAL_GPIO_WritePin>
HAL_Delay(200);
 8003cb6:	20c8      	movs	r0, #200	; 0xc8
 8003cb8:	f000 fbd6 	bl	8004468 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003cc2:	4802      	ldr	r0, [pc, #8]	; (8003ccc <ILI9341_Reset+0x38>)
 8003cc4:	f000 feca 	bl	8004a5c <HAL_GPIO_WritePin>
}
 8003cc8:	bf00      	nop
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40020800 	.word	0x40020800

08003cd0 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8003cda:	79fb      	ldrb	r3, [r7, #7]
 8003cdc:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8003cde:	2036      	movs	r0, #54	; 0x36
 8003ce0:	f7ff ff48 	bl	8003b74 <ILI9341_Write_Command>
HAL_Delay(1);
 8003ce4:	2001      	movs	r0, #1
 8003ce6:	f000 fbbf 	bl	8004468 <HAL_Delay>
	
switch(screen_rotation) 
 8003cea:	7bfb      	ldrb	r3, [r7, #15]
 8003cec:	2b03      	cmp	r3, #3
 8003cee:	d837      	bhi.n	8003d60 <ILI9341_Set_Rotation+0x90>
 8003cf0:	a201      	add	r2, pc, #4	; (adr r2, 8003cf8 <ILI9341_Set_Rotation+0x28>)
 8003cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf6:	bf00      	nop
 8003cf8:	08003d09 	.word	0x08003d09
 8003cfc:	08003d1f 	.word	0x08003d1f
 8003d00:	08003d35 	.word	0x08003d35
 8003d04:	08003d4b 	.word	0x08003d4b
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8003d08:	2048      	movs	r0, #72	; 0x48
 8003d0a:	f7ff ff55 	bl	8003bb8 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8003d0e:	4b17      	ldr	r3, [pc, #92]	; (8003d6c <ILI9341_Set_Rotation+0x9c>)
 8003d10:	22f0      	movs	r2, #240	; 0xf0
 8003d12:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8003d14:	4b16      	ldr	r3, [pc, #88]	; (8003d70 <ILI9341_Set_Rotation+0xa0>)
 8003d16:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003d1a:	801a      	strh	r2, [r3, #0]
			break;
 8003d1c:	e021      	b.n	8003d62 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8003d1e:	2028      	movs	r0, #40	; 0x28
 8003d20:	f7ff ff4a 	bl	8003bb8 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8003d24:	4b11      	ldr	r3, [pc, #68]	; (8003d6c <ILI9341_Set_Rotation+0x9c>)
 8003d26:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003d2a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8003d2c:	4b10      	ldr	r3, [pc, #64]	; (8003d70 <ILI9341_Set_Rotation+0xa0>)
 8003d2e:	22f0      	movs	r2, #240	; 0xf0
 8003d30:	801a      	strh	r2, [r3, #0]
			break;
 8003d32:	e016      	b.n	8003d62 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8003d34:	2088      	movs	r0, #136	; 0x88
 8003d36:	f7ff ff3f 	bl	8003bb8 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8003d3a:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <ILI9341_Set_Rotation+0x9c>)
 8003d3c:	22f0      	movs	r2, #240	; 0xf0
 8003d3e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8003d40:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <ILI9341_Set_Rotation+0xa0>)
 8003d42:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003d46:	801a      	strh	r2, [r3, #0]
			break;
 8003d48:	e00b      	b.n	8003d62 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8003d4a:	20e8      	movs	r0, #232	; 0xe8
 8003d4c:	f7ff ff34 	bl	8003bb8 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8003d50:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <ILI9341_Set_Rotation+0x9c>)
 8003d52:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003d56:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8003d58:	4b05      	ldr	r3, [pc, #20]	; (8003d70 <ILI9341_Set_Rotation+0xa0>)
 8003d5a:	22f0      	movs	r2, #240	; 0xf0
 8003d5c:	801a      	strh	r2, [r3, #0]
			break;
 8003d5e:	e000      	b.n	8003d62 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8003d60:	bf00      	nop
	}
}
 8003d62:	bf00      	nop
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	20000056 	.word	0x20000056
 8003d70:	20000054 	.word	0x20000054

08003d74 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d7e:	4802      	ldr	r0, [pc, #8]	; (8003d88 <ILI9341_Enable+0x14>)
 8003d80:	f000 fe6c 	bl	8004a5c <HAL_GPIO_WritePin>
}
 8003d84:	bf00      	nop
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40020800 	.word	0x40020800

08003d8c <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8003d90:	f7ff fff0 	bl	8003d74 <ILI9341_Enable>
ILI9341_SPI_Init();
 8003d94:	f7ff fecc 	bl	8003b30 <ILI9341_SPI_Init>
ILI9341_Reset();
 8003d98:	f7ff ff7c 	bl	8003c94 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8003d9c:	2001      	movs	r0, #1
 8003d9e:	f7ff fee9 	bl	8003b74 <ILI9341_Write_Command>
HAL_Delay(1000);
 8003da2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003da6:	f000 fb5f 	bl	8004468 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8003daa:	20cb      	movs	r0, #203	; 0xcb
 8003dac:	f7ff fee2 	bl	8003b74 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8003db0:	2039      	movs	r0, #57	; 0x39
 8003db2:	f7ff ff01 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8003db6:	202c      	movs	r0, #44	; 0x2c
 8003db8:	f7ff fefe 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8003dbc:	2000      	movs	r0, #0
 8003dbe:	f7ff fefb 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8003dc2:	2034      	movs	r0, #52	; 0x34
 8003dc4:	f7ff fef8 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8003dc8:	2002      	movs	r0, #2
 8003dca:	f7ff fef5 	bl	8003bb8 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8003dce:	20cf      	movs	r0, #207	; 0xcf
 8003dd0:	f7ff fed0 	bl	8003b74 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8003dd4:	2000      	movs	r0, #0
 8003dd6:	f7ff feef 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8003dda:	20c1      	movs	r0, #193	; 0xc1
 8003ddc:	f7ff feec 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8003de0:	2030      	movs	r0, #48	; 0x30
 8003de2:	f7ff fee9 	bl	8003bb8 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8003de6:	20e8      	movs	r0, #232	; 0xe8
 8003de8:	f7ff fec4 	bl	8003b74 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8003dec:	2085      	movs	r0, #133	; 0x85
 8003dee:	f7ff fee3 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8003df2:	2000      	movs	r0, #0
 8003df4:	f7ff fee0 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8003df8:	2078      	movs	r0, #120	; 0x78
 8003dfa:	f7ff fedd 	bl	8003bb8 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8003dfe:	20ea      	movs	r0, #234	; 0xea
 8003e00:	f7ff feb8 	bl	8003b74 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8003e04:	2000      	movs	r0, #0
 8003e06:	f7ff fed7 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8003e0a:	2000      	movs	r0, #0
 8003e0c:	f7ff fed4 	bl	8003bb8 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8003e10:	20ed      	movs	r0, #237	; 0xed
 8003e12:	f7ff feaf 	bl	8003b74 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8003e16:	2064      	movs	r0, #100	; 0x64
 8003e18:	f7ff fece 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8003e1c:	2003      	movs	r0, #3
 8003e1e:	f7ff fecb 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8003e22:	2012      	movs	r0, #18
 8003e24:	f7ff fec8 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8003e28:	2081      	movs	r0, #129	; 0x81
 8003e2a:	f7ff fec5 	bl	8003bb8 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8003e2e:	20f7      	movs	r0, #247	; 0xf7
 8003e30:	f7ff fea0 	bl	8003b74 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8003e34:	2020      	movs	r0, #32
 8003e36:	f7ff febf 	bl	8003bb8 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8003e3a:	20c0      	movs	r0, #192	; 0xc0
 8003e3c:	f7ff fe9a 	bl	8003b74 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8003e40:	2023      	movs	r0, #35	; 0x23
 8003e42:	f7ff feb9 	bl	8003bb8 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8003e46:	20c1      	movs	r0, #193	; 0xc1
 8003e48:	f7ff fe94 	bl	8003b74 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8003e4c:	2010      	movs	r0, #16
 8003e4e:	f7ff feb3 	bl	8003bb8 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8003e52:	20c5      	movs	r0, #197	; 0xc5
 8003e54:	f7ff fe8e 	bl	8003b74 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8003e58:	203e      	movs	r0, #62	; 0x3e
 8003e5a:	f7ff fead 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8003e5e:	2028      	movs	r0, #40	; 0x28
 8003e60:	f7ff feaa 	bl	8003bb8 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8003e64:	20c7      	movs	r0, #199	; 0xc7
 8003e66:	f7ff fe85 	bl	8003b74 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8003e6a:	2086      	movs	r0, #134	; 0x86
 8003e6c:	f7ff fea4 	bl	8003bb8 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8003e70:	2036      	movs	r0, #54	; 0x36
 8003e72:	f7ff fe7f 	bl	8003b74 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8003e76:	2048      	movs	r0, #72	; 0x48
 8003e78:	f7ff fe9e 	bl	8003bb8 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8003e7c:	203a      	movs	r0, #58	; 0x3a
 8003e7e:	f7ff fe79 	bl	8003b74 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8003e82:	2055      	movs	r0, #85	; 0x55
 8003e84:	f7ff fe98 	bl	8003bb8 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8003e88:	20b1      	movs	r0, #177	; 0xb1
 8003e8a:	f7ff fe73 	bl	8003b74 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8003e8e:	2000      	movs	r0, #0
 8003e90:	f7ff fe92 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8003e94:	2018      	movs	r0, #24
 8003e96:	f7ff fe8f 	bl	8003bb8 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8003e9a:	20b6      	movs	r0, #182	; 0xb6
 8003e9c:	f7ff fe6a 	bl	8003b74 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8003ea0:	2008      	movs	r0, #8
 8003ea2:	f7ff fe89 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8003ea6:	2082      	movs	r0, #130	; 0x82
 8003ea8:	f7ff fe86 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8003eac:	2027      	movs	r0, #39	; 0x27
 8003eae:	f7ff fe83 	bl	8003bb8 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8003eb2:	20f2      	movs	r0, #242	; 0xf2
 8003eb4:	f7ff fe5e 	bl	8003b74 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8003eb8:	2000      	movs	r0, #0
 8003eba:	f7ff fe7d 	bl	8003bb8 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8003ebe:	2026      	movs	r0, #38	; 0x26
 8003ec0:	f7ff fe58 	bl	8003b74 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8003ec4:	2001      	movs	r0, #1
 8003ec6:	f7ff fe77 	bl	8003bb8 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8003eca:	20e0      	movs	r0, #224	; 0xe0
 8003ecc:	f7ff fe52 	bl	8003b74 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8003ed0:	200f      	movs	r0, #15
 8003ed2:	f7ff fe71 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8003ed6:	2031      	movs	r0, #49	; 0x31
 8003ed8:	f7ff fe6e 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8003edc:	202b      	movs	r0, #43	; 0x2b
 8003ede:	f7ff fe6b 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8003ee2:	200c      	movs	r0, #12
 8003ee4:	f7ff fe68 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8003ee8:	200e      	movs	r0, #14
 8003eea:	f7ff fe65 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8003eee:	2008      	movs	r0, #8
 8003ef0:	f7ff fe62 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8003ef4:	204e      	movs	r0, #78	; 0x4e
 8003ef6:	f7ff fe5f 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8003efa:	20f1      	movs	r0, #241	; 0xf1
 8003efc:	f7ff fe5c 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8003f00:	2037      	movs	r0, #55	; 0x37
 8003f02:	f7ff fe59 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8003f06:	2007      	movs	r0, #7
 8003f08:	f7ff fe56 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8003f0c:	2010      	movs	r0, #16
 8003f0e:	f7ff fe53 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8003f12:	2003      	movs	r0, #3
 8003f14:	f7ff fe50 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8003f18:	200e      	movs	r0, #14
 8003f1a:	f7ff fe4d 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8003f1e:	2009      	movs	r0, #9
 8003f20:	f7ff fe4a 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8003f24:	2000      	movs	r0, #0
 8003f26:	f7ff fe47 	bl	8003bb8 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8003f2a:	20e1      	movs	r0, #225	; 0xe1
 8003f2c:	f7ff fe22 	bl	8003b74 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8003f30:	2000      	movs	r0, #0
 8003f32:	f7ff fe41 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8003f36:	200e      	movs	r0, #14
 8003f38:	f7ff fe3e 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8003f3c:	2014      	movs	r0, #20
 8003f3e:	f7ff fe3b 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8003f42:	2003      	movs	r0, #3
 8003f44:	f7ff fe38 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8003f48:	2011      	movs	r0, #17
 8003f4a:	f7ff fe35 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8003f4e:	2007      	movs	r0, #7
 8003f50:	f7ff fe32 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8003f54:	2031      	movs	r0, #49	; 0x31
 8003f56:	f7ff fe2f 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8003f5a:	20c1      	movs	r0, #193	; 0xc1
 8003f5c:	f7ff fe2c 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8003f60:	2048      	movs	r0, #72	; 0x48
 8003f62:	f7ff fe29 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8003f66:	2008      	movs	r0, #8
 8003f68:	f7ff fe26 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8003f6c:	200f      	movs	r0, #15
 8003f6e:	f7ff fe23 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8003f72:	200c      	movs	r0, #12
 8003f74:	f7ff fe20 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8003f78:	2031      	movs	r0, #49	; 0x31
 8003f7a:	f7ff fe1d 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8003f7e:	2036      	movs	r0, #54	; 0x36
 8003f80:	f7ff fe1a 	bl	8003bb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8003f84:	200f      	movs	r0, #15
 8003f86:	f7ff fe17 	bl	8003bb8 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8003f8a:	2011      	movs	r0, #17
 8003f8c:	f7ff fdf2 	bl	8003b74 <ILI9341_Write_Command>
HAL_Delay(120);
 8003f90:	2078      	movs	r0, #120	; 0x78
 8003f92:	f000 fa69 	bl	8004468 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8003f96:	2029      	movs	r0, #41	; 0x29
 8003f98:	f7ff fdec 	bl	8003b74 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	f7ff fe97 	bl	8003cd0 <ILI9341_Set_Rotation>
}
 8003fa2:	bf00      	nop
 8003fa4:	bd80      	pop	{r7, pc}
	...

08003fa8 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8003fa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003fac:	b08d      	sub	sp, #52	; 0x34
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	6039      	str	r1, [r7, #0]
 8003fb4:	80fb      	strh	r3, [r7, #6]
 8003fb6:	466b      	mov	r3, sp
 8003fb8:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003fc6:	d202      	bcs.n	8003fce <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	627b      	str	r3, [r7, #36]	; 0x24
 8003fcc:	e002      	b.n	8003fd4 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8003fce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003fd2:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003fda:	4840      	ldr	r0, [pc, #256]	; (80040dc <ILI9341_Draw_Colour_Burst+0x134>)
 8003fdc:	f000 fd3e 	bl	8004a5c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003fe6:	483d      	ldr	r0, [pc, #244]	; (80040dc <ILI9341_Draw_Colour_Burst+0x134>)
 8003fe8:	f000 fd38 	bl	8004a5c <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8003fec:	88fb      	ldrh	r3, [r7, #6]
 8003fee:	0a1b      	lsrs	r3, r3, #8
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8003ff6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	61fb      	str	r3, [r7, #28]
 8003ffe:	2300      	movs	r3, #0
 8004000:	4688      	mov	r8, r1
 8004002:	4699      	mov	r9, r3
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	f04f 0300 	mov.w	r3, #0
 800400c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004010:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004014:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004018:	2300      	movs	r3, #0
 800401a:	460c      	mov	r4, r1
 800401c:	461d      	mov	r5, r3
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	00eb      	lsls	r3, r5, #3
 8004028:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800402c:	00e2      	lsls	r2, r4, #3
 800402e:	1dcb      	adds	r3, r1, #7
 8004030:	08db      	lsrs	r3, r3, #3
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	ebad 0d03 	sub.w	sp, sp, r3
 8004038:	466b      	mov	r3, sp
 800403a:	3300      	adds	r3, #0
 800403c:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 800403e:	2300      	movs	r3, #0
 8004040:	62bb      	str	r3, [r7, #40]	; 0x28
 8004042:	e00e      	b.n	8004062 <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004048:	4413      	add	r3, r2
 800404a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800404e:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8004050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004052:	3301      	adds	r3, #1
 8004054:	88fa      	ldrh	r2, [r7, #6]
 8004056:	b2d1      	uxtb	r1, r2
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 800405c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405e:	3302      	adds	r3, #2
 8004060:	62bb      	str	r3, [r7, #40]	; 0x28
 8004062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	429a      	cmp	r2, r3
 8004068:	d3ec      	bcc.n	8004044 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	fbb2 f3f3 	udiv	r3, r2, r3
 8004078:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800407e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004082:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004084:	fb01 f202 	mul.w	r2, r1, r2
 8004088:	1a9b      	subs	r3, r3, r2
 800408a:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d010      	beq.n	80040b4 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8004092:	2300      	movs	r3, #0
 8004094:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004096:	e009      	b.n	80040ac <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	b29a      	uxth	r2, r3
 800409c:	230a      	movs	r3, #10
 800409e:	69b9      	ldr	r1, [r7, #24]
 80040a0:	480f      	ldr	r0, [pc, #60]	; (80040e0 <ILI9341_Draw_Colour_Burst+0x138>)
 80040a2:	f002 fd2e 	bl	8006b02 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80040a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a8:	3301      	adds	r3, #1
 80040aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d3f1      	bcc.n	8004098 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	230a      	movs	r3, #10
 80040ba:	69b9      	ldr	r1, [r7, #24]
 80040bc:	4808      	ldr	r0, [pc, #32]	; (80040e0 <ILI9341_Draw_Colour_Burst+0x138>)
 80040be:	f002 fd20 	bl	8006b02 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80040c2:	2201      	movs	r2, #1
 80040c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040c8:	4804      	ldr	r0, [pc, #16]	; (80040dc <ILI9341_Draw_Colour_Burst+0x134>)
 80040ca:	f000 fcc7 	bl	8004a5c <HAL_GPIO_WritePin>
 80040ce:	46b5      	mov	sp, r6
}
 80040d0:	bf00      	nop
 80040d2:	3734      	adds	r7, #52	; 0x34
 80040d4:	46bd      	mov	sp, r7
 80040d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80040da:	bf00      	nop
 80040dc:	40020800 	.word	0x40020800
 80040e0:	20000384 	.word	0x20000384

080040e4 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	4603      	mov	r3, r0
 80040ec:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 80040ee:	4b0e      	ldr	r3, [pc, #56]	; (8004128 <ILI9341_Fill_Screen+0x44>)
 80040f0:	881b      	ldrh	r3, [r3, #0]
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	4b0d      	ldr	r3, [pc, #52]	; (800412c <ILI9341_Fill_Screen+0x48>)
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2100      	movs	r1, #0
 80040fc:	2000      	movs	r0, #0
 80040fe:	f7ff fd7d 	bl	8003bfc <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8004102:	4b09      	ldr	r3, [pc, #36]	; (8004128 <ILI9341_Fill_Screen+0x44>)
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	b29b      	uxth	r3, r3
 8004108:	461a      	mov	r2, r3
 800410a:	4b08      	ldr	r3, [pc, #32]	; (800412c <ILI9341_Fill_Screen+0x48>)
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	b29b      	uxth	r3, r3
 8004110:	fb02 f303 	mul.w	r3, r2, r3
 8004114:	461a      	mov	r2, r3
 8004116:	88fb      	ldrh	r3, [r7, #6]
 8004118:	4611      	mov	r1, r2
 800411a:	4618      	mov	r0, r3
 800411c:	f7ff ff44 	bl	8003fa8 <ILI9341_Draw_Colour_Burst>
}
 8004120:	bf00      	nop
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	20000056 	.word	0x20000056
 800412c:	20000054 	.word	0x20000054

08004130 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	4603      	mov	r3, r0
 8004138:	80fb      	strh	r3, [r7, #6]
 800413a:	460b      	mov	r3, r1
 800413c:	80bb      	strh	r3, [r7, #4]
 800413e:	4613      	mov	r3, r2
 8004140:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8004142:	4b64      	ldr	r3, [pc, #400]	; (80042d4 <ILI9341_Draw_Pixel+0x1a4>)
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	b29b      	uxth	r3, r3
 8004148:	88fa      	ldrh	r2, [r7, #6]
 800414a:	429a      	cmp	r2, r3
 800414c:	f080 80be 	bcs.w	80042cc <ILI9341_Draw_Pixel+0x19c>
 8004150:	4b61      	ldr	r3, [pc, #388]	; (80042d8 <ILI9341_Draw_Pixel+0x1a8>)
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	b29b      	uxth	r3, r3
 8004156:	88ba      	ldrh	r2, [r7, #4]
 8004158:	429a      	cmp	r2, r3
 800415a:	f080 80b7 	bcs.w	80042cc <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800415e:	2200      	movs	r2, #0
 8004160:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004164:	485d      	ldr	r0, [pc, #372]	; (80042dc <ILI9341_Draw_Pixel+0x1ac>)
 8004166:	f000 fc79 	bl	8004a5c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800416a:	2200      	movs	r2, #0
 800416c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004170:	485a      	ldr	r0, [pc, #360]	; (80042dc <ILI9341_Draw_Pixel+0x1ac>)
 8004172:	f000 fc73 	bl	8004a5c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8004176:	202a      	movs	r0, #42	; 0x2a
 8004178:	f7ff fcea 	bl	8003b50 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800417c:	2201      	movs	r2, #1
 800417e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004182:	4856      	ldr	r0, [pc, #344]	; (80042dc <ILI9341_Draw_Pixel+0x1ac>)
 8004184:	f000 fc6a 	bl	8004a5c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8004188:	2201      	movs	r2, #1
 800418a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800418e:	4853      	ldr	r0, [pc, #332]	; (80042dc <ILI9341_Draw_Pixel+0x1ac>)
 8004190:	f000 fc64 	bl	8004a5c <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8004194:	2200      	movs	r2, #0
 8004196:	f44f 7180 	mov.w	r1, #256	; 0x100
 800419a:	4850      	ldr	r0, [pc, #320]	; (80042dc <ILI9341_Draw_Pixel+0x1ac>)
 800419c:	f000 fc5e 	bl	8004a5c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 80041a0:	88fb      	ldrh	r3, [r7, #6]
 80041a2:	0a1b      	lsrs	r3, r3, #8
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	753b      	strb	r3, [r7, #20]
 80041aa:	88fb      	ldrh	r3, [r7, #6]
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	757b      	strb	r3, [r7, #21]
 80041b0:	88fb      	ldrh	r3, [r7, #6]
 80041b2:	3301      	adds	r3, #1
 80041b4:	121b      	asrs	r3, r3, #8
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	75bb      	strb	r3, [r7, #22]
 80041ba:	88fb      	ldrh	r3, [r7, #6]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	3301      	adds	r3, #1
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80041c4:	f107 0114 	add.w	r1, r7, #20
 80041c8:	2301      	movs	r3, #1
 80041ca:	2204      	movs	r2, #4
 80041cc:	4844      	ldr	r0, [pc, #272]	; (80042e0 <ILI9341_Draw_Pixel+0x1b0>)
 80041ce:	f002 fc98 	bl	8006b02 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80041d2:	2201      	movs	r2, #1
 80041d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041d8:	4840      	ldr	r0, [pc, #256]	; (80042dc <ILI9341_Draw_Pixel+0x1ac>)
 80041da:	f000 fc3f 	bl	8004a5c <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80041de:	2200      	movs	r2, #0
 80041e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80041e4:	483d      	ldr	r0, [pc, #244]	; (80042dc <ILI9341_Draw_Pixel+0x1ac>)
 80041e6:	f000 fc39 	bl	8004a5c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80041ea:	2200      	movs	r2, #0
 80041ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041f0:	483a      	ldr	r0, [pc, #232]	; (80042dc <ILI9341_Draw_Pixel+0x1ac>)
 80041f2:	f000 fc33 	bl	8004a5c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 80041f6:	202b      	movs	r0, #43	; 0x2b
 80041f8:	f7ff fcaa 	bl	8003b50 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80041fc:	2201      	movs	r2, #1
 80041fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004202:	4836      	ldr	r0, [pc, #216]	; (80042dc <ILI9341_Draw_Pixel+0x1ac>)
 8004204:	f000 fc2a 	bl	8004a5c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8004208:	2201      	movs	r2, #1
 800420a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800420e:	4833      	ldr	r0, [pc, #204]	; (80042dc <ILI9341_Draw_Pixel+0x1ac>)
 8004210:	f000 fc24 	bl	8004a5c <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004214:	2200      	movs	r2, #0
 8004216:	f44f 7180 	mov.w	r1, #256	; 0x100
 800421a:	4830      	ldr	r0, [pc, #192]	; (80042dc <ILI9341_Draw_Pixel+0x1ac>)
 800421c:	f000 fc1e 	bl	8004a5c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8004220:	88bb      	ldrh	r3, [r7, #4]
 8004222:	0a1b      	lsrs	r3, r3, #8
 8004224:	b29b      	uxth	r3, r3
 8004226:	b2db      	uxtb	r3, r3
 8004228:	743b      	strb	r3, [r7, #16]
 800422a:	88bb      	ldrh	r3, [r7, #4]
 800422c:	b2db      	uxtb	r3, r3
 800422e:	747b      	strb	r3, [r7, #17]
 8004230:	88bb      	ldrh	r3, [r7, #4]
 8004232:	3301      	adds	r3, #1
 8004234:	121b      	asrs	r3, r3, #8
 8004236:	b2db      	uxtb	r3, r3
 8004238:	74bb      	strb	r3, [r7, #18]
 800423a:	88bb      	ldrh	r3, [r7, #4]
 800423c:	b2db      	uxtb	r3, r3
 800423e:	3301      	adds	r3, #1
 8004240:	b2db      	uxtb	r3, r3
 8004242:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8004244:	f107 0110 	add.w	r1, r7, #16
 8004248:	2301      	movs	r3, #1
 800424a:	2204      	movs	r2, #4
 800424c:	4824      	ldr	r0, [pc, #144]	; (80042e0 <ILI9341_Draw_Pixel+0x1b0>)
 800424e:	f002 fc58 	bl	8006b02 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8004252:	2201      	movs	r2, #1
 8004254:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004258:	4820      	ldr	r0, [pc, #128]	; (80042dc <ILI9341_Draw_Pixel+0x1ac>)
 800425a:	f000 fbff 	bl	8004a5c <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800425e:	2200      	movs	r2, #0
 8004260:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004264:	481d      	ldr	r0, [pc, #116]	; (80042dc <ILI9341_Draw_Pixel+0x1ac>)
 8004266:	f000 fbf9 	bl	8004a5c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800426a:	2200      	movs	r2, #0
 800426c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004270:	481a      	ldr	r0, [pc, #104]	; (80042dc <ILI9341_Draw_Pixel+0x1ac>)
 8004272:	f000 fbf3 	bl	8004a5c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8004276:	202c      	movs	r0, #44	; 0x2c
 8004278:	f7ff fc6a 	bl	8003b50 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 800427c:	2201      	movs	r2, #1
 800427e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004282:	4816      	ldr	r0, [pc, #88]	; (80042dc <ILI9341_Draw_Pixel+0x1ac>)
 8004284:	f000 fbea 	bl	8004a5c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8004288:	2201      	movs	r2, #1
 800428a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800428e:	4813      	ldr	r0, [pc, #76]	; (80042dc <ILI9341_Draw_Pixel+0x1ac>)
 8004290:	f000 fbe4 	bl	8004a5c <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004294:	2200      	movs	r2, #0
 8004296:	f44f 7180 	mov.w	r1, #256	; 0x100
 800429a:	4810      	ldr	r0, [pc, #64]	; (80042dc <ILI9341_Draw_Pixel+0x1ac>)
 800429c:	f000 fbde 	bl	8004a5c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 80042a0:	887b      	ldrh	r3, [r7, #2]
 80042a2:	0a1b      	lsrs	r3, r3, #8
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	733b      	strb	r3, [r7, #12]
 80042aa:	887b      	ldrh	r3, [r7, #2]
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 80042b0:	f107 010c 	add.w	r1, r7, #12
 80042b4:	2301      	movs	r3, #1
 80042b6:	2202      	movs	r2, #2
 80042b8:	4809      	ldr	r0, [pc, #36]	; (80042e0 <ILI9341_Draw_Pixel+0x1b0>)
 80042ba:	f002 fc22 	bl	8006b02 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80042be:	2201      	movs	r2, #1
 80042c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042c4:	4805      	ldr	r0, [pc, #20]	; (80042dc <ILI9341_Draw_Pixel+0x1ac>)
 80042c6:	f000 fbc9 	bl	8004a5c <HAL_GPIO_WritePin>
 80042ca:	e000      	b.n	80042ce <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80042cc:	bf00      	nop
	
}
 80042ce:	3718      	adds	r7, #24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	20000056 	.word	0x20000056
 80042d8:	20000054 	.word	0x20000054
 80042dc:	40020800 	.word	0x40020800
 80042e0:	20000384 	.word	0x20000384

080042e4 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 80042e4:	b590      	push	{r4, r7, lr}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	4604      	mov	r4, r0
 80042ec:	4608      	mov	r0, r1
 80042ee:	4611      	mov	r1, r2
 80042f0:	461a      	mov	r2, r3
 80042f2:	4623      	mov	r3, r4
 80042f4:	80fb      	strh	r3, [r7, #6]
 80042f6:	4603      	mov	r3, r0
 80042f8:	80bb      	strh	r3, [r7, #4]
 80042fa:	460b      	mov	r3, r1
 80042fc:	807b      	strh	r3, [r7, #2]
 80042fe:	4613      	mov	r3, r2
 8004300:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8004302:	4b24      	ldr	r3, [pc, #144]	; (8004394 <ILI9341_Draw_Rectangle+0xb0>)
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	b29b      	uxth	r3, r3
 8004308:	88fa      	ldrh	r2, [r7, #6]
 800430a:	429a      	cmp	r2, r3
 800430c:	d23d      	bcs.n	800438a <ILI9341_Draw_Rectangle+0xa6>
 800430e:	4b22      	ldr	r3, [pc, #136]	; (8004398 <ILI9341_Draw_Rectangle+0xb4>)
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	b29b      	uxth	r3, r3
 8004314:	88ba      	ldrh	r2, [r7, #4]
 8004316:	429a      	cmp	r2, r3
 8004318:	d237      	bcs.n	800438a <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 800431a:	88fa      	ldrh	r2, [r7, #6]
 800431c:	887b      	ldrh	r3, [r7, #2]
 800431e:	4413      	add	r3, r2
 8004320:	4a1c      	ldr	r2, [pc, #112]	; (8004394 <ILI9341_Draw_Rectangle+0xb0>)
 8004322:	8812      	ldrh	r2, [r2, #0]
 8004324:	b292      	uxth	r2, r2
 8004326:	4293      	cmp	r3, r2
 8004328:	dd05      	ble.n	8004336 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 800432a:	4b1a      	ldr	r3, [pc, #104]	; (8004394 <ILI9341_Draw_Rectangle+0xb0>)
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	b29a      	uxth	r2, r3
 8004330:	88fb      	ldrh	r3, [r7, #6]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8004336:	88ba      	ldrh	r2, [r7, #4]
 8004338:	883b      	ldrh	r3, [r7, #0]
 800433a:	4413      	add	r3, r2
 800433c:	4a16      	ldr	r2, [pc, #88]	; (8004398 <ILI9341_Draw_Rectangle+0xb4>)
 800433e:	8812      	ldrh	r2, [r2, #0]
 8004340:	b292      	uxth	r2, r2
 8004342:	4293      	cmp	r3, r2
 8004344:	dd05      	ble.n	8004352 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8004346:	4b14      	ldr	r3, [pc, #80]	; (8004398 <ILI9341_Draw_Rectangle+0xb4>)
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	b29a      	uxth	r2, r3
 800434c:	88bb      	ldrh	r3, [r7, #4]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8004352:	88fa      	ldrh	r2, [r7, #6]
 8004354:	887b      	ldrh	r3, [r7, #2]
 8004356:	4413      	add	r3, r2
 8004358:	b29b      	uxth	r3, r3
 800435a:	3b01      	subs	r3, #1
 800435c:	b29c      	uxth	r4, r3
 800435e:	88ba      	ldrh	r2, [r7, #4]
 8004360:	883b      	ldrh	r3, [r7, #0]
 8004362:	4413      	add	r3, r2
 8004364:	b29b      	uxth	r3, r3
 8004366:	3b01      	subs	r3, #1
 8004368:	b29b      	uxth	r3, r3
 800436a:	88b9      	ldrh	r1, [r7, #4]
 800436c:	88f8      	ldrh	r0, [r7, #6]
 800436e:	4622      	mov	r2, r4
 8004370:	f7ff fc44 	bl	8003bfc <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8004374:	883b      	ldrh	r3, [r7, #0]
 8004376:	887a      	ldrh	r2, [r7, #2]
 8004378:	fb02 f303 	mul.w	r3, r2, r3
 800437c:	461a      	mov	r2, r3
 800437e:	8b3b      	ldrh	r3, [r7, #24]
 8004380:	4611      	mov	r1, r2
 8004382:	4618      	mov	r0, r3
 8004384:	f7ff fe10 	bl	8003fa8 <ILI9341_Draw_Colour_Burst>
 8004388:	e000      	b.n	800438c <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800438a:	bf00      	nop
}
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	bd90      	pop	{r4, r7, pc}
 8004392:	bf00      	nop
 8004394:	20000056 	.word	0x20000056
 8004398:	20000054 	.word	0x20000054

0800439c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043a0:	4b08      	ldr	r3, [pc, #32]	; (80043c4 <HAL_Init+0x28>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a07      	ldr	r2, [pc, #28]	; (80043c4 <HAL_Init+0x28>)
 80043a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043ac:	2003      	movs	r0, #3
 80043ae:	f000 f94f 	bl	8004650 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043b2:	2000      	movs	r0, #0
 80043b4:	f000 f808 	bl	80043c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043b8:	f7fe fea4 	bl	8003104 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40023c00 	.word	0x40023c00

080043c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043d0:	4b12      	ldr	r3, [pc, #72]	; (800441c <HAL_InitTick+0x54>)
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	4b12      	ldr	r3, [pc, #72]	; (8004420 <HAL_InitTick+0x58>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	4619      	mov	r1, r3
 80043da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043de:	fbb3 f3f1 	udiv	r3, r3, r1
 80043e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 f967 	bl	80046ba <HAL_SYSTICK_Config>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e00e      	b.n	8004414 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b0f      	cmp	r3, #15
 80043fa:	d80a      	bhi.n	8004412 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043fc:	2200      	movs	r2, #0
 80043fe:	6879      	ldr	r1, [r7, #4]
 8004400:	f04f 30ff 	mov.w	r0, #4294967295
 8004404:	f000 f92f 	bl	8004666 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004408:	4a06      	ldr	r2, [pc, #24]	; (8004424 <HAL_InitTick+0x5c>)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800440e:	2300      	movs	r3, #0
 8004410:	e000      	b.n	8004414 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
}
 8004414:	4618      	mov	r0, r3
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	20000050 	.word	0x20000050
 8004420:	2000005c 	.word	0x2000005c
 8004424:	20000058 	.word	0x20000058

08004428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800442c:	4b06      	ldr	r3, [pc, #24]	; (8004448 <HAL_IncTick+0x20>)
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	461a      	mov	r2, r3
 8004432:	4b06      	ldr	r3, [pc, #24]	; (800444c <HAL_IncTick+0x24>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4413      	add	r3, r2
 8004438:	4a04      	ldr	r2, [pc, #16]	; (800444c <HAL_IncTick+0x24>)
 800443a:	6013      	str	r3, [r2, #0]
}
 800443c:	bf00      	nop
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	2000005c 	.word	0x2000005c
 800444c:	200005a4 	.word	0x200005a4

08004450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0
  return uwTick;
 8004454:	4b03      	ldr	r3, [pc, #12]	; (8004464 <HAL_GetTick+0x14>)
 8004456:	681b      	ldr	r3, [r3, #0]
}
 8004458:	4618      	mov	r0, r3
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	200005a4 	.word	0x200005a4

08004468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004470:	f7ff ffee 	bl	8004450 <HAL_GetTick>
 8004474:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004480:	d005      	beq.n	800448e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004482:	4b0a      	ldr	r3, [pc, #40]	; (80044ac <HAL_Delay+0x44>)
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	461a      	mov	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4413      	add	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800448e:	bf00      	nop
 8004490:	f7ff ffde 	bl	8004450 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	429a      	cmp	r2, r3
 800449e:	d8f7      	bhi.n	8004490 <HAL_Delay+0x28>
  {
  }
}
 80044a0:	bf00      	nop
 80044a2:	bf00      	nop
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	2000005c 	.word	0x2000005c

080044b0 <__NVIC_SetPriorityGrouping>:
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f003 0307 	and.w	r3, r3, #7
 80044be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044c0:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <__NVIC_SetPriorityGrouping+0x40>)
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044cc:	4013      	ands	r3, r2
 80044ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80044d8:	4b06      	ldr	r3, [pc, #24]	; (80044f4 <__NVIC_SetPriorityGrouping+0x44>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044de:	4a04      	ldr	r2, [pc, #16]	; (80044f0 <__NVIC_SetPriorityGrouping+0x40>)
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	60d3      	str	r3, [r2, #12]
}
 80044e4:	bf00      	nop
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	e000ed00 	.word	0xe000ed00
 80044f4:	05fa0000 	.word	0x05fa0000

080044f8 <__NVIC_GetPriorityGrouping>:
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044fc:	4b04      	ldr	r3, [pc, #16]	; (8004510 <__NVIC_GetPriorityGrouping+0x18>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	0a1b      	lsrs	r3, r3, #8
 8004502:	f003 0307 	and.w	r3, r3, #7
}
 8004506:	4618      	mov	r0, r3
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	e000ed00 	.word	0xe000ed00

08004514 <__NVIC_EnableIRQ>:
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	4603      	mov	r3, r0
 800451c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800451e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004522:	2b00      	cmp	r3, #0
 8004524:	db0b      	blt.n	800453e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004526:	79fb      	ldrb	r3, [r7, #7]
 8004528:	f003 021f 	and.w	r2, r3, #31
 800452c:	4907      	ldr	r1, [pc, #28]	; (800454c <__NVIC_EnableIRQ+0x38>)
 800452e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004532:	095b      	lsrs	r3, r3, #5
 8004534:	2001      	movs	r0, #1
 8004536:	fa00 f202 	lsl.w	r2, r0, r2
 800453a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	e000e100 	.word	0xe000e100

08004550 <__NVIC_SetPriority>:
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	4603      	mov	r3, r0
 8004558:	6039      	str	r1, [r7, #0]
 800455a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800455c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004560:	2b00      	cmp	r3, #0
 8004562:	db0a      	blt.n	800457a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	b2da      	uxtb	r2, r3
 8004568:	490c      	ldr	r1, [pc, #48]	; (800459c <__NVIC_SetPriority+0x4c>)
 800456a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800456e:	0112      	lsls	r2, r2, #4
 8004570:	b2d2      	uxtb	r2, r2
 8004572:	440b      	add	r3, r1
 8004574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004578:	e00a      	b.n	8004590 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	b2da      	uxtb	r2, r3
 800457e:	4908      	ldr	r1, [pc, #32]	; (80045a0 <__NVIC_SetPriority+0x50>)
 8004580:	79fb      	ldrb	r3, [r7, #7]
 8004582:	f003 030f 	and.w	r3, r3, #15
 8004586:	3b04      	subs	r3, #4
 8004588:	0112      	lsls	r2, r2, #4
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	440b      	add	r3, r1
 800458e:	761a      	strb	r2, [r3, #24]
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	e000e100 	.word	0xe000e100
 80045a0:	e000ed00 	.word	0xe000ed00

080045a4 <NVIC_EncodePriority>:
{
 80045a4:	b480      	push	{r7}
 80045a6:	b089      	sub	sp, #36	; 0x24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	f1c3 0307 	rsb	r3, r3, #7
 80045be:	2b04      	cmp	r3, #4
 80045c0:	bf28      	it	cs
 80045c2:	2304      	movcs	r3, #4
 80045c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	3304      	adds	r3, #4
 80045ca:	2b06      	cmp	r3, #6
 80045cc:	d902      	bls.n	80045d4 <NVIC_EncodePriority+0x30>
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	3b03      	subs	r3, #3
 80045d2:	e000      	b.n	80045d6 <NVIC_EncodePriority+0x32>
 80045d4:	2300      	movs	r3, #0
 80045d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d8:	f04f 32ff 	mov.w	r2, #4294967295
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	43da      	mvns	r2, r3
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	401a      	ands	r2, r3
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045ec:	f04f 31ff 	mov.w	r1, #4294967295
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	fa01 f303 	lsl.w	r3, r1, r3
 80045f6:	43d9      	mvns	r1, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045fc:	4313      	orrs	r3, r2
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3724      	adds	r7, #36	; 0x24
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
	...

0800460c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3b01      	subs	r3, #1
 8004618:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800461c:	d301      	bcc.n	8004622 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800461e:	2301      	movs	r3, #1
 8004620:	e00f      	b.n	8004642 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004622:	4a0a      	ldr	r2, [pc, #40]	; (800464c <SysTick_Config+0x40>)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3b01      	subs	r3, #1
 8004628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800462a:	210f      	movs	r1, #15
 800462c:	f04f 30ff 	mov.w	r0, #4294967295
 8004630:	f7ff ff8e 	bl	8004550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004634:	4b05      	ldr	r3, [pc, #20]	; (800464c <SysTick_Config+0x40>)
 8004636:	2200      	movs	r2, #0
 8004638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800463a:	4b04      	ldr	r3, [pc, #16]	; (800464c <SysTick_Config+0x40>)
 800463c:	2207      	movs	r2, #7
 800463e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	e000e010 	.word	0xe000e010

08004650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f7ff ff29 	bl	80044b0 <__NVIC_SetPriorityGrouping>
}
 800465e:	bf00      	nop
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004666:	b580      	push	{r7, lr}
 8004668:	b086      	sub	sp, #24
 800466a:	af00      	add	r7, sp, #0
 800466c:	4603      	mov	r3, r0
 800466e:	60b9      	str	r1, [r7, #8]
 8004670:	607a      	str	r2, [r7, #4]
 8004672:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004674:	2300      	movs	r3, #0
 8004676:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004678:	f7ff ff3e 	bl	80044f8 <__NVIC_GetPriorityGrouping>
 800467c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	68b9      	ldr	r1, [r7, #8]
 8004682:	6978      	ldr	r0, [r7, #20]
 8004684:	f7ff ff8e 	bl	80045a4 <NVIC_EncodePriority>
 8004688:	4602      	mov	r2, r0
 800468a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800468e:	4611      	mov	r1, r2
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff ff5d 	bl	8004550 <__NVIC_SetPriority>
}
 8004696:	bf00      	nop
 8004698:	3718      	adds	r7, #24
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b082      	sub	sp, #8
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	4603      	mov	r3, r0
 80046a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff ff31 	bl	8004514 <__NVIC_EnableIRQ>
}
 80046b2:	bf00      	nop
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b082      	sub	sp, #8
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7ff ffa2 	bl	800460c <SysTick_Config>
 80046c8:	4603      	mov	r3, r0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b089      	sub	sp, #36	; 0x24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80046de:	2300      	movs	r3, #0
 80046e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80046e2:	2300      	movs	r3, #0
 80046e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80046e6:	2300      	movs	r3, #0
 80046e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80046ea:	2300      	movs	r3, #0
 80046ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80046ee:	2300      	movs	r3, #0
 80046f0:	61fb      	str	r3, [r7, #28]
 80046f2:	e175      	b.n	80049e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80046f4:	2201      	movs	r2, #1
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	4013      	ands	r3, r2
 8004706:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	429a      	cmp	r2, r3
 800470e:	f040 8164 	bne.w	80049da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f003 0303 	and.w	r3, r3, #3
 800471a:	2b01      	cmp	r3, #1
 800471c:	d005      	beq.n	800472a <HAL_GPIO_Init+0x56>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f003 0303 	and.w	r3, r3, #3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d130      	bne.n	800478c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	2203      	movs	r2, #3
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	43db      	mvns	r3, r3
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	4013      	ands	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	4313      	orrs	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004760:	2201      	movs	r2, #1
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	43db      	mvns	r3, r3
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	4013      	ands	r3, r2
 800476e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	091b      	lsrs	r3, r3, #4
 8004776:	f003 0201 	and.w	r2, r3, #1
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	4313      	orrs	r3, r2
 8004784:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f003 0303 	and.w	r3, r3, #3
 8004794:	2b03      	cmp	r3, #3
 8004796:	d017      	beq.n	80047c8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	2203      	movs	r2, #3
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	43db      	mvns	r3, r3
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	4013      	ands	r3, r2
 80047ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	fa02 f303 	lsl.w	r3, r2, r3
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	4313      	orrs	r3, r2
 80047c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f003 0303 	and.w	r3, r3, #3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d123      	bne.n	800481c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	08da      	lsrs	r2, r3, #3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3208      	adds	r2, #8
 80047dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	220f      	movs	r2, #15
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	43db      	mvns	r3, r3
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	4013      	ands	r3, r2
 80047f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	691a      	ldr	r2, [r3, #16]
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	4313      	orrs	r3, r2
 800480c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	08da      	lsrs	r2, r3, #3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	3208      	adds	r2, #8
 8004816:	69b9      	ldr	r1, [r7, #24]
 8004818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	2203      	movs	r2, #3
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	43db      	mvns	r3, r3
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	4013      	ands	r3, r2
 8004832:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f003 0203 	and.w	r2, r3, #3
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	fa02 f303 	lsl.w	r3, r2, r3
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	4313      	orrs	r3, r2
 8004848:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 80be 	beq.w	80049da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800485e:	4b66      	ldr	r3, [pc, #408]	; (80049f8 <HAL_GPIO_Init+0x324>)
 8004860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004862:	4a65      	ldr	r2, [pc, #404]	; (80049f8 <HAL_GPIO_Init+0x324>)
 8004864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004868:	6453      	str	r3, [r2, #68]	; 0x44
 800486a:	4b63      	ldr	r3, [pc, #396]	; (80049f8 <HAL_GPIO_Init+0x324>)
 800486c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004876:	4a61      	ldr	r2, [pc, #388]	; (80049fc <HAL_GPIO_Init+0x328>)
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	089b      	lsrs	r3, r3, #2
 800487c:	3302      	adds	r3, #2
 800487e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004882:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	220f      	movs	r2, #15
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	43db      	mvns	r3, r3
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	4013      	ands	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a58      	ldr	r2, [pc, #352]	; (8004a00 <HAL_GPIO_Init+0x32c>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d037      	beq.n	8004912 <HAL_GPIO_Init+0x23e>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a57      	ldr	r2, [pc, #348]	; (8004a04 <HAL_GPIO_Init+0x330>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d031      	beq.n	800490e <HAL_GPIO_Init+0x23a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a56      	ldr	r2, [pc, #344]	; (8004a08 <HAL_GPIO_Init+0x334>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d02b      	beq.n	800490a <HAL_GPIO_Init+0x236>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a55      	ldr	r2, [pc, #340]	; (8004a0c <HAL_GPIO_Init+0x338>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d025      	beq.n	8004906 <HAL_GPIO_Init+0x232>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a54      	ldr	r2, [pc, #336]	; (8004a10 <HAL_GPIO_Init+0x33c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d01f      	beq.n	8004902 <HAL_GPIO_Init+0x22e>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a53      	ldr	r2, [pc, #332]	; (8004a14 <HAL_GPIO_Init+0x340>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d019      	beq.n	80048fe <HAL_GPIO_Init+0x22a>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a52      	ldr	r2, [pc, #328]	; (8004a18 <HAL_GPIO_Init+0x344>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d013      	beq.n	80048fa <HAL_GPIO_Init+0x226>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a51      	ldr	r2, [pc, #324]	; (8004a1c <HAL_GPIO_Init+0x348>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d00d      	beq.n	80048f6 <HAL_GPIO_Init+0x222>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a50      	ldr	r2, [pc, #320]	; (8004a20 <HAL_GPIO_Init+0x34c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d007      	beq.n	80048f2 <HAL_GPIO_Init+0x21e>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a4f      	ldr	r2, [pc, #316]	; (8004a24 <HAL_GPIO_Init+0x350>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d101      	bne.n	80048ee <HAL_GPIO_Init+0x21a>
 80048ea:	2309      	movs	r3, #9
 80048ec:	e012      	b.n	8004914 <HAL_GPIO_Init+0x240>
 80048ee:	230a      	movs	r3, #10
 80048f0:	e010      	b.n	8004914 <HAL_GPIO_Init+0x240>
 80048f2:	2308      	movs	r3, #8
 80048f4:	e00e      	b.n	8004914 <HAL_GPIO_Init+0x240>
 80048f6:	2307      	movs	r3, #7
 80048f8:	e00c      	b.n	8004914 <HAL_GPIO_Init+0x240>
 80048fa:	2306      	movs	r3, #6
 80048fc:	e00a      	b.n	8004914 <HAL_GPIO_Init+0x240>
 80048fe:	2305      	movs	r3, #5
 8004900:	e008      	b.n	8004914 <HAL_GPIO_Init+0x240>
 8004902:	2304      	movs	r3, #4
 8004904:	e006      	b.n	8004914 <HAL_GPIO_Init+0x240>
 8004906:	2303      	movs	r3, #3
 8004908:	e004      	b.n	8004914 <HAL_GPIO_Init+0x240>
 800490a:	2302      	movs	r3, #2
 800490c:	e002      	b.n	8004914 <HAL_GPIO_Init+0x240>
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <HAL_GPIO_Init+0x240>
 8004912:	2300      	movs	r3, #0
 8004914:	69fa      	ldr	r2, [r7, #28]
 8004916:	f002 0203 	and.w	r2, r2, #3
 800491a:	0092      	lsls	r2, r2, #2
 800491c:	4093      	lsls	r3, r2
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	4313      	orrs	r3, r2
 8004922:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004924:	4935      	ldr	r1, [pc, #212]	; (80049fc <HAL_GPIO_Init+0x328>)
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	089b      	lsrs	r3, r3, #2
 800492a:	3302      	adds	r3, #2
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004932:	4b3d      	ldr	r3, [pc, #244]	; (8004a28 <HAL_GPIO_Init+0x354>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	43db      	mvns	r3, r3
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	4013      	ands	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	4313      	orrs	r3, r2
 8004954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004956:	4a34      	ldr	r2, [pc, #208]	; (8004a28 <HAL_GPIO_Init+0x354>)
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800495c:	4b32      	ldr	r3, [pc, #200]	; (8004a28 <HAL_GPIO_Init+0x354>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	43db      	mvns	r3, r3
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	4013      	ands	r3, r2
 800496a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	4313      	orrs	r3, r2
 800497e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004980:	4a29      	ldr	r2, [pc, #164]	; (8004a28 <HAL_GPIO_Init+0x354>)
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004986:	4b28      	ldr	r3, [pc, #160]	; (8004a28 <HAL_GPIO_Init+0x354>)
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	43db      	mvns	r3, r3
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	4013      	ands	r3, r2
 8004994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049aa:	4a1f      	ldr	r2, [pc, #124]	; (8004a28 <HAL_GPIO_Init+0x354>)
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049b0:	4b1d      	ldr	r3, [pc, #116]	; (8004a28 <HAL_GPIO_Init+0x354>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	43db      	mvns	r3, r3
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	4013      	ands	r3, r2
 80049be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d003      	beq.n	80049d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049d4:	4a14      	ldr	r2, [pc, #80]	; (8004a28 <HAL_GPIO_Init+0x354>)
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	3301      	adds	r3, #1
 80049de:	61fb      	str	r3, [r7, #28]
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	2b0f      	cmp	r3, #15
 80049e4:	f67f ae86 	bls.w	80046f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80049e8:	bf00      	nop
 80049ea:	bf00      	nop
 80049ec:	3724      	adds	r7, #36	; 0x24
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	40023800 	.word	0x40023800
 80049fc:	40013800 	.word	0x40013800
 8004a00:	40020000 	.word	0x40020000
 8004a04:	40020400 	.word	0x40020400
 8004a08:	40020800 	.word	0x40020800
 8004a0c:	40020c00 	.word	0x40020c00
 8004a10:	40021000 	.word	0x40021000
 8004a14:	40021400 	.word	0x40021400
 8004a18:	40021800 	.word	0x40021800
 8004a1c:	40021c00 	.word	0x40021c00
 8004a20:	40022000 	.word	0x40022000
 8004a24:	40022400 	.word	0x40022400
 8004a28:	40013c00 	.word	0x40013c00

08004a2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	460b      	mov	r3, r1
 8004a36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	691a      	ldr	r2, [r3, #16]
 8004a3c:	887b      	ldrh	r3, [r7, #2]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a44:	2301      	movs	r3, #1
 8004a46:	73fb      	strb	r3, [r7, #15]
 8004a48:	e001      	b.n	8004a4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	460b      	mov	r3, r1
 8004a66:	807b      	strh	r3, [r7, #2]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a6c:	787b      	ldrb	r3, [r7, #1]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a72:	887a      	ldrh	r2, [r7, #2]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004a78:	e003      	b.n	8004a82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004a7a:	887b      	ldrh	r3, [r7, #2]
 8004a7c:	041a      	lsls	r2, r3, #16
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	619a      	str	r2, [r3, #24]
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
	...

08004a90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	4603      	mov	r3, r0
 8004a98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004a9a:	4b08      	ldr	r3, [pc, #32]	; (8004abc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a9c:	695a      	ldr	r2, [r3, #20]
 8004a9e:	88fb      	ldrh	r3, [r7, #6]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d006      	beq.n	8004ab4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004aa6:	4a05      	ldr	r2, [pc, #20]	; (8004abc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004aa8:	88fb      	ldrh	r3, [r7, #6]
 8004aaa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004aac:	88fb      	ldrh	r3, [r7, #6]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fe fa42 	bl	8002f38 <HAL_GPIO_EXTI_Callback>
  }
}
 8004ab4:	bf00      	nop
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	40013c00 	.word	0x40013c00

08004ac0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e07f      	b.n	8004bd2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d106      	bne.n	8004aec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7fc f886 	bl	8000bf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2224      	movs	r2, #36	; 0x24
 8004af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0201 	bic.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d107      	bne.n	8004b3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689a      	ldr	r2, [r3, #8]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b36:	609a      	str	r2, [r3, #8]
 8004b38:	e006      	b.n	8004b48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	689a      	ldr	r2, [r3, #8]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004b46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d104      	bne.n	8004b5a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6859      	ldr	r1, [r3, #4]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	4b1d      	ldr	r3, [pc, #116]	; (8004bdc <HAL_I2C_Init+0x11c>)
 8004b66:	430b      	orrs	r3, r1
 8004b68:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68da      	ldr	r2, [r3, #12]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b78:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691a      	ldr	r2, [r3, #16]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	69d9      	ldr	r1, [r3, #28]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a1a      	ldr	r2, [r3, #32]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0201 	orr.w	r2, r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	02008000 	.word	0x02008000

08004be0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b088      	sub	sp, #32
 8004be4:	af02      	add	r7, sp, #8
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	4608      	mov	r0, r1
 8004bea:	4611      	mov	r1, r2
 8004bec:	461a      	mov	r2, r3
 8004bee:	4603      	mov	r3, r0
 8004bf0:	817b      	strh	r3, [r7, #10]
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	813b      	strh	r3, [r7, #8]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b20      	cmp	r3, #32
 8004c04:	f040 80f9 	bne.w	8004dfa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d002      	beq.n	8004c14 <HAL_I2C_Mem_Write+0x34>
 8004c0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d105      	bne.n	8004c20 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c1a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e0ed      	b.n	8004dfc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d101      	bne.n	8004c2e <HAL_I2C_Mem_Write+0x4e>
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	e0e6      	b.n	8004dfc <HAL_I2C_Mem_Write+0x21c>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c36:	f7ff fc0b 	bl	8004450 <HAL_GetTick>
 8004c3a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	2319      	movs	r3, #25
 8004c42:	2201      	movs	r2, #1
 8004c44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 fac3 	bl	80051d4 <I2C_WaitOnFlagUntilTimeout>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e0d1      	b.n	8004dfc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2221      	movs	r2, #33	; 0x21
 8004c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2240      	movs	r2, #64	; 0x40
 8004c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6a3a      	ldr	r2, [r7, #32]
 8004c72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c80:	88f8      	ldrh	r0, [r7, #6]
 8004c82:	893a      	ldrh	r2, [r7, #8]
 8004c84:	8979      	ldrh	r1, [r7, #10]
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	9301      	str	r3, [sp, #4]
 8004c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	4603      	mov	r3, r0
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 f9d3 	bl	800503c <I2C_RequestMemoryWrite>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d005      	beq.n	8004ca8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e0a9      	b.n	8004dfc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	2bff      	cmp	r3, #255	; 0xff
 8004cb0:	d90e      	bls.n	8004cd0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	22ff      	movs	r2, #255	; 0xff
 8004cb6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	8979      	ldrh	r1, [r7, #10]
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f000 fc1f 	bl	800550c <I2C_TransferConfig>
 8004cce:	e00f      	b.n	8004cf0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	8979      	ldrh	r1, [r7, #10]
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f000 fc0e 	bl	800550c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 faad 	bl	8005254 <I2C_WaitOnTXISFlagUntilTimeout>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e07b      	b.n	8004dfc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	781a      	ldrb	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	1c5a      	adds	r2, r3, #1
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	3b01      	subs	r3, #1
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d034      	beq.n	8004da8 <HAL_I2C_Mem_Write+0x1c8>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d130      	bne.n	8004da8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	2180      	movs	r1, #128	; 0x80
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 fa3f 	bl	80051d4 <I2C_WaitOnFlagUntilTimeout>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e04d      	b.n	8004dfc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	2bff      	cmp	r3, #255	; 0xff
 8004d68:	d90e      	bls.n	8004d88 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	22ff      	movs	r2, #255	; 0xff
 8004d6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d74:	b2da      	uxtb	r2, r3
 8004d76:	8979      	ldrh	r1, [r7, #10]
 8004d78:	2300      	movs	r3, #0
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f000 fbc3 	bl	800550c <I2C_TransferConfig>
 8004d86:	e00f      	b.n	8004da8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	8979      	ldrh	r1, [r7, #10]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f000 fbb2 	bl	800550c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d19e      	bne.n	8004cf0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f000 fa8c 	bl	80052d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d001      	beq.n	8004dc6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e01a      	b.n	8004dfc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6859      	ldr	r1, [r3, #4]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	4b0a      	ldr	r3, [pc, #40]	; (8004e04 <HAL_I2C_Mem_Write+0x224>)
 8004dda:	400b      	ands	r3, r1
 8004ddc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2220      	movs	r2, #32
 8004de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	e000      	b.n	8004dfc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004dfa:	2302      	movs	r3, #2
  }
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3718      	adds	r7, #24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	fe00e800 	.word	0xfe00e800

08004e08 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b088      	sub	sp, #32
 8004e0c:	af02      	add	r7, sp, #8
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	4608      	mov	r0, r1
 8004e12:	4611      	mov	r1, r2
 8004e14:	461a      	mov	r2, r3
 8004e16:	4603      	mov	r3, r0
 8004e18:	817b      	strh	r3, [r7, #10]
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	813b      	strh	r3, [r7, #8]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b20      	cmp	r3, #32
 8004e2c:	f040 80fd 	bne.w	800502a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e30:	6a3b      	ldr	r3, [r7, #32]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d002      	beq.n	8004e3c <HAL_I2C_Mem_Read+0x34>
 8004e36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d105      	bne.n	8004e48 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e42:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e0f1      	b.n	800502c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d101      	bne.n	8004e56 <HAL_I2C_Mem_Read+0x4e>
 8004e52:	2302      	movs	r3, #2
 8004e54:	e0ea      	b.n	800502c <HAL_I2C_Mem_Read+0x224>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e5e:	f7ff faf7 	bl	8004450 <HAL_GetTick>
 8004e62:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	2319      	movs	r3, #25
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 f9af 	bl	80051d4 <I2C_WaitOnFlagUntilTimeout>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e0d5      	b.n	800502c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2222      	movs	r2, #34	; 0x22
 8004e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2240      	movs	r2, #64	; 0x40
 8004e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6a3a      	ldr	r2, [r7, #32]
 8004e9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ea0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ea8:	88f8      	ldrh	r0, [r7, #6]
 8004eaa:	893a      	ldrh	r2, [r7, #8]
 8004eac:	8979      	ldrh	r1, [r7, #10]
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	9301      	str	r3, [sp, #4]
 8004eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f000 f913 	bl	80050e4 <I2C_RequestMemoryRead>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d005      	beq.n	8004ed0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e0ad      	b.n	800502c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	2bff      	cmp	r3, #255	; 0xff
 8004ed8:	d90e      	bls.n	8004ef8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	22ff      	movs	r2, #255	; 0xff
 8004ede:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	8979      	ldrh	r1, [r7, #10]
 8004ee8:	4b52      	ldr	r3, [pc, #328]	; (8005034 <HAL_I2C_Mem_Read+0x22c>)
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f000 fb0b 	bl	800550c <I2C_TransferConfig>
 8004ef6:	e00f      	b.n	8004f18 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	8979      	ldrh	r1, [r7, #10]
 8004f0a:	4b4a      	ldr	r3, [pc, #296]	; (8005034 <HAL_I2C_Mem_Read+0x22c>)
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 fafa 	bl	800550c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1e:	2200      	movs	r2, #0
 8004f20:	2104      	movs	r1, #4
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 f956 	bl	80051d4 <I2C_WaitOnFlagUntilTimeout>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e07c      	b.n	800502c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	b2d2      	uxtb	r2, r2
 8004f3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	1c5a      	adds	r2, r3, #1
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d034      	beq.n	8004fd8 <HAL_I2C_Mem_Read+0x1d0>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d130      	bne.n	8004fd8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	2180      	movs	r1, #128	; 0x80
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 f927 	bl	80051d4 <I2C_WaitOnFlagUntilTimeout>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e04d      	b.n	800502c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	2bff      	cmp	r3, #255	; 0xff
 8004f98:	d90e      	bls.n	8004fb8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	22ff      	movs	r2, #255	; 0xff
 8004f9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	8979      	ldrh	r1, [r7, #10]
 8004fa8:	2300      	movs	r3, #0
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f000 faab 	bl	800550c <I2C_TransferConfig>
 8004fb6:	e00f      	b.n	8004fd8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	8979      	ldrh	r1, [r7, #10]
 8004fca:	2300      	movs	r3, #0
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 fa9a 	bl	800550c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d19a      	bne.n	8004f18 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 f974 	bl	80052d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e01a      	b.n	800502c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6859      	ldr	r1, [r3, #4]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	4b0b      	ldr	r3, [pc, #44]	; (8005038 <HAL_I2C_Mem_Read+0x230>)
 800500a:	400b      	ands	r3, r1
 800500c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2220      	movs	r2, #32
 8005012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005026:	2300      	movs	r3, #0
 8005028:	e000      	b.n	800502c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800502a:	2302      	movs	r3, #2
  }
}
 800502c:	4618      	mov	r0, r3
 800502e:	3718      	adds	r7, #24
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	80002400 	.word	0x80002400
 8005038:	fe00e800 	.word	0xfe00e800

0800503c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af02      	add	r7, sp, #8
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	4608      	mov	r0, r1
 8005046:	4611      	mov	r1, r2
 8005048:	461a      	mov	r2, r3
 800504a:	4603      	mov	r3, r0
 800504c:	817b      	strh	r3, [r7, #10]
 800504e:	460b      	mov	r3, r1
 8005050:	813b      	strh	r3, [r7, #8]
 8005052:	4613      	mov	r3, r2
 8005054:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005056:	88fb      	ldrh	r3, [r7, #6]
 8005058:	b2da      	uxtb	r2, r3
 800505a:	8979      	ldrh	r1, [r7, #10]
 800505c:	4b20      	ldr	r3, [pc, #128]	; (80050e0 <I2C_RequestMemoryWrite+0xa4>)
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 fa51 	bl	800550c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800506a:	69fa      	ldr	r2, [r7, #28]
 800506c:	69b9      	ldr	r1, [r7, #24]
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f000 f8f0 	bl	8005254 <I2C_WaitOnTXISFlagUntilTimeout>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e02c      	b.n	80050d8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800507e:	88fb      	ldrh	r3, [r7, #6]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d105      	bne.n	8005090 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005084:	893b      	ldrh	r3, [r7, #8]
 8005086:	b2da      	uxtb	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	629a      	str	r2, [r3, #40]	; 0x28
 800508e:	e015      	b.n	80050bc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005090:	893b      	ldrh	r3, [r7, #8]
 8005092:	0a1b      	lsrs	r3, r3, #8
 8005094:	b29b      	uxth	r3, r3
 8005096:	b2da      	uxtb	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800509e:	69fa      	ldr	r2, [r7, #28]
 80050a0:	69b9      	ldr	r1, [r7, #24]
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f000 f8d6 	bl	8005254 <I2C_WaitOnTXISFlagUntilTimeout>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e012      	b.n	80050d8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050b2:	893b      	ldrh	r3, [r7, #8]
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	2200      	movs	r2, #0
 80050c4:	2180      	movs	r1, #128	; 0x80
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 f884 	bl	80051d4 <I2C_WaitOnFlagUntilTimeout>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e000      	b.n	80050d8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	80002000 	.word	0x80002000

080050e4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af02      	add	r7, sp, #8
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	4608      	mov	r0, r1
 80050ee:	4611      	mov	r1, r2
 80050f0:	461a      	mov	r2, r3
 80050f2:	4603      	mov	r3, r0
 80050f4:	817b      	strh	r3, [r7, #10]
 80050f6:	460b      	mov	r3, r1
 80050f8:	813b      	strh	r3, [r7, #8]
 80050fa:	4613      	mov	r3, r2
 80050fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80050fe:	88fb      	ldrh	r3, [r7, #6]
 8005100:	b2da      	uxtb	r2, r3
 8005102:	8979      	ldrh	r1, [r7, #10]
 8005104:	4b20      	ldr	r3, [pc, #128]	; (8005188 <I2C_RequestMemoryRead+0xa4>)
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	2300      	movs	r3, #0
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 f9fe 	bl	800550c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005110:	69fa      	ldr	r2, [r7, #28]
 8005112:	69b9      	ldr	r1, [r7, #24]
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 f89d 	bl	8005254 <I2C_WaitOnTXISFlagUntilTimeout>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e02c      	b.n	800517e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005124:	88fb      	ldrh	r3, [r7, #6]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d105      	bne.n	8005136 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800512a:	893b      	ldrh	r3, [r7, #8]
 800512c:	b2da      	uxtb	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	629a      	str	r2, [r3, #40]	; 0x28
 8005134:	e015      	b.n	8005162 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005136:	893b      	ldrh	r3, [r7, #8]
 8005138:	0a1b      	lsrs	r3, r3, #8
 800513a:	b29b      	uxth	r3, r3
 800513c:	b2da      	uxtb	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005144:	69fa      	ldr	r2, [r7, #28]
 8005146:	69b9      	ldr	r1, [r7, #24]
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 f883 	bl	8005254 <I2C_WaitOnTXISFlagUntilTimeout>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e012      	b.n	800517e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005158:	893b      	ldrh	r3, [r7, #8]
 800515a:	b2da      	uxtb	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	2200      	movs	r2, #0
 800516a:	2140      	movs	r1, #64	; 0x40
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 f831 	bl	80051d4 <I2C_WaitOnFlagUntilTimeout>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e000      	b.n	800517e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	80002000 	.word	0x80002000

0800518c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d103      	bne.n	80051aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2200      	movs	r2, #0
 80051a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d007      	beq.n	80051c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699a      	ldr	r2, [r3, #24]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0201 	orr.w	r2, r2, #1
 80051c6:	619a      	str	r2, [r3, #24]
  }
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	603b      	str	r3, [r7, #0]
 80051e0:	4613      	mov	r3, r2
 80051e2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051e4:	e022      	b.n	800522c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ec:	d01e      	beq.n	800522c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ee:	f7ff f92f 	bl	8004450 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d302      	bcc.n	8005204 <I2C_WaitOnFlagUntilTimeout+0x30>
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d113      	bne.n	800522c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005208:	f043 0220 	orr.w	r2, r3, #32
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2220      	movs	r2, #32
 8005214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e00f      	b.n	800524c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	699a      	ldr	r2, [r3, #24]
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	4013      	ands	r3, r2
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	429a      	cmp	r2, r3
 800523a:	bf0c      	ite	eq
 800523c:	2301      	moveq	r3, #1
 800523e:	2300      	movne	r3, #0
 8005240:	b2db      	uxtb	r3, r3
 8005242:	461a      	mov	r2, r3
 8005244:	79fb      	ldrb	r3, [r7, #7]
 8005246:	429a      	cmp	r2, r3
 8005248:	d0cd      	beq.n	80051e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005260:	e02c      	b.n	80052bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	68b9      	ldr	r1, [r7, #8]
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f000 f870 	bl	800534c <I2C_IsErrorOccurred>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e02a      	b.n	80052cc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800527c:	d01e      	beq.n	80052bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800527e:	f7ff f8e7 	bl	8004450 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	429a      	cmp	r2, r3
 800528c:	d302      	bcc.n	8005294 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d113      	bne.n	80052bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005298:	f043 0220 	orr.w	r2, r3, #32
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e007      	b.n	80052cc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d1cb      	bne.n	8005262 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052e0:	e028      	b.n	8005334 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	68b9      	ldr	r1, [r7, #8]
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 f830 	bl	800534c <I2C_IsErrorOccurred>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e026      	b.n	8005344 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052f6:	f7ff f8ab 	bl	8004450 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	429a      	cmp	r2, r3
 8005304:	d302      	bcc.n	800530c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d113      	bne.n	8005334 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005310:	f043 0220 	orr.w	r2, r3, #32
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2220      	movs	r2, #32
 800531c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e007      	b.n	8005344 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	f003 0320 	and.w	r3, r3, #32
 800533e:	2b20      	cmp	r3, #32
 8005340:	d1cf      	bne.n	80052e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b08a      	sub	sp, #40	; 0x28
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005358:	2300      	movs	r3, #0
 800535a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005366:	2300      	movs	r3, #0
 8005368:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	f003 0310 	and.w	r3, r3, #16
 8005374:	2b00      	cmp	r3, #0
 8005376:	d068      	beq.n	800544a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2210      	movs	r2, #16
 800537e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005380:	e049      	b.n	8005416 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005388:	d045      	beq.n	8005416 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800538a:	f7ff f861 	bl	8004450 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	429a      	cmp	r2, r3
 8005398:	d302      	bcc.n	80053a0 <I2C_IsErrorOccurred+0x54>
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d13a      	bne.n	8005416 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80053b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053c2:	d121      	bne.n	8005408 <I2C_IsErrorOccurred+0xbc>
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053ca:	d01d      	beq.n	8005408 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80053cc:	7cfb      	ldrb	r3, [r7, #19]
 80053ce:	2b20      	cmp	r3, #32
 80053d0:	d01a      	beq.n	8005408 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053e0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80053e2:	f7ff f835 	bl	8004450 <HAL_GetTick>
 80053e6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053e8:	e00e      	b.n	8005408 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80053ea:	f7ff f831 	bl	8004450 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b19      	cmp	r3, #25
 80053f6:	d907      	bls.n	8005408 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80053f8:	6a3b      	ldr	r3, [r7, #32]
 80053fa:	f043 0320 	orr.w	r3, r3, #32
 80053fe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005406:	e006      	b.n	8005416 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	f003 0320 	and.w	r3, r3, #32
 8005412:	2b20      	cmp	r3, #32
 8005414:	d1e9      	bne.n	80053ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	f003 0320 	and.w	r3, r3, #32
 8005420:	2b20      	cmp	r3, #32
 8005422:	d003      	beq.n	800542c <I2C_IsErrorOccurred+0xe0>
 8005424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005428:	2b00      	cmp	r3, #0
 800542a:	d0aa      	beq.n	8005382 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800542c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005430:	2b00      	cmp	r3, #0
 8005432:	d103      	bne.n	800543c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2220      	movs	r2, #32
 800543a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	f043 0304 	orr.w	r3, r3, #4
 8005442:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00b      	beq.n	8005474 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	f043 0301 	orr.w	r3, r3, #1
 8005462:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f44f 7280 	mov.w	r2, #256	; 0x100
 800546c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00b      	beq.n	8005496 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	f043 0308 	orr.w	r3, r3, #8
 8005484:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800548e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00b      	beq.n	80054b8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	f043 0302 	orr.w	r3, r3, #2
 80054a6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80054b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d01c      	beq.n	80054fa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f7ff fe63 	bl	800518c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6859      	ldr	r1, [r3, #4]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	4b0d      	ldr	r3, [pc, #52]	; (8005508 <I2C_IsErrorOccurred+0x1bc>)
 80054d2:	400b      	ands	r3, r1
 80054d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054da:	6a3b      	ldr	r3, [r7, #32]
 80054dc:	431a      	orrs	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2220      	movs	r2, #32
 80054e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80054fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3728      	adds	r7, #40	; 0x28
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	fe00e800 	.word	0xfe00e800

0800550c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	607b      	str	r3, [r7, #4]
 8005516:	460b      	mov	r3, r1
 8005518:	817b      	strh	r3, [r7, #10]
 800551a:	4613      	mov	r3, r2
 800551c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800551e:	897b      	ldrh	r3, [r7, #10]
 8005520:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005524:	7a7b      	ldrb	r3, [r7, #9]
 8005526:	041b      	lsls	r3, r3, #16
 8005528:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800552c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005532:	6a3b      	ldr	r3, [r7, #32]
 8005534:	4313      	orrs	r3, r2
 8005536:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800553a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	0d5b      	lsrs	r3, r3, #21
 8005546:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800554a:	4b08      	ldr	r3, [pc, #32]	; (800556c <I2C_TransferConfig+0x60>)
 800554c:	430b      	orrs	r3, r1
 800554e:	43db      	mvns	r3, r3
 8005550:	ea02 0103 	and.w	r1, r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	430a      	orrs	r2, r1
 800555c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800555e:	bf00      	nop
 8005560:	371c      	adds	r7, #28
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	03ff63ff 	.word	0x03ff63ff

08005570 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b20      	cmp	r3, #32
 8005584:	d138      	bne.n	80055f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800558c:	2b01      	cmp	r3, #1
 800558e:	d101      	bne.n	8005594 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005590:	2302      	movs	r3, #2
 8005592:	e032      	b.n	80055fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2224      	movs	r2, #36	; 0x24
 80055a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0201 	bic.w	r2, r2, #1
 80055b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6819      	ldr	r1, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	683a      	ldr	r2, [r7, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f042 0201 	orr.w	r2, r2, #1
 80055e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80055f4:	2300      	movs	r3, #0
 80055f6:	e000      	b.n	80055fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80055f8:	2302      	movs	r3, #2
  }
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005606:	b480      	push	{r7}
 8005608:	b085      	sub	sp, #20
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005616:	b2db      	uxtb	r3, r3
 8005618:	2b20      	cmp	r3, #32
 800561a:	d139      	bne.n	8005690 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005622:	2b01      	cmp	r3, #1
 8005624:	d101      	bne.n	800562a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005626:	2302      	movs	r3, #2
 8005628:	e033      	b.n	8005692 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2224      	movs	r2, #36	; 0x24
 8005636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 0201 	bic.w	r2, r2, #1
 8005648:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005658:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	021b      	lsls	r3, r3, #8
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	4313      	orrs	r3, r2
 8005662:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f042 0201 	orr.w	r2, r2, #1
 800567a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2220      	movs	r2, #32
 8005680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800568c:	2300      	movs	r3, #0
 800568e:	e000      	b.n	8005692 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005690:	2302      	movs	r3, #2
  }
}
 8005692:	4618      	mov	r0, r3
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
	...

080056a0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80056a0:	b480      	push	{r7}
 80056a2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056a4:	4b05      	ldr	r3, [pc, #20]	; (80056bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a04      	ldr	r2, [pc, #16]	; (80056bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80056aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056ae:	6013      	str	r3, [r2, #0]
}
 80056b0:	bf00      	nop
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	40007000 	.word	0x40007000

080056c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80056c6:	2300      	movs	r3, #0
 80056c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80056ca:	4b23      	ldr	r3, [pc, #140]	; (8005758 <HAL_PWREx_EnableOverDrive+0x98>)
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	4a22      	ldr	r2, [pc, #136]	; (8005758 <HAL_PWREx_EnableOverDrive+0x98>)
 80056d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056d4:	6413      	str	r3, [r2, #64]	; 0x40
 80056d6:	4b20      	ldr	r3, [pc, #128]	; (8005758 <HAL_PWREx_EnableOverDrive+0x98>)
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056de:	603b      	str	r3, [r7, #0]
 80056e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80056e2:	4b1e      	ldr	r3, [pc, #120]	; (800575c <HAL_PWREx_EnableOverDrive+0x9c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a1d      	ldr	r2, [pc, #116]	; (800575c <HAL_PWREx_EnableOverDrive+0x9c>)
 80056e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056ec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056ee:	f7fe feaf 	bl	8004450 <HAL_GetTick>
 80056f2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80056f4:	e009      	b.n	800570a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80056f6:	f7fe feab 	bl	8004450 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005704:	d901      	bls.n	800570a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e022      	b.n	8005750 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800570a:	4b14      	ldr	r3, [pc, #80]	; (800575c <HAL_PWREx_EnableOverDrive+0x9c>)
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005716:	d1ee      	bne.n	80056f6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005718:	4b10      	ldr	r3, [pc, #64]	; (800575c <HAL_PWREx_EnableOverDrive+0x9c>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a0f      	ldr	r2, [pc, #60]	; (800575c <HAL_PWREx_EnableOverDrive+0x9c>)
 800571e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005722:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005724:	f7fe fe94 	bl	8004450 <HAL_GetTick>
 8005728:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800572a:	e009      	b.n	8005740 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800572c:	f7fe fe90 	bl	8004450 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800573a:	d901      	bls.n	8005740 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e007      	b.n	8005750 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005740:	4b06      	ldr	r3, [pc, #24]	; (800575c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005748:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800574c:	d1ee      	bne.n	800572c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	40023800 	.word	0x40023800
 800575c:	40007000 	.word	0x40007000

08005760 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005768:	2300      	movs	r3, #0
 800576a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e29b      	b.n	8005cae <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	f000 8087 	beq.w	8005892 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005784:	4b96      	ldr	r3, [pc, #600]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f003 030c 	and.w	r3, r3, #12
 800578c:	2b04      	cmp	r3, #4
 800578e:	d00c      	beq.n	80057aa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005790:	4b93      	ldr	r3, [pc, #588]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f003 030c 	and.w	r3, r3, #12
 8005798:	2b08      	cmp	r3, #8
 800579a:	d112      	bne.n	80057c2 <HAL_RCC_OscConfig+0x62>
 800579c:	4b90      	ldr	r3, [pc, #576]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057a8:	d10b      	bne.n	80057c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057aa:	4b8d      	ldr	r3, [pc, #564]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d06c      	beq.n	8005890 <HAL_RCC_OscConfig+0x130>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d168      	bne.n	8005890 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e275      	b.n	8005cae <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ca:	d106      	bne.n	80057da <HAL_RCC_OscConfig+0x7a>
 80057cc:	4b84      	ldr	r3, [pc, #528]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a83      	ldr	r2, [pc, #524]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 80057d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057d6:	6013      	str	r3, [r2, #0]
 80057d8:	e02e      	b.n	8005838 <HAL_RCC_OscConfig+0xd8>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10c      	bne.n	80057fc <HAL_RCC_OscConfig+0x9c>
 80057e2:	4b7f      	ldr	r3, [pc, #508]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a7e      	ldr	r2, [pc, #504]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 80057e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057ec:	6013      	str	r3, [r2, #0]
 80057ee:	4b7c      	ldr	r3, [pc, #496]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a7b      	ldr	r2, [pc, #492]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 80057f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057f8:	6013      	str	r3, [r2, #0]
 80057fa:	e01d      	b.n	8005838 <HAL_RCC_OscConfig+0xd8>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005804:	d10c      	bne.n	8005820 <HAL_RCC_OscConfig+0xc0>
 8005806:	4b76      	ldr	r3, [pc, #472]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a75      	ldr	r2, [pc, #468]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 800580c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005810:	6013      	str	r3, [r2, #0]
 8005812:	4b73      	ldr	r3, [pc, #460]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a72      	ldr	r2, [pc, #456]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 8005818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800581c:	6013      	str	r3, [r2, #0]
 800581e:	e00b      	b.n	8005838 <HAL_RCC_OscConfig+0xd8>
 8005820:	4b6f      	ldr	r3, [pc, #444]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a6e      	ldr	r2, [pc, #440]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 8005826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800582a:	6013      	str	r3, [r2, #0]
 800582c:	4b6c      	ldr	r3, [pc, #432]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a6b      	ldr	r2, [pc, #428]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 8005832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005836:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d013      	beq.n	8005868 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005840:	f7fe fe06 	bl	8004450 <HAL_GetTick>
 8005844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005846:	e008      	b.n	800585a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005848:	f7fe fe02 	bl	8004450 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	2b64      	cmp	r3, #100	; 0x64
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e229      	b.n	8005cae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800585a:	4b61      	ldr	r3, [pc, #388]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0f0      	beq.n	8005848 <HAL_RCC_OscConfig+0xe8>
 8005866:	e014      	b.n	8005892 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005868:	f7fe fdf2 	bl	8004450 <HAL_GetTick>
 800586c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005870:	f7fe fdee 	bl	8004450 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b64      	cmp	r3, #100	; 0x64
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e215      	b.n	8005cae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005882:	4b57      	ldr	r3, [pc, #348]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1f0      	bne.n	8005870 <HAL_RCC_OscConfig+0x110>
 800588e:	e000      	b.n	8005892 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d069      	beq.n	8005972 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800589e:	4b50      	ldr	r3, [pc, #320]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f003 030c 	and.w	r3, r3, #12
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00b      	beq.n	80058c2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058aa:	4b4d      	ldr	r3, [pc, #308]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f003 030c 	and.w	r3, r3, #12
 80058b2:	2b08      	cmp	r3, #8
 80058b4:	d11c      	bne.n	80058f0 <HAL_RCC_OscConfig+0x190>
 80058b6:	4b4a      	ldr	r3, [pc, #296]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d116      	bne.n	80058f0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058c2:	4b47      	ldr	r3, [pc, #284]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d005      	beq.n	80058da <HAL_RCC_OscConfig+0x17a>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d001      	beq.n	80058da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e1e9      	b.n	8005cae <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058da:	4b41      	ldr	r3, [pc, #260]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	493d      	ldr	r1, [pc, #244]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ee:	e040      	b.n	8005972 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d023      	beq.n	8005940 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058f8:	4b39      	ldr	r3, [pc, #228]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a38      	ldr	r2, [pc, #224]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 80058fe:	f043 0301 	orr.w	r3, r3, #1
 8005902:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005904:	f7fe fda4 	bl	8004450 <HAL_GetTick>
 8005908:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800590a:	e008      	b.n	800591e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800590c:	f7fe fda0 	bl	8004450 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b02      	cmp	r3, #2
 8005918:	d901      	bls.n	800591e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e1c7      	b.n	8005cae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800591e:	4b30      	ldr	r3, [pc, #192]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	2b00      	cmp	r3, #0
 8005928:	d0f0      	beq.n	800590c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800592a:	4b2d      	ldr	r3, [pc, #180]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	4929      	ldr	r1, [pc, #164]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 800593a:	4313      	orrs	r3, r2
 800593c:	600b      	str	r3, [r1, #0]
 800593e:	e018      	b.n	8005972 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005940:	4b27      	ldr	r3, [pc, #156]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a26      	ldr	r2, [pc, #152]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 8005946:	f023 0301 	bic.w	r3, r3, #1
 800594a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594c:	f7fe fd80 	bl	8004450 <HAL_GetTick>
 8005950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005952:	e008      	b.n	8005966 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005954:	f7fe fd7c 	bl	8004450 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b02      	cmp	r3, #2
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e1a3      	b.n	8005cae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005966:	4b1e      	ldr	r3, [pc, #120]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1f0      	bne.n	8005954 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0308 	and.w	r3, r3, #8
 800597a:	2b00      	cmp	r3, #0
 800597c:	d038      	beq.n	80059f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d019      	beq.n	80059ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005986:	4b16      	ldr	r3, [pc, #88]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 8005988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800598a:	4a15      	ldr	r2, [pc, #84]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 800598c:	f043 0301 	orr.w	r3, r3, #1
 8005990:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005992:	f7fe fd5d 	bl	8004450 <HAL_GetTick>
 8005996:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005998:	e008      	b.n	80059ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800599a:	f7fe fd59 	bl	8004450 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d901      	bls.n	80059ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e180      	b.n	8005cae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059ac:	4b0c      	ldr	r3, [pc, #48]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 80059ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d0f0      	beq.n	800599a <HAL_RCC_OscConfig+0x23a>
 80059b8:	e01a      	b.n	80059f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059ba:	4b09      	ldr	r3, [pc, #36]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 80059bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059be:	4a08      	ldr	r2, [pc, #32]	; (80059e0 <HAL_RCC_OscConfig+0x280>)
 80059c0:	f023 0301 	bic.w	r3, r3, #1
 80059c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059c6:	f7fe fd43 	bl	8004450 <HAL_GetTick>
 80059ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059cc:	e00a      	b.n	80059e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059ce:	f7fe fd3f 	bl	8004450 <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d903      	bls.n	80059e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e166      	b.n	8005cae <HAL_RCC_OscConfig+0x54e>
 80059e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059e4:	4b92      	ldr	r3, [pc, #584]	; (8005c30 <HAL_RCC_OscConfig+0x4d0>)
 80059e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059e8:	f003 0302 	and.w	r3, r3, #2
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1ee      	bne.n	80059ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0304 	and.w	r3, r3, #4
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f000 80a4 	beq.w	8005b46 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059fe:	4b8c      	ldr	r3, [pc, #560]	; (8005c30 <HAL_RCC_OscConfig+0x4d0>)
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10d      	bne.n	8005a26 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a0a:	4b89      	ldr	r3, [pc, #548]	; (8005c30 <HAL_RCC_OscConfig+0x4d0>)
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	4a88      	ldr	r2, [pc, #544]	; (8005c30 <HAL_RCC_OscConfig+0x4d0>)
 8005a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a14:	6413      	str	r3, [r2, #64]	; 0x40
 8005a16:	4b86      	ldr	r3, [pc, #536]	; (8005c30 <HAL_RCC_OscConfig+0x4d0>)
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a1e:	60bb      	str	r3, [r7, #8]
 8005a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a22:	2301      	movs	r3, #1
 8005a24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a26:	4b83      	ldr	r3, [pc, #524]	; (8005c34 <HAL_RCC_OscConfig+0x4d4>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d118      	bne.n	8005a64 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005a32:	4b80      	ldr	r3, [pc, #512]	; (8005c34 <HAL_RCC_OscConfig+0x4d4>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a7f      	ldr	r2, [pc, #508]	; (8005c34 <HAL_RCC_OscConfig+0x4d4>)
 8005a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a3e:	f7fe fd07 	bl	8004450 <HAL_GetTick>
 8005a42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a44:	e008      	b.n	8005a58 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a46:	f7fe fd03 	bl	8004450 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	2b64      	cmp	r3, #100	; 0x64
 8005a52:	d901      	bls.n	8005a58 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e12a      	b.n	8005cae <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a58:	4b76      	ldr	r3, [pc, #472]	; (8005c34 <HAL_RCC_OscConfig+0x4d4>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d0f0      	beq.n	8005a46 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d106      	bne.n	8005a7a <HAL_RCC_OscConfig+0x31a>
 8005a6c:	4b70      	ldr	r3, [pc, #448]	; (8005c30 <HAL_RCC_OscConfig+0x4d0>)
 8005a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a70:	4a6f      	ldr	r2, [pc, #444]	; (8005c30 <HAL_RCC_OscConfig+0x4d0>)
 8005a72:	f043 0301 	orr.w	r3, r3, #1
 8005a76:	6713      	str	r3, [r2, #112]	; 0x70
 8005a78:	e02d      	b.n	8005ad6 <HAL_RCC_OscConfig+0x376>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10c      	bne.n	8005a9c <HAL_RCC_OscConfig+0x33c>
 8005a82:	4b6b      	ldr	r3, [pc, #428]	; (8005c30 <HAL_RCC_OscConfig+0x4d0>)
 8005a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a86:	4a6a      	ldr	r2, [pc, #424]	; (8005c30 <HAL_RCC_OscConfig+0x4d0>)
 8005a88:	f023 0301 	bic.w	r3, r3, #1
 8005a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a8e:	4b68      	ldr	r3, [pc, #416]	; (8005c30 <HAL_RCC_OscConfig+0x4d0>)
 8005a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a92:	4a67      	ldr	r2, [pc, #412]	; (8005c30 <HAL_RCC_OscConfig+0x4d0>)
 8005a94:	f023 0304 	bic.w	r3, r3, #4
 8005a98:	6713      	str	r3, [r2, #112]	; 0x70
 8005a9a:	e01c      	b.n	8005ad6 <HAL_RCC_OscConfig+0x376>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	2b05      	cmp	r3, #5
 8005aa2:	d10c      	bne.n	8005abe <HAL_RCC_OscConfig+0x35e>
 8005aa4:	4b62      	ldr	r3, [pc, #392]	; (8005c30 <HAL_RCC_OscConfig+0x4d0>)
 8005aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa8:	4a61      	ldr	r2, [pc, #388]	; (8005c30 <HAL_RCC_OscConfig+0x4d0>)
 8005aaa:	f043 0304 	orr.w	r3, r3, #4
 8005aae:	6713      	str	r3, [r2, #112]	; 0x70
 8005ab0:	4b5f      	ldr	r3, [pc, #380]	; (8005c30 <HAL_RCC_OscConfig+0x4d0>)
 8005ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab4:	4a5e      	ldr	r2, [pc, #376]	; (8005c30 <HAL_RCC_OscConfig+0x4d0>)
 8005ab6:	f043 0301 	orr.w	r3, r3, #1
 8005aba:	6713      	str	r3, [r2, #112]	; 0x70
 8005abc:	e00b      	b.n	8005ad6 <HAL_RCC_OscConfig+0x376>
 8005abe:	4b5c      	ldr	r3, [pc, #368]	; (8005c30 <HAL_RCC_OscConfig+0x4d0>)
 8005ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac2:	4a5b      	ldr	r2, [pc, #364]	; (8005c30 <HAL_RCC_OscConfig+0x4d0>)
 8005ac4:	f023 0301 	bic.w	r3, r3, #1
 8005ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8005aca:	4b59      	ldr	r3, [pc, #356]	; (8005c30 <HAL_RCC_OscConfig+0x4d0>)
 8005acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ace:	4a58      	ldr	r2, [pc, #352]	; (8005c30 <HAL_RCC_OscConfig+0x4d0>)
 8005ad0:	f023 0304 	bic.w	r3, r3, #4
 8005ad4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d015      	beq.n	8005b0a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ade:	f7fe fcb7 	bl	8004450 <HAL_GetTick>
 8005ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ae4:	e00a      	b.n	8005afc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ae6:	f7fe fcb3 	bl	8004450 <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d901      	bls.n	8005afc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e0d8      	b.n	8005cae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005afc:	4b4c      	ldr	r3, [pc, #304]	; (8005c30 <HAL_RCC_OscConfig+0x4d0>)
 8005afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d0ee      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x386>
 8005b08:	e014      	b.n	8005b34 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b0a:	f7fe fca1 	bl	8004450 <HAL_GetTick>
 8005b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b10:	e00a      	b.n	8005b28 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b12:	f7fe fc9d 	bl	8004450 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d901      	bls.n	8005b28 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e0c2      	b.n	8005cae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b28:	4b41      	ldr	r3, [pc, #260]	; (8005c30 <HAL_RCC_OscConfig+0x4d0>)
 8005b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1ee      	bne.n	8005b12 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b34:	7dfb      	ldrb	r3, [r7, #23]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d105      	bne.n	8005b46 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b3a:	4b3d      	ldr	r3, [pc, #244]	; (8005c30 <HAL_RCC_OscConfig+0x4d0>)
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3e:	4a3c      	ldr	r2, [pc, #240]	; (8005c30 <HAL_RCC_OscConfig+0x4d0>)
 8005b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f000 80ae 	beq.w	8005cac <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b50:	4b37      	ldr	r3, [pc, #220]	; (8005c30 <HAL_RCC_OscConfig+0x4d0>)
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f003 030c 	and.w	r3, r3, #12
 8005b58:	2b08      	cmp	r3, #8
 8005b5a:	d06d      	beq.n	8005c38 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d14b      	bne.n	8005bfc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b64:	4b32      	ldr	r3, [pc, #200]	; (8005c30 <HAL_RCC_OscConfig+0x4d0>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a31      	ldr	r2, [pc, #196]	; (8005c30 <HAL_RCC_OscConfig+0x4d0>)
 8005b6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b70:	f7fe fc6e 	bl	8004450 <HAL_GetTick>
 8005b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b76:	e008      	b.n	8005b8a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b78:	f7fe fc6a 	bl	8004450 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d901      	bls.n	8005b8a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e091      	b.n	8005cae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b8a:	4b29      	ldr	r3, [pc, #164]	; (8005c30 <HAL_RCC_OscConfig+0x4d0>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1f0      	bne.n	8005b78 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	69da      	ldr	r2, [r3, #28]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	431a      	orrs	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba4:	019b      	lsls	r3, r3, #6
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bac:	085b      	lsrs	r3, r3, #1
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	041b      	lsls	r3, r3, #16
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb8:	061b      	lsls	r3, r3, #24
 8005bba:	431a      	orrs	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc0:	071b      	lsls	r3, r3, #28
 8005bc2:	491b      	ldr	r1, [pc, #108]	; (8005c30 <HAL_RCC_OscConfig+0x4d0>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bc8:	4b19      	ldr	r3, [pc, #100]	; (8005c30 <HAL_RCC_OscConfig+0x4d0>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a18      	ldr	r2, [pc, #96]	; (8005c30 <HAL_RCC_OscConfig+0x4d0>)
 8005bce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bd4:	f7fe fc3c 	bl	8004450 <HAL_GetTick>
 8005bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bda:	e008      	b.n	8005bee <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bdc:	f7fe fc38 	bl	8004450 <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d901      	bls.n	8005bee <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e05f      	b.n	8005cae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bee:	4b10      	ldr	r3, [pc, #64]	; (8005c30 <HAL_RCC_OscConfig+0x4d0>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d0f0      	beq.n	8005bdc <HAL_RCC_OscConfig+0x47c>
 8005bfa:	e057      	b.n	8005cac <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bfc:	4b0c      	ldr	r3, [pc, #48]	; (8005c30 <HAL_RCC_OscConfig+0x4d0>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a0b      	ldr	r2, [pc, #44]	; (8005c30 <HAL_RCC_OscConfig+0x4d0>)
 8005c02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c08:	f7fe fc22 	bl	8004450 <HAL_GetTick>
 8005c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c0e:	e008      	b.n	8005c22 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c10:	f7fe fc1e 	bl	8004450 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d901      	bls.n	8005c22 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e045      	b.n	8005cae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c22:	4b03      	ldr	r3, [pc, #12]	; (8005c30 <HAL_RCC_OscConfig+0x4d0>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1f0      	bne.n	8005c10 <HAL_RCC_OscConfig+0x4b0>
 8005c2e:	e03d      	b.n	8005cac <HAL_RCC_OscConfig+0x54c>
 8005c30:	40023800 	.word	0x40023800
 8005c34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005c38:	4b1f      	ldr	r3, [pc, #124]	; (8005cb8 <HAL_RCC_OscConfig+0x558>)
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d030      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d129      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d122      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c68:	4013      	ands	r3, r2
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c6e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d119      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7e:	085b      	lsrs	r3, r3, #1
 8005c80:	3b01      	subs	r3, #1
 8005c82:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d10f      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c92:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d107      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d001      	beq.n	8005cac <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e000      	b.n	8005cae <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3718      	adds	r7, #24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	40023800 	.word	0x40023800

08005cbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e0d0      	b.n	8005e76 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cd4:	4b6a      	ldr	r3, [pc, #424]	; (8005e80 <HAL_RCC_ClockConfig+0x1c4>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 030f 	and.w	r3, r3, #15
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d910      	bls.n	8005d04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ce2:	4b67      	ldr	r3, [pc, #412]	; (8005e80 <HAL_RCC_ClockConfig+0x1c4>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f023 020f 	bic.w	r2, r3, #15
 8005cea:	4965      	ldr	r1, [pc, #404]	; (8005e80 <HAL_RCC_ClockConfig+0x1c4>)
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cf2:	4b63      	ldr	r3, [pc, #396]	; (8005e80 <HAL_RCC_ClockConfig+0x1c4>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 030f 	and.w	r3, r3, #15
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d001      	beq.n	8005d04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e0b8      	b.n	8005e76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0302 	and.w	r3, r3, #2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d020      	beq.n	8005d52 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0304 	and.w	r3, r3, #4
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d005      	beq.n	8005d28 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d1c:	4b59      	ldr	r3, [pc, #356]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	4a58      	ldr	r2, [pc, #352]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005d22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0308 	and.w	r3, r3, #8
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d005      	beq.n	8005d40 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d34:	4b53      	ldr	r3, [pc, #332]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	4a52      	ldr	r2, [pc, #328]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005d3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d40:	4b50      	ldr	r3, [pc, #320]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	494d      	ldr	r1, [pc, #308]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d040      	beq.n	8005de0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d107      	bne.n	8005d76 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d66:	4b47      	ldr	r3, [pc, #284]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d115      	bne.n	8005d9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e07f      	b.n	8005e76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d107      	bne.n	8005d8e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d7e:	4b41      	ldr	r3, [pc, #260]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d109      	bne.n	8005d9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e073      	b.n	8005e76 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d8e:	4b3d      	ldr	r3, [pc, #244]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0302 	and.w	r3, r3, #2
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e06b      	b.n	8005e76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d9e:	4b39      	ldr	r3, [pc, #228]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f023 0203 	bic.w	r2, r3, #3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	4936      	ldr	r1, [pc, #216]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005db0:	f7fe fb4e 	bl	8004450 <HAL_GetTick>
 8005db4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005db6:	e00a      	b.n	8005dce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005db8:	f7fe fb4a 	bl	8004450 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d901      	bls.n	8005dce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e053      	b.n	8005e76 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dce:	4b2d      	ldr	r3, [pc, #180]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f003 020c 	and.w	r2, r3, #12
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d1eb      	bne.n	8005db8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005de0:	4b27      	ldr	r3, [pc, #156]	; (8005e80 <HAL_RCC_ClockConfig+0x1c4>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 030f 	and.w	r3, r3, #15
 8005de8:	683a      	ldr	r2, [r7, #0]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d210      	bcs.n	8005e10 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dee:	4b24      	ldr	r3, [pc, #144]	; (8005e80 <HAL_RCC_ClockConfig+0x1c4>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f023 020f 	bic.w	r2, r3, #15
 8005df6:	4922      	ldr	r1, [pc, #136]	; (8005e80 <HAL_RCC_ClockConfig+0x1c4>)
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dfe:	4b20      	ldr	r3, [pc, #128]	; (8005e80 <HAL_RCC_ClockConfig+0x1c4>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 030f 	and.w	r3, r3, #15
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d001      	beq.n	8005e10 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e032      	b.n	8005e76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0304 	and.w	r3, r3, #4
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d008      	beq.n	8005e2e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e1c:	4b19      	ldr	r3, [pc, #100]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	4916      	ldr	r1, [pc, #88]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0308 	and.w	r3, r3, #8
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d009      	beq.n	8005e4e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e3a:	4b12      	ldr	r3, [pc, #72]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	00db      	lsls	r3, r3, #3
 8005e48:	490e      	ldr	r1, [pc, #56]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e4e:	f000 f821 	bl	8005e94 <HAL_RCC_GetSysClockFreq>
 8005e52:	4602      	mov	r2, r0
 8005e54:	4b0b      	ldr	r3, [pc, #44]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	091b      	lsrs	r3, r3, #4
 8005e5a:	f003 030f 	and.w	r3, r3, #15
 8005e5e:	490a      	ldr	r1, [pc, #40]	; (8005e88 <HAL_RCC_ClockConfig+0x1cc>)
 8005e60:	5ccb      	ldrb	r3, [r1, r3]
 8005e62:	fa22 f303 	lsr.w	r3, r2, r3
 8005e66:	4a09      	ldr	r2, [pc, #36]	; (8005e8c <HAL_RCC_ClockConfig+0x1d0>)
 8005e68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005e6a:	4b09      	ldr	r3, [pc, #36]	; (8005e90 <HAL_RCC_ClockConfig+0x1d4>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7fe faaa 	bl	80043c8 <HAL_InitTick>

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	40023c00 	.word	0x40023c00
 8005e84:	40023800 	.word	0x40023800
 8005e88:	0800c230 	.word	0x0800c230
 8005e8c:	20000050 	.word	0x20000050
 8005e90:	20000058 	.word	0x20000058

08005e94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e98:	b094      	sub	sp, #80	; 0x50
 8005e9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	647b      	str	r3, [r7, #68]	; 0x44
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005eac:	4b79      	ldr	r3, [pc, #484]	; (8006094 <HAL_RCC_GetSysClockFreq+0x200>)
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f003 030c 	and.w	r3, r3, #12
 8005eb4:	2b08      	cmp	r3, #8
 8005eb6:	d00d      	beq.n	8005ed4 <HAL_RCC_GetSysClockFreq+0x40>
 8005eb8:	2b08      	cmp	r3, #8
 8005eba:	f200 80e1 	bhi.w	8006080 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d002      	beq.n	8005ec8 <HAL_RCC_GetSysClockFreq+0x34>
 8005ec2:	2b04      	cmp	r3, #4
 8005ec4:	d003      	beq.n	8005ece <HAL_RCC_GetSysClockFreq+0x3a>
 8005ec6:	e0db      	b.n	8006080 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ec8:	4b73      	ldr	r3, [pc, #460]	; (8006098 <HAL_RCC_GetSysClockFreq+0x204>)
 8005eca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ecc:	e0db      	b.n	8006086 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ece:	4b73      	ldr	r3, [pc, #460]	; (800609c <HAL_RCC_GetSysClockFreq+0x208>)
 8005ed0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ed2:	e0d8      	b.n	8006086 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ed4:	4b6f      	ldr	r3, [pc, #444]	; (8006094 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005edc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005ede:	4b6d      	ldr	r3, [pc, #436]	; (8006094 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d063      	beq.n	8005fb2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eea:	4b6a      	ldr	r3, [pc, #424]	; (8006094 <HAL_RCC_GetSysClockFreq+0x200>)
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	099b      	lsrs	r3, r3, #6
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ef4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005efc:	633b      	str	r3, [r7, #48]	; 0x30
 8005efe:	2300      	movs	r3, #0
 8005f00:	637b      	str	r3, [r7, #52]	; 0x34
 8005f02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005f06:	4622      	mov	r2, r4
 8005f08:	462b      	mov	r3, r5
 8005f0a:	f04f 0000 	mov.w	r0, #0
 8005f0e:	f04f 0100 	mov.w	r1, #0
 8005f12:	0159      	lsls	r1, r3, #5
 8005f14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f18:	0150      	lsls	r0, r2, #5
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	4621      	mov	r1, r4
 8005f20:	1a51      	subs	r1, r2, r1
 8005f22:	6139      	str	r1, [r7, #16]
 8005f24:	4629      	mov	r1, r5
 8005f26:	eb63 0301 	sbc.w	r3, r3, r1
 8005f2a:	617b      	str	r3, [r7, #20]
 8005f2c:	f04f 0200 	mov.w	r2, #0
 8005f30:	f04f 0300 	mov.w	r3, #0
 8005f34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f38:	4659      	mov	r1, fp
 8005f3a:	018b      	lsls	r3, r1, #6
 8005f3c:	4651      	mov	r1, sl
 8005f3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f42:	4651      	mov	r1, sl
 8005f44:	018a      	lsls	r2, r1, #6
 8005f46:	4651      	mov	r1, sl
 8005f48:	ebb2 0801 	subs.w	r8, r2, r1
 8005f4c:	4659      	mov	r1, fp
 8005f4e:	eb63 0901 	sbc.w	r9, r3, r1
 8005f52:	f04f 0200 	mov.w	r2, #0
 8005f56:	f04f 0300 	mov.w	r3, #0
 8005f5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f66:	4690      	mov	r8, r2
 8005f68:	4699      	mov	r9, r3
 8005f6a:	4623      	mov	r3, r4
 8005f6c:	eb18 0303 	adds.w	r3, r8, r3
 8005f70:	60bb      	str	r3, [r7, #8]
 8005f72:	462b      	mov	r3, r5
 8005f74:	eb49 0303 	adc.w	r3, r9, r3
 8005f78:	60fb      	str	r3, [r7, #12]
 8005f7a:	f04f 0200 	mov.w	r2, #0
 8005f7e:	f04f 0300 	mov.w	r3, #0
 8005f82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005f86:	4629      	mov	r1, r5
 8005f88:	024b      	lsls	r3, r1, #9
 8005f8a:	4621      	mov	r1, r4
 8005f8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f90:	4621      	mov	r1, r4
 8005f92:	024a      	lsls	r2, r1, #9
 8005f94:	4610      	mov	r0, r2
 8005f96:	4619      	mov	r1, r3
 8005f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fa0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005fa4:	f7fa f9a4 	bl	80002f0 <__aeabi_uldivmod>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	460b      	mov	r3, r1
 8005fac:	4613      	mov	r3, r2
 8005fae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fb0:	e058      	b.n	8006064 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fb2:	4b38      	ldr	r3, [pc, #224]	; (8006094 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	099b      	lsrs	r3, r3, #6
 8005fb8:	2200      	movs	r2, #0
 8005fba:	4618      	mov	r0, r3
 8005fbc:	4611      	mov	r1, r2
 8005fbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005fc2:	623b      	str	r3, [r7, #32]
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8005fc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005fcc:	4642      	mov	r2, r8
 8005fce:	464b      	mov	r3, r9
 8005fd0:	f04f 0000 	mov.w	r0, #0
 8005fd4:	f04f 0100 	mov.w	r1, #0
 8005fd8:	0159      	lsls	r1, r3, #5
 8005fda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fde:	0150      	lsls	r0, r2, #5
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	4641      	mov	r1, r8
 8005fe6:	ebb2 0a01 	subs.w	sl, r2, r1
 8005fea:	4649      	mov	r1, r9
 8005fec:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ff0:	f04f 0200 	mov.w	r2, #0
 8005ff4:	f04f 0300 	mov.w	r3, #0
 8005ff8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ffc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006000:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006004:	ebb2 040a 	subs.w	r4, r2, sl
 8006008:	eb63 050b 	sbc.w	r5, r3, fp
 800600c:	f04f 0200 	mov.w	r2, #0
 8006010:	f04f 0300 	mov.w	r3, #0
 8006014:	00eb      	lsls	r3, r5, #3
 8006016:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800601a:	00e2      	lsls	r2, r4, #3
 800601c:	4614      	mov	r4, r2
 800601e:	461d      	mov	r5, r3
 8006020:	4643      	mov	r3, r8
 8006022:	18e3      	adds	r3, r4, r3
 8006024:	603b      	str	r3, [r7, #0]
 8006026:	464b      	mov	r3, r9
 8006028:	eb45 0303 	adc.w	r3, r5, r3
 800602c:	607b      	str	r3, [r7, #4]
 800602e:	f04f 0200 	mov.w	r2, #0
 8006032:	f04f 0300 	mov.w	r3, #0
 8006036:	e9d7 4500 	ldrd	r4, r5, [r7]
 800603a:	4629      	mov	r1, r5
 800603c:	028b      	lsls	r3, r1, #10
 800603e:	4621      	mov	r1, r4
 8006040:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006044:	4621      	mov	r1, r4
 8006046:	028a      	lsls	r2, r1, #10
 8006048:	4610      	mov	r0, r2
 800604a:	4619      	mov	r1, r3
 800604c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800604e:	2200      	movs	r2, #0
 8006050:	61bb      	str	r3, [r7, #24]
 8006052:	61fa      	str	r2, [r7, #28]
 8006054:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006058:	f7fa f94a 	bl	80002f0 <__aeabi_uldivmod>
 800605c:	4602      	mov	r2, r0
 800605e:	460b      	mov	r3, r1
 8006060:	4613      	mov	r3, r2
 8006062:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006064:	4b0b      	ldr	r3, [pc, #44]	; (8006094 <HAL_RCC_GetSysClockFreq+0x200>)
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	0c1b      	lsrs	r3, r3, #16
 800606a:	f003 0303 	and.w	r3, r3, #3
 800606e:	3301      	adds	r3, #1
 8006070:	005b      	lsls	r3, r3, #1
 8006072:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006074:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006078:	fbb2 f3f3 	udiv	r3, r2, r3
 800607c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800607e:	e002      	b.n	8006086 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006080:	4b05      	ldr	r3, [pc, #20]	; (8006098 <HAL_RCC_GetSysClockFreq+0x204>)
 8006082:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006084:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006088:	4618      	mov	r0, r3
 800608a:	3750      	adds	r7, #80	; 0x50
 800608c:	46bd      	mov	sp, r7
 800608e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006092:	bf00      	nop
 8006094:	40023800 	.word	0x40023800
 8006098:	00f42400 	.word	0x00f42400
 800609c:	007a1200 	.word	0x007a1200

080060a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060a0:	b480      	push	{r7}
 80060a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060a4:	4b03      	ldr	r3, [pc, #12]	; (80060b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80060a6:	681b      	ldr	r3, [r3, #0]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	20000050 	.word	0x20000050

080060b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80060bc:	f7ff fff0 	bl	80060a0 <HAL_RCC_GetHCLKFreq>
 80060c0:	4602      	mov	r2, r0
 80060c2:	4b05      	ldr	r3, [pc, #20]	; (80060d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	0a9b      	lsrs	r3, r3, #10
 80060c8:	f003 0307 	and.w	r3, r3, #7
 80060cc:	4903      	ldr	r1, [pc, #12]	; (80060dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80060ce:	5ccb      	ldrb	r3, [r1, r3]
 80060d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	40023800 	.word	0x40023800
 80060dc:	0800c240 	.word	0x0800c240

080060e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80060e4:	f7ff ffdc 	bl	80060a0 <HAL_RCC_GetHCLKFreq>
 80060e8:	4602      	mov	r2, r0
 80060ea:	4b05      	ldr	r3, [pc, #20]	; (8006100 <HAL_RCC_GetPCLK2Freq+0x20>)
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	0b5b      	lsrs	r3, r3, #13
 80060f0:	f003 0307 	and.w	r3, r3, #7
 80060f4:	4903      	ldr	r1, [pc, #12]	; (8006104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060f6:	5ccb      	ldrb	r3, [r1, r3]
 80060f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	40023800 	.word	0x40023800
 8006104:	0800c240 	.word	0x0800c240

08006108 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b088      	sub	sp, #32
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006110:	2300      	movs	r3, #0
 8006112:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006114:	2300      	movs	r3, #0
 8006116:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006118:	2300      	movs	r3, #0
 800611a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800611c:	2300      	movs	r3, #0
 800611e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006120:	2300      	movs	r3, #0
 8006122:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	2b00      	cmp	r3, #0
 800612e:	d012      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006130:	4b69      	ldr	r3, [pc, #420]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	4a68      	ldr	r2, [pc, #416]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006136:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800613a:	6093      	str	r3, [r2, #8]
 800613c:	4b66      	ldr	r3, [pc, #408]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800613e:	689a      	ldr	r2, [r3, #8]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006144:	4964      	ldr	r1, [pc, #400]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006146:	4313      	orrs	r3, r2
 8006148:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006152:	2301      	movs	r3, #1
 8006154:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d017      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006162:	4b5d      	ldr	r3, [pc, #372]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006164:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006168:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006170:	4959      	ldr	r1, [pc, #356]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006172:	4313      	orrs	r3, r2
 8006174:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006180:	d101      	bne.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006182:	2301      	movs	r3, #1
 8006184:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800618e:	2301      	movs	r3, #1
 8006190:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d017      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800619e:	4b4e      	ldr	r3, [pc, #312]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ac:	494a      	ldr	r1, [pc, #296]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061bc:	d101      	bne.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80061be:	2301      	movs	r3, #1
 80061c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d101      	bne.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80061ca:	2301      	movs	r3, #1
 80061cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80061da:	2301      	movs	r3, #1
 80061dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0320 	and.w	r3, r3, #32
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f000 808b 	beq.w	8006302 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80061ec:	4b3a      	ldr	r3, [pc, #232]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f0:	4a39      	ldr	r2, [pc, #228]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061f6:	6413      	str	r3, [r2, #64]	; 0x40
 80061f8:	4b37      	ldr	r3, [pc, #220]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006200:	60bb      	str	r3, [r7, #8]
 8006202:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006204:	4b35      	ldr	r3, [pc, #212]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a34      	ldr	r2, [pc, #208]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800620a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800620e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006210:	f7fe f91e 	bl	8004450 <HAL_GetTick>
 8006214:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006216:	e008      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006218:	f7fe f91a 	bl	8004450 <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	2b64      	cmp	r3, #100	; 0x64
 8006224:	d901      	bls.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e38f      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800622a:	4b2c      	ldr	r3, [pc, #176]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006232:	2b00      	cmp	r3, #0
 8006234:	d0f0      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006236:	4b28      	ldr	r3, [pc, #160]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800623e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d035      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	429a      	cmp	r2, r3
 8006252:	d02e      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006254:	4b20      	ldr	r3, [pc, #128]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800625c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800625e:	4b1e      	ldr	r3, [pc, #120]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006262:	4a1d      	ldr	r2, [pc, #116]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006268:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800626a:	4b1b      	ldr	r3, [pc, #108]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800626c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800626e:	4a1a      	ldr	r2, [pc, #104]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006270:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006274:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006276:	4a18      	ldr	r2, [pc, #96]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800627c:	4b16      	ldr	r3, [pc, #88]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800627e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006280:	f003 0301 	and.w	r3, r3, #1
 8006284:	2b01      	cmp	r3, #1
 8006286:	d114      	bne.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006288:	f7fe f8e2 	bl	8004450 <HAL_GetTick>
 800628c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800628e:	e00a      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006290:	f7fe f8de 	bl	8004450 <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	f241 3288 	movw	r2, #5000	; 0x1388
 800629e:	4293      	cmp	r3, r2
 80062a0:	d901      	bls.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e351      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062a6:	4b0c      	ldr	r3, [pc, #48]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062aa:	f003 0302 	and.w	r3, r3, #2
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d0ee      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062be:	d111      	bne.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80062c0:	4b05      	ldr	r3, [pc, #20]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80062cc:	4b04      	ldr	r3, [pc, #16]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80062ce:	400b      	ands	r3, r1
 80062d0:	4901      	ldr	r1, [pc, #4]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	608b      	str	r3, [r1, #8]
 80062d6:	e00b      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80062d8:	40023800 	.word	0x40023800
 80062dc:	40007000 	.word	0x40007000
 80062e0:	0ffffcff 	.word	0x0ffffcff
 80062e4:	4bac      	ldr	r3, [pc, #688]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	4aab      	ldr	r2, [pc, #684]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80062ee:	6093      	str	r3, [r2, #8]
 80062f0:	4ba9      	ldr	r3, [pc, #676]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062fc:	49a6      	ldr	r1, [pc, #664]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0310 	and.w	r3, r3, #16
 800630a:	2b00      	cmp	r3, #0
 800630c:	d010      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800630e:	4ba2      	ldr	r3, [pc, #648]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006314:	4aa0      	ldr	r2, [pc, #640]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006316:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800631a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800631e:	4b9e      	ldr	r3, [pc, #632]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006320:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006328:	499b      	ldr	r1, [pc, #620]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800632a:	4313      	orrs	r3, r2
 800632c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00a      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800633c:	4b96      	ldr	r3, [pc, #600]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800633e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006342:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800634a:	4993      	ldr	r1, [pc, #588]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800634c:	4313      	orrs	r3, r2
 800634e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00a      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800635e:	4b8e      	ldr	r3, [pc, #568]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006364:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800636c:	498a      	ldr	r1, [pc, #552]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800636e:	4313      	orrs	r3, r2
 8006370:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00a      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006380:	4b85      	ldr	r3, [pc, #532]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006386:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800638e:	4982      	ldr	r1, [pc, #520]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006390:	4313      	orrs	r3, r2
 8006392:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00a      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80063a2:	4b7d      	ldr	r3, [pc, #500]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b0:	4979      	ldr	r1, [pc, #484]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00a      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063c4:	4b74      	ldr	r3, [pc, #464]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ca:	f023 0203 	bic.w	r2, r3, #3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d2:	4971      	ldr	r1, [pc, #452]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00a      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063e6:	4b6c      	ldr	r3, [pc, #432]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ec:	f023 020c 	bic.w	r2, r3, #12
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063f4:	4968      	ldr	r1, [pc, #416]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00a      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006408:	4b63      	ldr	r3, [pc, #396]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800640a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800640e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006416:	4960      	ldr	r1, [pc, #384]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006418:	4313      	orrs	r3, r2
 800641a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00a      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800642a:	4b5b      	ldr	r3, [pc, #364]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800642c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006430:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006438:	4957      	ldr	r1, [pc, #348]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800643a:	4313      	orrs	r3, r2
 800643c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00a      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800644c:	4b52      	ldr	r3, [pc, #328]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800644e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006452:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800645a:	494f      	ldr	r1, [pc, #316]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800645c:	4313      	orrs	r3, r2
 800645e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00a      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800646e:	4b4a      	ldr	r3, [pc, #296]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006474:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800647c:	4946      	ldr	r1, [pc, #280]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800647e:	4313      	orrs	r3, r2
 8006480:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00a      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006490:	4b41      	ldr	r3, [pc, #260]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006496:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800649e:	493e      	ldr	r1, [pc, #248]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00a      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80064b2:	4b39      	ldr	r3, [pc, #228]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064c0:	4935      	ldr	r1, [pc, #212]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00a      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80064d4:	4b30      	ldr	r3, [pc, #192]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064da:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064e2:	492d      	ldr	r1, [pc, #180]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064e4:	4313      	orrs	r3, r2
 80064e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d011      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80064f6:	4b28      	ldr	r3, [pc, #160]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064fc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006504:	4924      	ldr	r1, [pc, #144]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006506:	4313      	orrs	r3, r2
 8006508:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006510:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006514:	d101      	bne.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006516:	2301      	movs	r3, #1
 8006518:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0308 	and.w	r3, r3, #8
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006526:	2301      	movs	r3, #1
 8006528:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00a      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006536:	4b18      	ldr	r3, [pc, #96]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800653c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006544:	4914      	ldr	r1, [pc, #80]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006546:	4313      	orrs	r3, r2
 8006548:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00b      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006558:	4b0f      	ldr	r3, [pc, #60]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800655a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800655e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006568:	490b      	ldr	r1, [pc, #44]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800656a:	4313      	orrs	r3, r2
 800656c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00f      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800657c:	4b06      	ldr	r3, [pc, #24]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800657e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006582:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800658c:	4902      	ldr	r1, [pc, #8]	; (8006598 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800658e:	4313      	orrs	r3, r2
 8006590:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006594:	e002      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8006596:	bf00      	nop
 8006598:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00b      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80065a8:	4b8a      	ldr	r3, [pc, #552]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b8:	4986      	ldr	r1, [pc, #536]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065ba:	4313      	orrs	r3, r2
 80065bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00b      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80065cc:	4b81      	ldr	r3, [pc, #516]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065d2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065dc:	497d      	ldr	r1, [pc, #500]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d006      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f000 80d6 	beq.w	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80065f8:	4b76      	ldr	r3, [pc, #472]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a75      	ldr	r2, [pc, #468]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006602:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006604:	f7fd ff24 	bl	8004450 <HAL_GetTick>
 8006608:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800660a:	e008      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800660c:	f7fd ff20 	bl	8004450 <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	2b64      	cmp	r3, #100	; 0x64
 8006618:	d901      	bls.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	e195      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800661e:	4b6d      	ldr	r3, [pc, #436]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1f0      	bne.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	2b00      	cmp	r3, #0
 8006634:	d021      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800663a:	2b00      	cmp	r3, #0
 800663c:	d11d      	bne.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800663e:	4b65      	ldr	r3, [pc, #404]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006640:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006644:	0c1b      	lsrs	r3, r3, #16
 8006646:	f003 0303 	and.w	r3, r3, #3
 800664a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800664c:	4b61      	ldr	r3, [pc, #388]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800664e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006652:	0e1b      	lsrs	r3, r3, #24
 8006654:	f003 030f 	and.w	r3, r3, #15
 8006658:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	019a      	lsls	r2, r3, #6
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	041b      	lsls	r3, r3, #16
 8006664:	431a      	orrs	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	061b      	lsls	r3, r3, #24
 800666a:	431a      	orrs	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	071b      	lsls	r3, r3, #28
 8006672:	4958      	ldr	r1, [pc, #352]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006674:	4313      	orrs	r3, r2
 8006676:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d004      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800668a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800668e:	d00a      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006698:	2b00      	cmp	r3, #0
 800669a:	d02e      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066a4:	d129      	bne.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80066a6:	4b4b      	ldr	r3, [pc, #300]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066ac:	0c1b      	lsrs	r3, r3, #16
 80066ae:	f003 0303 	and.w	r3, r3, #3
 80066b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80066b4:	4b47      	ldr	r3, [pc, #284]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066ba:	0f1b      	lsrs	r3, r3, #28
 80066bc:	f003 0307 	and.w	r3, r3, #7
 80066c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	019a      	lsls	r2, r3, #6
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	041b      	lsls	r3, r3, #16
 80066cc:	431a      	orrs	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	061b      	lsls	r3, r3, #24
 80066d4:	431a      	orrs	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	071b      	lsls	r3, r3, #28
 80066da:	493e      	ldr	r1, [pc, #248]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066dc:	4313      	orrs	r3, r2
 80066de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80066e2:	4b3c      	ldr	r3, [pc, #240]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066e8:	f023 021f 	bic.w	r2, r3, #31
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f0:	3b01      	subs	r3, #1
 80066f2:	4938      	ldr	r1, [pc, #224]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d01d      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006706:	4b33      	ldr	r3, [pc, #204]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006708:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800670c:	0e1b      	lsrs	r3, r3, #24
 800670e:	f003 030f 	and.w	r3, r3, #15
 8006712:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006714:	4b2f      	ldr	r3, [pc, #188]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006716:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800671a:	0f1b      	lsrs	r3, r3, #28
 800671c:	f003 0307 	and.w	r3, r3, #7
 8006720:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	019a      	lsls	r2, r3, #6
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	041b      	lsls	r3, r3, #16
 800672e:	431a      	orrs	r2, r3
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	061b      	lsls	r3, r3, #24
 8006734:	431a      	orrs	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	071b      	lsls	r3, r3, #28
 800673a:	4926      	ldr	r1, [pc, #152]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800673c:	4313      	orrs	r3, r2
 800673e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d011      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	019a      	lsls	r2, r3, #6
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	041b      	lsls	r3, r3, #16
 800675a:	431a      	orrs	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	061b      	lsls	r3, r3, #24
 8006762:	431a      	orrs	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	071b      	lsls	r3, r3, #28
 800676a:	491a      	ldr	r1, [pc, #104]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800676c:	4313      	orrs	r3, r2
 800676e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006772:	4b18      	ldr	r3, [pc, #96]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a17      	ldr	r2, [pc, #92]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006778:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800677c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800677e:	f7fd fe67 	bl	8004450 <HAL_GetTick>
 8006782:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006784:	e008      	b.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006786:	f7fd fe63 	bl	8004450 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	2b64      	cmp	r3, #100	; 0x64
 8006792:	d901      	bls.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e0d8      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006798:	4b0e      	ldr	r3, [pc, #56]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d0f0      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	f040 80ce 	bne.w	8006948 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80067ac:	4b09      	ldr	r3, [pc, #36]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a08      	ldr	r2, [pc, #32]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80067b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067b8:	f7fd fe4a 	bl	8004450 <HAL_GetTick>
 80067bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80067be:	e00b      	b.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80067c0:	f7fd fe46 	bl	8004450 <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	2b64      	cmp	r3, #100	; 0x64
 80067cc:	d904      	bls.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e0bb      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80067d2:	bf00      	nop
 80067d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80067d8:	4b5e      	ldr	r3, [pc, #376]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067e4:	d0ec      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d003      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d009      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006802:	2b00      	cmp	r3, #0
 8006804:	d02e      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680a:	2b00      	cmp	r3, #0
 800680c:	d12a      	bne.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800680e:	4b51      	ldr	r3, [pc, #324]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006814:	0c1b      	lsrs	r3, r3, #16
 8006816:	f003 0303 	and.w	r3, r3, #3
 800681a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800681c:	4b4d      	ldr	r3, [pc, #308]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800681e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006822:	0f1b      	lsrs	r3, r3, #28
 8006824:	f003 0307 	and.w	r3, r3, #7
 8006828:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	019a      	lsls	r2, r3, #6
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	041b      	lsls	r3, r3, #16
 8006834:	431a      	orrs	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	061b      	lsls	r3, r3, #24
 800683c:	431a      	orrs	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	071b      	lsls	r3, r3, #28
 8006842:	4944      	ldr	r1, [pc, #272]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006844:	4313      	orrs	r3, r2
 8006846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800684a:	4b42      	ldr	r3, [pc, #264]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800684c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006850:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006858:	3b01      	subs	r3, #1
 800685a:	021b      	lsls	r3, r3, #8
 800685c:	493d      	ldr	r1, [pc, #244]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800685e:	4313      	orrs	r3, r2
 8006860:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d022      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006874:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006878:	d11d      	bne.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800687a:	4b36      	ldr	r3, [pc, #216]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800687c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006880:	0e1b      	lsrs	r3, r3, #24
 8006882:	f003 030f 	and.w	r3, r3, #15
 8006886:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006888:	4b32      	ldr	r3, [pc, #200]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800688a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800688e:	0f1b      	lsrs	r3, r3, #28
 8006890:	f003 0307 	and.w	r3, r3, #7
 8006894:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	019a      	lsls	r2, r3, #6
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a1b      	ldr	r3, [r3, #32]
 80068a0:	041b      	lsls	r3, r3, #16
 80068a2:	431a      	orrs	r2, r3
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	061b      	lsls	r3, r3, #24
 80068a8:	431a      	orrs	r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	071b      	lsls	r3, r3, #28
 80068ae:	4929      	ldr	r1, [pc, #164]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80068b0:	4313      	orrs	r3, r2
 80068b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0308 	and.w	r3, r3, #8
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d028      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80068c2:	4b24      	ldr	r3, [pc, #144]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80068c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c8:	0e1b      	lsrs	r3, r3, #24
 80068ca:	f003 030f 	and.w	r3, r3, #15
 80068ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80068d0:	4b20      	ldr	r3, [pc, #128]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80068d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d6:	0c1b      	lsrs	r3, r3, #16
 80068d8:	f003 0303 	and.w	r3, r3, #3
 80068dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	019a      	lsls	r2, r3, #6
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	041b      	lsls	r3, r3, #16
 80068e8:	431a      	orrs	r2, r3
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	061b      	lsls	r3, r3, #24
 80068ee:	431a      	orrs	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	69db      	ldr	r3, [r3, #28]
 80068f4:	071b      	lsls	r3, r3, #28
 80068f6:	4917      	ldr	r1, [pc, #92]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80068f8:	4313      	orrs	r3, r2
 80068fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80068fe:	4b15      	ldr	r3, [pc, #84]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006900:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006904:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690c:	4911      	ldr	r1, [pc, #68]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800690e:	4313      	orrs	r3, r2
 8006910:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006914:	4b0f      	ldr	r3, [pc, #60]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a0e      	ldr	r2, [pc, #56]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800691a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800691e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006920:	f7fd fd96 	bl	8004450 <HAL_GetTick>
 8006924:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006926:	e008      	b.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006928:	f7fd fd92 	bl	8004450 <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	2b64      	cmp	r3, #100	; 0x64
 8006934:	d901      	bls.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e007      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800693a:	4b06      	ldr	r3, [pc, #24]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006942:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006946:	d1ef      	bne.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3720      	adds	r7, #32
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	40023800 	.word	0x40023800

08006958 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d101      	bne.n	800696a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e01c      	b.n	80069a4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	795b      	ldrb	r3, [r3, #5]
 800696e:	b2db      	uxtb	r3, r3
 8006970:	2b00      	cmp	r3, #0
 8006972:	d105      	bne.n	8006980 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7fc fb0c 	bl	8002f98 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2202      	movs	r2, #2
 8006984:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f042 0204 	orr.w	r2, r2, #4
 8006994:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d101      	bne.n	80069be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e09d      	b.n	8006afa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d108      	bne.n	80069d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069ce:	d009      	beq.n	80069e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	61da      	str	r2, [r3, #28]
 80069d6:	e005      	b.n	80069e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d106      	bne.n	8006a04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7fc fb3c 	bl	800307c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2202      	movs	r2, #2
 8006a08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a1a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a24:	d902      	bls.n	8006a2c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006a26:	2300      	movs	r3, #0
 8006a28:	60fb      	str	r3, [r7, #12]
 8006a2a:	e002      	b.n	8006a32 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a30:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006a3a:	d007      	beq.n	8006a4c <HAL_SPI_Init+0xa0>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a44:	d002      	beq.n	8006a4c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006a5c:	431a      	orrs	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	f003 0302 	and.w	r3, r3, #2
 8006a66:	431a      	orrs	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	695b      	ldr	r3, [r3, #20]
 8006a6c:	f003 0301 	and.w	r3, r3, #1
 8006a70:	431a      	orrs	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a7a:	431a      	orrs	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	69db      	ldr	r3, [r3, #28]
 8006a80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a84:	431a      	orrs	r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a8e:	ea42 0103 	orr.w	r1, r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a96:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	430a      	orrs	r2, r1
 8006aa0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	0c1b      	lsrs	r3, r3, #16
 8006aa8:	f003 0204 	and.w	r2, r3, #4
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab0:	f003 0310 	and.w	r3, r3, #16
 8006ab4:	431a      	orrs	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aba:	f003 0308 	and.w	r3, r3, #8
 8006abe:	431a      	orrs	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006ac8:	ea42 0103 	orr.w	r1, r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	69da      	ldr	r2, [r3, #28]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ae8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b088      	sub	sp, #32
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	60f8      	str	r0, [r7, #12]
 8006b0a:	60b9      	str	r1, [r7, #8]
 8006b0c:	603b      	str	r3, [r7, #0]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b12:	2300      	movs	r3, #0
 8006b14:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d101      	bne.n	8006b24 <HAL_SPI_Transmit+0x22>
 8006b20:	2302      	movs	r3, #2
 8006b22:	e158      	b.n	8006dd6 <HAL_SPI_Transmit+0x2d4>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b2c:	f7fd fc90 	bl	8004450 <HAL_GetTick>
 8006b30:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006b32:	88fb      	ldrh	r3, [r7, #6]
 8006b34:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d002      	beq.n	8006b48 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006b42:	2302      	movs	r3, #2
 8006b44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b46:	e13d      	b.n	8006dc4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d002      	beq.n	8006b54 <HAL_SPI_Transmit+0x52>
 8006b4e:	88fb      	ldrh	r3, [r7, #6]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d102      	bne.n	8006b5a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b58:	e134      	b.n	8006dc4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2203      	movs	r2, #3
 8006b5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	88fa      	ldrh	r2, [r7, #6]
 8006b72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	88fa      	ldrh	r2, [r7, #6]
 8006b78:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ba4:	d10f      	bne.n	8006bc6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bb4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bc4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd0:	2b40      	cmp	r3, #64	; 0x40
 8006bd2:	d007      	beq.n	8006be4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006be2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bec:	d94b      	bls.n	8006c86 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d002      	beq.n	8006bfc <HAL_SPI_Transmit+0xfa>
 8006bf6:	8afb      	ldrh	r3, [r7, #22]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d13e      	bne.n	8006c7a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c00:	881a      	ldrh	r2, [r3, #0]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0c:	1c9a      	adds	r2, r3, #2
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006c20:	e02b      	b.n	8006c7a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f003 0302 	and.w	r3, r3, #2
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d112      	bne.n	8006c56 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c34:	881a      	ldrh	r2, [r3, #0]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c40:	1c9a      	adds	r2, r3, #2
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c54:	e011      	b.n	8006c7a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c56:	f7fd fbfb 	bl	8004450 <HAL_GetTick>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	683a      	ldr	r2, [r7, #0]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d803      	bhi.n	8006c6e <HAL_SPI_Transmit+0x16c>
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c6c:	d102      	bne.n	8006c74 <HAL_SPI_Transmit+0x172>
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d102      	bne.n	8006c7a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006c78:	e0a4      	b.n	8006dc4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1ce      	bne.n	8006c22 <HAL_SPI_Transmit+0x120>
 8006c84:	e07c      	b.n	8006d80 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d002      	beq.n	8006c94 <HAL_SPI_Transmit+0x192>
 8006c8e:	8afb      	ldrh	r3, [r7, #22]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d170      	bne.n	8006d76 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d912      	bls.n	8006cc4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca2:	881a      	ldrh	r2, [r3, #0]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cae:	1c9a      	adds	r2, r3, #2
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	3b02      	subs	r3, #2
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006cc2:	e058      	b.n	8006d76 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	330c      	adds	r3, #12
 8006cce:	7812      	ldrb	r2, [r2, #0]
 8006cd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd6:	1c5a      	adds	r2, r3, #1
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006cea:	e044      	b.n	8006d76 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f003 0302 	and.w	r3, r3, #2
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d12b      	bne.n	8006d52 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d912      	bls.n	8006d2a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d08:	881a      	ldrh	r2, [r3, #0]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d14:	1c9a      	adds	r2, r3, #2
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	3b02      	subs	r3, #2
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d28:	e025      	b.n	8006d76 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	330c      	adds	r3, #12
 8006d34:	7812      	ldrb	r2, [r2, #0]
 8006d36:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3c:	1c5a      	adds	r2, r3, #1
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d50:	e011      	b.n	8006d76 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d52:	f7fd fb7d 	bl	8004450 <HAL_GetTick>
 8006d56:	4602      	mov	r2, r0
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	683a      	ldr	r2, [r7, #0]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d803      	bhi.n	8006d6a <HAL_SPI_Transmit+0x268>
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d68:	d102      	bne.n	8006d70 <HAL_SPI_Transmit+0x26e>
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d102      	bne.n	8006d76 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006d70:	2303      	movs	r3, #3
 8006d72:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d74:	e026      	b.n	8006dc4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1b5      	bne.n	8006cec <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d80:	69ba      	ldr	r2, [r7, #24]
 8006d82:	6839      	ldr	r1, [r7, #0]
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f000 f949 	bl	800701c <SPI_EndRxTxTransaction>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d002      	beq.n	8006d96 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2220      	movs	r2, #32
 8006d94:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10a      	bne.n	8006db4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d9e:	2300      	movs	r3, #0
 8006da0:	613b      	str	r3, [r7, #16]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	613b      	str	r3, [r7, #16]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	613b      	str	r3, [r7, #16]
 8006db2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d002      	beq.n	8006dc2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	77fb      	strb	r3, [r7, #31]
 8006dc0:	e000      	b.n	8006dc4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006dc2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006dd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3720      	adds	r7, #32
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
	...

08006de0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b088      	sub	sp, #32
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	603b      	str	r3, [r7, #0]
 8006dec:	4613      	mov	r3, r2
 8006dee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006df0:	f7fd fb2e 	bl	8004450 <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df8:	1a9b      	subs	r3, r3, r2
 8006dfa:	683a      	ldr	r2, [r7, #0]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e00:	f7fd fb26 	bl	8004450 <HAL_GetTick>
 8006e04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e06:	4b39      	ldr	r3, [pc, #228]	; (8006eec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	015b      	lsls	r3, r3, #5
 8006e0c:	0d1b      	lsrs	r3, r3, #20
 8006e0e:	69fa      	ldr	r2, [r7, #28]
 8006e10:	fb02 f303 	mul.w	r3, r2, r3
 8006e14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e16:	e054      	b.n	8006ec2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e1e:	d050      	beq.n	8006ec2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e20:	f7fd fb16 	bl	8004450 <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	69fa      	ldr	r2, [r7, #28]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d902      	bls.n	8006e36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d13d      	bne.n	8006eb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e4e:	d111      	bne.n	8006e74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e58:	d004      	beq.n	8006e64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e62:	d107      	bne.n	8006e74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e7c:	d10f      	bne.n	8006e9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e017      	b.n	8006ee2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d101      	bne.n	8006ebc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	689a      	ldr	r2, [r3, #8]
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	4013      	ands	r3, r2
 8006ecc:	68ba      	ldr	r2, [r7, #8]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	bf0c      	ite	eq
 8006ed2:	2301      	moveq	r3, #1
 8006ed4:	2300      	movne	r3, #0
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	461a      	mov	r2, r3
 8006eda:	79fb      	ldrb	r3, [r7, #7]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d19b      	bne.n	8006e18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3720      	adds	r7, #32
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	20000050 	.word	0x20000050

08006ef0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b08a      	sub	sp, #40	; 0x28
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]
 8006efc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006efe:	2300      	movs	r3, #0
 8006f00:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006f02:	f7fd faa5 	bl	8004450 <HAL_GetTick>
 8006f06:	4602      	mov	r2, r0
 8006f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0a:	1a9b      	subs	r3, r3, r2
 8006f0c:	683a      	ldr	r2, [r7, #0]
 8006f0e:	4413      	add	r3, r2
 8006f10:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006f12:	f7fd fa9d 	bl	8004450 <HAL_GetTick>
 8006f16:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	330c      	adds	r3, #12
 8006f1e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006f20:	4b3d      	ldr	r3, [pc, #244]	; (8007018 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	4613      	mov	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	00da      	lsls	r2, r3, #3
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	0d1b      	lsrs	r3, r3, #20
 8006f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f32:	fb02 f303 	mul.w	r3, r2, r3
 8006f36:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006f38:	e060      	b.n	8006ffc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006f40:	d107      	bne.n	8006f52 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d104      	bne.n	8006f52 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006f50:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f58:	d050      	beq.n	8006ffc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f5a:	f7fd fa79 	bl	8004450 <HAL_GetTick>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	6a3b      	ldr	r3, [r7, #32]
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d902      	bls.n	8006f70 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d13d      	bne.n	8006fec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	685a      	ldr	r2, [r3, #4]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f7e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f88:	d111      	bne.n	8006fae <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f92:	d004      	beq.n	8006f9e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f9c:	d107      	bne.n	8006fae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fb6:	d10f      	bne.n	8006fd8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fc6:	601a      	str	r2, [r3, #0]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fd6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e010      	b.n	800700e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d101      	bne.n	8006ff6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689a      	ldr	r2, [r3, #8]
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	4013      	ands	r3, r2
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	429a      	cmp	r2, r3
 800700a:	d196      	bne.n	8006f3a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3728      	adds	r7, #40	; 0x28
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	20000050 	.word	0x20000050

0800701c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b088      	sub	sp, #32
 8007020:	af02      	add	r7, sp, #8
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	2200      	movs	r2, #0
 8007030:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f7ff ff5b 	bl	8006ef0 <SPI_WaitFifoStateUntilTimeout>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d007      	beq.n	8007050 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007044:	f043 0220 	orr.w	r2, r3, #32
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e046      	b.n	80070de <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007050:	4b25      	ldr	r3, [pc, #148]	; (80070e8 <SPI_EndRxTxTransaction+0xcc>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a25      	ldr	r2, [pc, #148]	; (80070ec <SPI_EndRxTxTransaction+0xd0>)
 8007056:	fba2 2303 	umull	r2, r3, r2, r3
 800705a:	0d5b      	lsrs	r3, r3, #21
 800705c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007060:	fb02 f303 	mul.w	r3, r2, r3
 8007064:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800706e:	d112      	bne.n	8007096 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	2200      	movs	r2, #0
 8007078:	2180      	movs	r1, #128	; 0x80
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	f7ff feb0 	bl	8006de0 <SPI_WaitFlagStateUntilTimeout>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d016      	beq.n	80070b4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800708a:	f043 0220 	orr.w	r2, r3, #32
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e023      	b.n	80070de <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00a      	beq.n	80070b2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	3b01      	subs	r3, #1
 80070a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ac:	2b80      	cmp	r3, #128	; 0x80
 80070ae:	d0f2      	beq.n	8007096 <SPI_EndRxTxTransaction+0x7a>
 80070b0:	e000      	b.n	80070b4 <SPI_EndRxTxTransaction+0x98>
        break;
 80070b2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f7ff ff15 	bl	8006ef0 <SPI_WaitFifoStateUntilTimeout>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d007      	beq.n	80070dc <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070d0:	f043 0220 	orr.w	r2, r3, #32
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e000      	b.n	80070de <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3718      	adds	r7, #24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	20000050 	.word	0x20000050
 80070ec:	165e9f81 	.word	0x165e9f81

080070f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e049      	b.n	8007196 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d106      	bne.n	800711c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f7fc fab4 	bl	8003684 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2202      	movs	r2, #2
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	3304      	adds	r3, #4
 800712c:	4619      	mov	r1, r3
 800712e:	4610      	mov	r0, r2
 8007130:	f000 faca 	bl	80076c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3708      	adds	r7, #8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
	...

080071a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d001      	beq.n	80071b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e054      	b.n	8007262 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2202      	movs	r2, #2
 80071bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68da      	ldr	r2, [r3, #12]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f042 0201 	orr.w	r2, r2, #1
 80071ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a26      	ldr	r2, [pc, #152]	; (8007270 <HAL_TIM_Base_Start_IT+0xd0>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d022      	beq.n	8007220 <HAL_TIM_Base_Start_IT+0x80>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071e2:	d01d      	beq.n	8007220 <HAL_TIM_Base_Start_IT+0x80>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a22      	ldr	r2, [pc, #136]	; (8007274 <HAL_TIM_Base_Start_IT+0xd4>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d018      	beq.n	8007220 <HAL_TIM_Base_Start_IT+0x80>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a21      	ldr	r2, [pc, #132]	; (8007278 <HAL_TIM_Base_Start_IT+0xd8>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d013      	beq.n	8007220 <HAL_TIM_Base_Start_IT+0x80>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a1f      	ldr	r2, [pc, #124]	; (800727c <HAL_TIM_Base_Start_IT+0xdc>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d00e      	beq.n	8007220 <HAL_TIM_Base_Start_IT+0x80>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a1e      	ldr	r2, [pc, #120]	; (8007280 <HAL_TIM_Base_Start_IT+0xe0>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d009      	beq.n	8007220 <HAL_TIM_Base_Start_IT+0x80>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a1c      	ldr	r2, [pc, #112]	; (8007284 <HAL_TIM_Base_Start_IT+0xe4>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d004      	beq.n	8007220 <HAL_TIM_Base_Start_IT+0x80>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a1b      	ldr	r2, [pc, #108]	; (8007288 <HAL_TIM_Base_Start_IT+0xe8>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d115      	bne.n	800724c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	689a      	ldr	r2, [r3, #8]
 8007226:	4b19      	ldr	r3, [pc, #100]	; (800728c <HAL_TIM_Base_Start_IT+0xec>)
 8007228:	4013      	ands	r3, r2
 800722a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2b06      	cmp	r3, #6
 8007230:	d015      	beq.n	800725e <HAL_TIM_Base_Start_IT+0xbe>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007238:	d011      	beq.n	800725e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f042 0201 	orr.w	r2, r2, #1
 8007248:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800724a:	e008      	b.n	800725e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f042 0201 	orr.w	r2, r2, #1
 800725a:	601a      	str	r2, [r3, #0]
 800725c:	e000      	b.n	8007260 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800725e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3714      	adds	r7, #20
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop
 8007270:	40010000 	.word	0x40010000
 8007274:	40000400 	.word	0x40000400
 8007278:	40000800 	.word	0x40000800
 800727c:	40000c00 	.word	0x40000c00
 8007280:	40010400 	.word	0x40010400
 8007284:	40014000 	.word	0x40014000
 8007288:	40001800 	.word	0x40001800
 800728c:	00010007 	.word	0x00010007

08007290 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	f003 0302 	and.w	r3, r3, #2
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d122      	bne.n	80072ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	f003 0302 	and.w	r3, r3, #2
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d11b      	bne.n	80072ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f06f 0202 	mvn.w	r2, #2
 80072bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	699b      	ldr	r3, [r3, #24]
 80072ca:	f003 0303 	and.w	r3, r3, #3
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d003      	beq.n	80072da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f9da 	bl	800768c <HAL_TIM_IC_CaptureCallback>
 80072d8:	e005      	b.n	80072e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f9cc 	bl	8007678 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 f9dd 	bl	80076a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	f003 0304 	and.w	r3, r3, #4
 80072f6:	2b04      	cmp	r3, #4
 80072f8:	d122      	bne.n	8007340 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	f003 0304 	and.w	r3, r3, #4
 8007304:	2b04      	cmp	r3, #4
 8007306:	d11b      	bne.n	8007340 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f06f 0204 	mvn.w	r2, #4
 8007310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2202      	movs	r2, #2
 8007316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007322:	2b00      	cmp	r3, #0
 8007324:	d003      	beq.n	800732e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 f9b0 	bl	800768c <HAL_TIM_IC_CaptureCallback>
 800732c:	e005      	b.n	800733a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f9a2 	bl	8007678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 f9b3 	bl	80076a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	f003 0308 	and.w	r3, r3, #8
 800734a:	2b08      	cmp	r3, #8
 800734c:	d122      	bne.n	8007394 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	f003 0308 	and.w	r3, r3, #8
 8007358:	2b08      	cmp	r3, #8
 800735a:	d11b      	bne.n	8007394 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f06f 0208 	mvn.w	r2, #8
 8007364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2204      	movs	r2, #4
 800736a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	69db      	ldr	r3, [r3, #28]
 8007372:	f003 0303 	and.w	r3, r3, #3
 8007376:	2b00      	cmp	r3, #0
 8007378:	d003      	beq.n	8007382 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f986 	bl	800768c <HAL_TIM_IC_CaptureCallback>
 8007380:	e005      	b.n	800738e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f978 	bl	8007678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f989 	bl	80076a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	f003 0310 	and.w	r3, r3, #16
 800739e:	2b10      	cmp	r3, #16
 80073a0:	d122      	bne.n	80073e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	f003 0310 	and.w	r3, r3, #16
 80073ac:	2b10      	cmp	r3, #16
 80073ae:	d11b      	bne.n	80073e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f06f 0210 	mvn.w	r2, #16
 80073b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2208      	movs	r2, #8
 80073be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	69db      	ldr	r3, [r3, #28]
 80073c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d003      	beq.n	80073d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f95c 	bl	800768c <HAL_TIM_IC_CaptureCallback>
 80073d4:	e005      	b.n	80073e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f94e 	bl	8007678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f95f 	bl	80076a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d10e      	bne.n	8007414 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	f003 0301 	and.w	r3, r3, #1
 8007400:	2b01      	cmp	r3, #1
 8007402:	d107      	bne.n	8007414 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f06f 0201 	mvn.w	r2, #1
 800740c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f928 	bl	8007664 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800741e:	2b80      	cmp	r3, #128	; 0x80
 8007420:	d10e      	bne.n	8007440 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800742c:	2b80      	cmp	r3, #128	; 0x80
 800742e:	d107      	bne.n	8007440 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 fb16 	bl	8007a6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800744a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800744e:	d10e      	bne.n	800746e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800745a:	2b80      	cmp	r3, #128	; 0x80
 800745c:	d107      	bne.n	800746e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fb09 	bl	8007a80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007478:	2b40      	cmp	r3, #64	; 0x40
 800747a:	d10e      	bne.n	800749a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007486:	2b40      	cmp	r3, #64	; 0x40
 8007488:	d107      	bne.n	800749a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 f90d 	bl	80076b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	f003 0320 	and.w	r3, r3, #32
 80074a4:	2b20      	cmp	r3, #32
 80074a6:	d10e      	bne.n	80074c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	f003 0320 	and.w	r3, r3, #32
 80074b2:	2b20      	cmp	r3, #32
 80074b4:	d107      	bne.n	80074c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f06f 0220 	mvn.w	r2, #32
 80074be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 fac9 	bl	8007a58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074c6:	bf00      	nop
 80074c8:	3708      	adds	r7, #8
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
	...

080074d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074da:	2300      	movs	r3, #0
 80074dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d101      	bne.n	80074ec <HAL_TIM_ConfigClockSource+0x1c>
 80074e8:	2302      	movs	r3, #2
 80074ea:	e0b4      	b.n	8007656 <HAL_TIM_ConfigClockSource+0x186>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2202      	movs	r2, #2
 80074f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007504:	68ba      	ldr	r2, [r7, #8]
 8007506:	4b56      	ldr	r3, [pc, #344]	; (8007660 <HAL_TIM_ConfigClockSource+0x190>)
 8007508:	4013      	ands	r3, r2
 800750a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007512:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007524:	d03e      	beq.n	80075a4 <HAL_TIM_ConfigClockSource+0xd4>
 8007526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800752a:	f200 8087 	bhi.w	800763c <HAL_TIM_ConfigClockSource+0x16c>
 800752e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007532:	f000 8086 	beq.w	8007642 <HAL_TIM_ConfigClockSource+0x172>
 8007536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800753a:	d87f      	bhi.n	800763c <HAL_TIM_ConfigClockSource+0x16c>
 800753c:	2b70      	cmp	r3, #112	; 0x70
 800753e:	d01a      	beq.n	8007576 <HAL_TIM_ConfigClockSource+0xa6>
 8007540:	2b70      	cmp	r3, #112	; 0x70
 8007542:	d87b      	bhi.n	800763c <HAL_TIM_ConfigClockSource+0x16c>
 8007544:	2b60      	cmp	r3, #96	; 0x60
 8007546:	d050      	beq.n	80075ea <HAL_TIM_ConfigClockSource+0x11a>
 8007548:	2b60      	cmp	r3, #96	; 0x60
 800754a:	d877      	bhi.n	800763c <HAL_TIM_ConfigClockSource+0x16c>
 800754c:	2b50      	cmp	r3, #80	; 0x50
 800754e:	d03c      	beq.n	80075ca <HAL_TIM_ConfigClockSource+0xfa>
 8007550:	2b50      	cmp	r3, #80	; 0x50
 8007552:	d873      	bhi.n	800763c <HAL_TIM_ConfigClockSource+0x16c>
 8007554:	2b40      	cmp	r3, #64	; 0x40
 8007556:	d058      	beq.n	800760a <HAL_TIM_ConfigClockSource+0x13a>
 8007558:	2b40      	cmp	r3, #64	; 0x40
 800755a:	d86f      	bhi.n	800763c <HAL_TIM_ConfigClockSource+0x16c>
 800755c:	2b30      	cmp	r3, #48	; 0x30
 800755e:	d064      	beq.n	800762a <HAL_TIM_ConfigClockSource+0x15a>
 8007560:	2b30      	cmp	r3, #48	; 0x30
 8007562:	d86b      	bhi.n	800763c <HAL_TIM_ConfigClockSource+0x16c>
 8007564:	2b20      	cmp	r3, #32
 8007566:	d060      	beq.n	800762a <HAL_TIM_ConfigClockSource+0x15a>
 8007568:	2b20      	cmp	r3, #32
 800756a:	d867      	bhi.n	800763c <HAL_TIM_ConfigClockSource+0x16c>
 800756c:	2b00      	cmp	r3, #0
 800756e:	d05c      	beq.n	800762a <HAL_TIM_ConfigClockSource+0x15a>
 8007570:	2b10      	cmp	r3, #16
 8007572:	d05a      	beq.n	800762a <HAL_TIM_ConfigClockSource+0x15a>
 8007574:	e062      	b.n	800763c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6818      	ldr	r0, [r3, #0]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	6899      	ldr	r1, [r3, #8]
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	685a      	ldr	r2, [r3, #4]
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	f000 f9b9 	bl	80078fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007598:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68ba      	ldr	r2, [r7, #8]
 80075a0:	609a      	str	r2, [r3, #8]
      break;
 80075a2:	e04f      	b.n	8007644 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6818      	ldr	r0, [r3, #0]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	6899      	ldr	r1, [r3, #8]
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	685a      	ldr	r2, [r3, #4]
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	f000 f9a2 	bl	80078fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	689a      	ldr	r2, [r3, #8]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075c6:	609a      	str	r2, [r3, #8]
      break;
 80075c8:	e03c      	b.n	8007644 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6818      	ldr	r0, [r3, #0]
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	6859      	ldr	r1, [r3, #4]
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	461a      	mov	r2, r3
 80075d8:	f000 f916 	bl	8007808 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2150      	movs	r1, #80	; 0x50
 80075e2:	4618      	mov	r0, r3
 80075e4:	f000 f96f 	bl	80078c6 <TIM_ITRx_SetConfig>
      break;
 80075e8:	e02c      	b.n	8007644 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6818      	ldr	r0, [r3, #0]
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	6859      	ldr	r1, [r3, #4]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	461a      	mov	r2, r3
 80075f8:	f000 f935 	bl	8007866 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2160      	movs	r1, #96	; 0x60
 8007602:	4618      	mov	r0, r3
 8007604:	f000 f95f 	bl	80078c6 <TIM_ITRx_SetConfig>
      break;
 8007608:	e01c      	b.n	8007644 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6818      	ldr	r0, [r3, #0]
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	6859      	ldr	r1, [r3, #4]
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	461a      	mov	r2, r3
 8007618:	f000 f8f6 	bl	8007808 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2140      	movs	r1, #64	; 0x40
 8007622:	4618      	mov	r0, r3
 8007624:	f000 f94f 	bl	80078c6 <TIM_ITRx_SetConfig>
      break;
 8007628:	e00c      	b.n	8007644 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4619      	mov	r1, r3
 8007634:	4610      	mov	r0, r2
 8007636:	f000 f946 	bl	80078c6 <TIM_ITRx_SetConfig>
      break;
 800763a:	e003      	b.n	8007644 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	73fb      	strb	r3, [r7, #15]
      break;
 8007640:	e000      	b.n	8007644 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007642:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007654:	7bfb      	ldrb	r3, [r7, #15]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	fffeff88 	.word	0xfffeff88

08007664 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800766c:	bf00      	nop
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007694:	bf00      	nop
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076bc:	bf00      	nop
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a40      	ldr	r2, [pc, #256]	; (80077dc <TIM_Base_SetConfig+0x114>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d013      	beq.n	8007708 <TIM_Base_SetConfig+0x40>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076e6:	d00f      	beq.n	8007708 <TIM_Base_SetConfig+0x40>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a3d      	ldr	r2, [pc, #244]	; (80077e0 <TIM_Base_SetConfig+0x118>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d00b      	beq.n	8007708 <TIM_Base_SetConfig+0x40>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a3c      	ldr	r2, [pc, #240]	; (80077e4 <TIM_Base_SetConfig+0x11c>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d007      	beq.n	8007708 <TIM_Base_SetConfig+0x40>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a3b      	ldr	r2, [pc, #236]	; (80077e8 <TIM_Base_SetConfig+0x120>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d003      	beq.n	8007708 <TIM_Base_SetConfig+0x40>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a3a      	ldr	r2, [pc, #232]	; (80077ec <TIM_Base_SetConfig+0x124>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d108      	bne.n	800771a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800770e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	4313      	orrs	r3, r2
 8007718:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a2f      	ldr	r2, [pc, #188]	; (80077dc <TIM_Base_SetConfig+0x114>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d02b      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007728:	d027      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a2c      	ldr	r2, [pc, #176]	; (80077e0 <TIM_Base_SetConfig+0x118>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d023      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a2b      	ldr	r2, [pc, #172]	; (80077e4 <TIM_Base_SetConfig+0x11c>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d01f      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a2a      	ldr	r2, [pc, #168]	; (80077e8 <TIM_Base_SetConfig+0x120>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d01b      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a29      	ldr	r2, [pc, #164]	; (80077ec <TIM_Base_SetConfig+0x124>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d017      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a28      	ldr	r2, [pc, #160]	; (80077f0 <TIM_Base_SetConfig+0x128>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d013      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a27      	ldr	r2, [pc, #156]	; (80077f4 <TIM_Base_SetConfig+0x12c>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d00f      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a26      	ldr	r2, [pc, #152]	; (80077f8 <TIM_Base_SetConfig+0x130>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d00b      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a25      	ldr	r2, [pc, #148]	; (80077fc <TIM_Base_SetConfig+0x134>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d007      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a24      	ldr	r2, [pc, #144]	; (8007800 <TIM_Base_SetConfig+0x138>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d003      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a23      	ldr	r2, [pc, #140]	; (8007804 <TIM_Base_SetConfig+0x13c>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d108      	bne.n	800778c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	4313      	orrs	r3, r2
 800778a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	695b      	ldr	r3, [r3, #20]
 8007796:	4313      	orrs	r3, r2
 8007798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	689a      	ldr	r2, [r3, #8]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4a0a      	ldr	r2, [pc, #40]	; (80077dc <TIM_Base_SetConfig+0x114>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d003      	beq.n	80077c0 <TIM_Base_SetConfig+0xf8>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a0c      	ldr	r2, [pc, #48]	; (80077ec <TIM_Base_SetConfig+0x124>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d103      	bne.n	80077c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	691a      	ldr	r2, [r3, #16]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	615a      	str	r2, [r3, #20]
}
 80077ce:	bf00      	nop
 80077d0:	3714      	adds	r7, #20
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	40010000 	.word	0x40010000
 80077e0:	40000400 	.word	0x40000400
 80077e4:	40000800 	.word	0x40000800
 80077e8:	40000c00 	.word	0x40000c00
 80077ec:	40010400 	.word	0x40010400
 80077f0:	40014000 	.word	0x40014000
 80077f4:	40014400 	.word	0x40014400
 80077f8:	40014800 	.word	0x40014800
 80077fc:	40001800 	.word	0x40001800
 8007800:	40001c00 	.word	0x40001c00
 8007804:	40002000 	.word	0x40002000

08007808 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007808:	b480      	push	{r7}
 800780a:	b087      	sub	sp, #28
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6a1b      	ldr	r3, [r3, #32]
 8007818:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	f023 0201 	bic.w	r2, r3, #1
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007832:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	011b      	lsls	r3, r3, #4
 8007838:	693a      	ldr	r2, [r7, #16]
 800783a:	4313      	orrs	r3, r2
 800783c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	f023 030a 	bic.w	r3, r3, #10
 8007844:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007846:	697a      	ldr	r2, [r7, #20]
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	4313      	orrs	r3, r2
 800784c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	693a      	ldr	r2, [r7, #16]
 8007852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	621a      	str	r2, [r3, #32]
}
 800785a:	bf00      	nop
 800785c:	371c      	adds	r7, #28
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007866:	b480      	push	{r7}
 8007868:	b087      	sub	sp, #28
 800786a:	af00      	add	r7, sp, #0
 800786c:	60f8      	str	r0, [r7, #12]
 800786e:	60b9      	str	r1, [r7, #8]
 8007870:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6a1b      	ldr	r3, [r3, #32]
 8007876:	f023 0210 	bic.w	r2, r3, #16
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6a1b      	ldr	r3, [r3, #32]
 8007888:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007890:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	031b      	lsls	r3, r3, #12
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	4313      	orrs	r3, r2
 800789a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	011b      	lsls	r3, r3, #4
 80078a8:	693a      	ldr	r2, [r7, #16]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	621a      	str	r2, [r3, #32]
}
 80078ba:	bf00      	nop
 80078bc:	371c      	adds	r7, #28
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr

080078c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078c6:	b480      	push	{r7}
 80078c8:	b085      	sub	sp, #20
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
 80078ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078de:	683a      	ldr	r2, [r7, #0]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	f043 0307 	orr.w	r3, r3, #7
 80078e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	609a      	str	r2, [r3, #8]
}
 80078f0:	bf00      	nop
 80078f2:	3714      	adds	r7, #20
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b087      	sub	sp, #28
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
 8007908:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007916:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	021a      	lsls	r2, r3, #8
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	431a      	orrs	r2, r3
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	4313      	orrs	r3, r2
 8007924:	697a      	ldr	r2, [r7, #20]
 8007926:	4313      	orrs	r3, r2
 8007928:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	697a      	ldr	r2, [r7, #20]
 800792e:	609a      	str	r2, [r3, #8]
}
 8007930:	bf00      	nop
 8007932:	371c      	adds	r7, #28
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800793c:	b480      	push	{r7}
 800793e:	b085      	sub	sp, #20
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800794c:	2b01      	cmp	r3, #1
 800794e:	d101      	bne.n	8007954 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007950:	2302      	movs	r3, #2
 8007952:	e06d      	b.n	8007a30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2202      	movs	r2, #2
 8007960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a30      	ldr	r2, [pc, #192]	; (8007a3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d004      	beq.n	8007988 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a2f      	ldr	r2, [pc, #188]	; (8007a40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d108      	bne.n	800799a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800798e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	4313      	orrs	r3, r2
 8007998:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a20      	ldr	r2, [pc, #128]	; (8007a3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d022      	beq.n	8007a04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079c6:	d01d      	beq.n	8007a04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a1d      	ldr	r2, [pc, #116]	; (8007a44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d018      	beq.n	8007a04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a1c      	ldr	r2, [pc, #112]	; (8007a48 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d013      	beq.n	8007a04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a1a      	ldr	r2, [pc, #104]	; (8007a4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d00e      	beq.n	8007a04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a15      	ldr	r2, [pc, #84]	; (8007a40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d009      	beq.n	8007a04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a16      	ldr	r2, [pc, #88]	; (8007a50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d004      	beq.n	8007a04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a15      	ldr	r2, [pc, #84]	; (8007a54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d10c      	bne.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68ba      	ldr	r2, [r7, #8]
 8007a1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3714      	adds	r7, #20
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr
 8007a3c:	40010000 	.word	0x40010000
 8007a40:	40010400 	.word	0x40010400
 8007a44:	40000400 	.word	0x40000400
 8007a48:	40000800 	.word	0x40000800
 8007a4c:	40000c00 	.word	0x40000c00
 8007a50:	40014000 	.word	0x40014000
 8007a54:	40001800 	.word	0x40001800

08007a58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a60:	bf00      	nop
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a74:	bf00      	nop
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007a88:	bf00      	nop
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d101      	bne.n	8007aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e040      	b.n	8007b28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d106      	bne.n	8007abc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f7fb fe84 	bl	80037c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2224      	movs	r2, #36	; 0x24
 8007ac0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f022 0201 	bic.w	r2, r2, #1
 8007ad0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f82c 	bl	8007b30 <UART_SetConfig>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d101      	bne.n	8007ae2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e022      	b.n	8007b28 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d002      	beq.n	8007af0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 fa84 	bl	8007ff8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	685a      	ldr	r2, [r3, #4]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007afe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	689a      	ldr	r2, [r3, #8]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f042 0201 	orr.w	r2, r2, #1
 8007b1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 fb0b 	bl	800813c <UART_CheckIdleState>
 8007b26:	4603      	mov	r3, r0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b088      	sub	sp, #32
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	689a      	ldr	r2, [r3, #8]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	431a      	orrs	r2, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	695b      	ldr	r3, [r3, #20]
 8007b4a:	431a      	orrs	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	69db      	ldr	r3, [r3, #28]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	4ba6      	ldr	r3, [pc, #664]	; (8007df4 <UART_SetConfig+0x2c4>)
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	6812      	ldr	r2, [r2, #0]
 8007b62:	6979      	ldr	r1, [r7, #20]
 8007b64:	430b      	orrs	r3, r1
 8007b66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	68da      	ldr	r2, [r3, #12]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a1b      	ldr	r3, [r3, #32]
 8007b88:	697a      	ldr	r2, [r7, #20]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a94      	ldr	r2, [pc, #592]	; (8007df8 <UART_SetConfig+0x2c8>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d120      	bne.n	8007bee <UART_SetConfig+0xbe>
 8007bac:	4b93      	ldr	r3, [pc, #588]	; (8007dfc <UART_SetConfig+0x2cc>)
 8007bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bb2:	f003 0303 	and.w	r3, r3, #3
 8007bb6:	2b03      	cmp	r3, #3
 8007bb8:	d816      	bhi.n	8007be8 <UART_SetConfig+0xb8>
 8007bba:	a201      	add	r2, pc, #4	; (adr r2, 8007bc0 <UART_SetConfig+0x90>)
 8007bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc0:	08007bd1 	.word	0x08007bd1
 8007bc4:	08007bdd 	.word	0x08007bdd
 8007bc8:	08007bd7 	.word	0x08007bd7
 8007bcc:	08007be3 	.word	0x08007be3
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	77fb      	strb	r3, [r7, #31]
 8007bd4:	e150      	b.n	8007e78 <UART_SetConfig+0x348>
 8007bd6:	2302      	movs	r3, #2
 8007bd8:	77fb      	strb	r3, [r7, #31]
 8007bda:	e14d      	b.n	8007e78 <UART_SetConfig+0x348>
 8007bdc:	2304      	movs	r3, #4
 8007bde:	77fb      	strb	r3, [r7, #31]
 8007be0:	e14a      	b.n	8007e78 <UART_SetConfig+0x348>
 8007be2:	2308      	movs	r3, #8
 8007be4:	77fb      	strb	r3, [r7, #31]
 8007be6:	e147      	b.n	8007e78 <UART_SetConfig+0x348>
 8007be8:	2310      	movs	r3, #16
 8007bea:	77fb      	strb	r3, [r7, #31]
 8007bec:	e144      	b.n	8007e78 <UART_SetConfig+0x348>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a83      	ldr	r2, [pc, #524]	; (8007e00 <UART_SetConfig+0x2d0>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d132      	bne.n	8007c5e <UART_SetConfig+0x12e>
 8007bf8:	4b80      	ldr	r3, [pc, #512]	; (8007dfc <UART_SetConfig+0x2cc>)
 8007bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bfe:	f003 030c 	and.w	r3, r3, #12
 8007c02:	2b0c      	cmp	r3, #12
 8007c04:	d828      	bhi.n	8007c58 <UART_SetConfig+0x128>
 8007c06:	a201      	add	r2, pc, #4	; (adr r2, 8007c0c <UART_SetConfig+0xdc>)
 8007c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0c:	08007c41 	.word	0x08007c41
 8007c10:	08007c59 	.word	0x08007c59
 8007c14:	08007c59 	.word	0x08007c59
 8007c18:	08007c59 	.word	0x08007c59
 8007c1c:	08007c4d 	.word	0x08007c4d
 8007c20:	08007c59 	.word	0x08007c59
 8007c24:	08007c59 	.word	0x08007c59
 8007c28:	08007c59 	.word	0x08007c59
 8007c2c:	08007c47 	.word	0x08007c47
 8007c30:	08007c59 	.word	0x08007c59
 8007c34:	08007c59 	.word	0x08007c59
 8007c38:	08007c59 	.word	0x08007c59
 8007c3c:	08007c53 	.word	0x08007c53
 8007c40:	2300      	movs	r3, #0
 8007c42:	77fb      	strb	r3, [r7, #31]
 8007c44:	e118      	b.n	8007e78 <UART_SetConfig+0x348>
 8007c46:	2302      	movs	r3, #2
 8007c48:	77fb      	strb	r3, [r7, #31]
 8007c4a:	e115      	b.n	8007e78 <UART_SetConfig+0x348>
 8007c4c:	2304      	movs	r3, #4
 8007c4e:	77fb      	strb	r3, [r7, #31]
 8007c50:	e112      	b.n	8007e78 <UART_SetConfig+0x348>
 8007c52:	2308      	movs	r3, #8
 8007c54:	77fb      	strb	r3, [r7, #31]
 8007c56:	e10f      	b.n	8007e78 <UART_SetConfig+0x348>
 8007c58:	2310      	movs	r3, #16
 8007c5a:	77fb      	strb	r3, [r7, #31]
 8007c5c:	e10c      	b.n	8007e78 <UART_SetConfig+0x348>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a68      	ldr	r2, [pc, #416]	; (8007e04 <UART_SetConfig+0x2d4>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d120      	bne.n	8007caa <UART_SetConfig+0x17a>
 8007c68:	4b64      	ldr	r3, [pc, #400]	; (8007dfc <UART_SetConfig+0x2cc>)
 8007c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c6e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c72:	2b30      	cmp	r3, #48	; 0x30
 8007c74:	d013      	beq.n	8007c9e <UART_SetConfig+0x16e>
 8007c76:	2b30      	cmp	r3, #48	; 0x30
 8007c78:	d814      	bhi.n	8007ca4 <UART_SetConfig+0x174>
 8007c7a:	2b20      	cmp	r3, #32
 8007c7c:	d009      	beq.n	8007c92 <UART_SetConfig+0x162>
 8007c7e:	2b20      	cmp	r3, #32
 8007c80:	d810      	bhi.n	8007ca4 <UART_SetConfig+0x174>
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d002      	beq.n	8007c8c <UART_SetConfig+0x15c>
 8007c86:	2b10      	cmp	r3, #16
 8007c88:	d006      	beq.n	8007c98 <UART_SetConfig+0x168>
 8007c8a:	e00b      	b.n	8007ca4 <UART_SetConfig+0x174>
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	77fb      	strb	r3, [r7, #31]
 8007c90:	e0f2      	b.n	8007e78 <UART_SetConfig+0x348>
 8007c92:	2302      	movs	r3, #2
 8007c94:	77fb      	strb	r3, [r7, #31]
 8007c96:	e0ef      	b.n	8007e78 <UART_SetConfig+0x348>
 8007c98:	2304      	movs	r3, #4
 8007c9a:	77fb      	strb	r3, [r7, #31]
 8007c9c:	e0ec      	b.n	8007e78 <UART_SetConfig+0x348>
 8007c9e:	2308      	movs	r3, #8
 8007ca0:	77fb      	strb	r3, [r7, #31]
 8007ca2:	e0e9      	b.n	8007e78 <UART_SetConfig+0x348>
 8007ca4:	2310      	movs	r3, #16
 8007ca6:	77fb      	strb	r3, [r7, #31]
 8007ca8:	e0e6      	b.n	8007e78 <UART_SetConfig+0x348>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a56      	ldr	r2, [pc, #344]	; (8007e08 <UART_SetConfig+0x2d8>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d120      	bne.n	8007cf6 <UART_SetConfig+0x1c6>
 8007cb4:	4b51      	ldr	r3, [pc, #324]	; (8007dfc <UART_SetConfig+0x2cc>)
 8007cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007cbe:	2bc0      	cmp	r3, #192	; 0xc0
 8007cc0:	d013      	beq.n	8007cea <UART_SetConfig+0x1ba>
 8007cc2:	2bc0      	cmp	r3, #192	; 0xc0
 8007cc4:	d814      	bhi.n	8007cf0 <UART_SetConfig+0x1c0>
 8007cc6:	2b80      	cmp	r3, #128	; 0x80
 8007cc8:	d009      	beq.n	8007cde <UART_SetConfig+0x1ae>
 8007cca:	2b80      	cmp	r3, #128	; 0x80
 8007ccc:	d810      	bhi.n	8007cf0 <UART_SetConfig+0x1c0>
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d002      	beq.n	8007cd8 <UART_SetConfig+0x1a8>
 8007cd2:	2b40      	cmp	r3, #64	; 0x40
 8007cd4:	d006      	beq.n	8007ce4 <UART_SetConfig+0x1b4>
 8007cd6:	e00b      	b.n	8007cf0 <UART_SetConfig+0x1c0>
 8007cd8:	2300      	movs	r3, #0
 8007cda:	77fb      	strb	r3, [r7, #31]
 8007cdc:	e0cc      	b.n	8007e78 <UART_SetConfig+0x348>
 8007cde:	2302      	movs	r3, #2
 8007ce0:	77fb      	strb	r3, [r7, #31]
 8007ce2:	e0c9      	b.n	8007e78 <UART_SetConfig+0x348>
 8007ce4:	2304      	movs	r3, #4
 8007ce6:	77fb      	strb	r3, [r7, #31]
 8007ce8:	e0c6      	b.n	8007e78 <UART_SetConfig+0x348>
 8007cea:	2308      	movs	r3, #8
 8007cec:	77fb      	strb	r3, [r7, #31]
 8007cee:	e0c3      	b.n	8007e78 <UART_SetConfig+0x348>
 8007cf0:	2310      	movs	r3, #16
 8007cf2:	77fb      	strb	r3, [r7, #31]
 8007cf4:	e0c0      	b.n	8007e78 <UART_SetConfig+0x348>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a44      	ldr	r2, [pc, #272]	; (8007e0c <UART_SetConfig+0x2dc>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d125      	bne.n	8007d4c <UART_SetConfig+0x21c>
 8007d00:	4b3e      	ldr	r3, [pc, #248]	; (8007dfc <UART_SetConfig+0x2cc>)
 8007d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d0e:	d017      	beq.n	8007d40 <UART_SetConfig+0x210>
 8007d10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d14:	d817      	bhi.n	8007d46 <UART_SetConfig+0x216>
 8007d16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d1a:	d00b      	beq.n	8007d34 <UART_SetConfig+0x204>
 8007d1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d20:	d811      	bhi.n	8007d46 <UART_SetConfig+0x216>
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d003      	beq.n	8007d2e <UART_SetConfig+0x1fe>
 8007d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d2a:	d006      	beq.n	8007d3a <UART_SetConfig+0x20a>
 8007d2c:	e00b      	b.n	8007d46 <UART_SetConfig+0x216>
 8007d2e:	2300      	movs	r3, #0
 8007d30:	77fb      	strb	r3, [r7, #31]
 8007d32:	e0a1      	b.n	8007e78 <UART_SetConfig+0x348>
 8007d34:	2302      	movs	r3, #2
 8007d36:	77fb      	strb	r3, [r7, #31]
 8007d38:	e09e      	b.n	8007e78 <UART_SetConfig+0x348>
 8007d3a:	2304      	movs	r3, #4
 8007d3c:	77fb      	strb	r3, [r7, #31]
 8007d3e:	e09b      	b.n	8007e78 <UART_SetConfig+0x348>
 8007d40:	2308      	movs	r3, #8
 8007d42:	77fb      	strb	r3, [r7, #31]
 8007d44:	e098      	b.n	8007e78 <UART_SetConfig+0x348>
 8007d46:	2310      	movs	r3, #16
 8007d48:	77fb      	strb	r3, [r7, #31]
 8007d4a:	e095      	b.n	8007e78 <UART_SetConfig+0x348>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a2f      	ldr	r2, [pc, #188]	; (8007e10 <UART_SetConfig+0x2e0>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d125      	bne.n	8007da2 <UART_SetConfig+0x272>
 8007d56:	4b29      	ldr	r3, [pc, #164]	; (8007dfc <UART_SetConfig+0x2cc>)
 8007d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d64:	d017      	beq.n	8007d96 <UART_SetConfig+0x266>
 8007d66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d6a:	d817      	bhi.n	8007d9c <UART_SetConfig+0x26c>
 8007d6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d70:	d00b      	beq.n	8007d8a <UART_SetConfig+0x25a>
 8007d72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d76:	d811      	bhi.n	8007d9c <UART_SetConfig+0x26c>
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d003      	beq.n	8007d84 <UART_SetConfig+0x254>
 8007d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d80:	d006      	beq.n	8007d90 <UART_SetConfig+0x260>
 8007d82:	e00b      	b.n	8007d9c <UART_SetConfig+0x26c>
 8007d84:	2301      	movs	r3, #1
 8007d86:	77fb      	strb	r3, [r7, #31]
 8007d88:	e076      	b.n	8007e78 <UART_SetConfig+0x348>
 8007d8a:	2302      	movs	r3, #2
 8007d8c:	77fb      	strb	r3, [r7, #31]
 8007d8e:	e073      	b.n	8007e78 <UART_SetConfig+0x348>
 8007d90:	2304      	movs	r3, #4
 8007d92:	77fb      	strb	r3, [r7, #31]
 8007d94:	e070      	b.n	8007e78 <UART_SetConfig+0x348>
 8007d96:	2308      	movs	r3, #8
 8007d98:	77fb      	strb	r3, [r7, #31]
 8007d9a:	e06d      	b.n	8007e78 <UART_SetConfig+0x348>
 8007d9c:	2310      	movs	r3, #16
 8007d9e:	77fb      	strb	r3, [r7, #31]
 8007da0:	e06a      	b.n	8007e78 <UART_SetConfig+0x348>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a1b      	ldr	r2, [pc, #108]	; (8007e14 <UART_SetConfig+0x2e4>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d138      	bne.n	8007e1e <UART_SetConfig+0x2ee>
 8007dac:	4b13      	ldr	r3, [pc, #76]	; (8007dfc <UART_SetConfig+0x2cc>)
 8007dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007db2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007db6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007dba:	d017      	beq.n	8007dec <UART_SetConfig+0x2bc>
 8007dbc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007dc0:	d82a      	bhi.n	8007e18 <UART_SetConfig+0x2e8>
 8007dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dc6:	d00b      	beq.n	8007de0 <UART_SetConfig+0x2b0>
 8007dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dcc:	d824      	bhi.n	8007e18 <UART_SetConfig+0x2e8>
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d003      	beq.n	8007dda <UART_SetConfig+0x2aa>
 8007dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dd6:	d006      	beq.n	8007de6 <UART_SetConfig+0x2b6>
 8007dd8:	e01e      	b.n	8007e18 <UART_SetConfig+0x2e8>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	77fb      	strb	r3, [r7, #31]
 8007dde:	e04b      	b.n	8007e78 <UART_SetConfig+0x348>
 8007de0:	2302      	movs	r3, #2
 8007de2:	77fb      	strb	r3, [r7, #31]
 8007de4:	e048      	b.n	8007e78 <UART_SetConfig+0x348>
 8007de6:	2304      	movs	r3, #4
 8007de8:	77fb      	strb	r3, [r7, #31]
 8007dea:	e045      	b.n	8007e78 <UART_SetConfig+0x348>
 8007dec:	2308      	movs	r3, #8
 8007dee:	77fb      	strb	r3, [r7, #31]
 8007df0:	e042      	b.n	8007e78 <UART_SetConfig+0x348>
 8007df2:	bf00      	nop
 8007df4:	efff69f3 	.word	0xefff69f3
 8007df8:	40011000 	.word	0x40011000
 8007dfc:	40023800 	.word	0x40023800
 8007e00:	40004400 	.word	0x40004400
 8007e04:	40004800 	.word	0x40004800
 8007e08:	40004c00 	.word	0x40004c00
 8007e0c:	40005000 	.word	0x40005000
 8007e10:	40011400 	.word	0x40011400
 8007e14:	40007800 	.word	0x40007800
 8007e18:	2310      	movs	r3, #16
 8007e1a:	77fb      	strb	r3, [r7, #31]
 8007e1c:	e02c      	b.n	8007e78 <UART_SetConfig+0x348>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a72      	ldr	r2, [pc, #456]	; (8007fec <UART_SetConfig+0x4bc>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d125      	bne.n	8007e74 <UART_SetConfig+0x344>
 8007e28:	4b71      	ldr	r3, [pc, #452]	; (8007ff0 <UART_SetConfig+0x4c0>)
 8007e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e2e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007e32:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e36:	d017      	beq.n	8007e68 <UART_SetConfig+0x338>
 8007e38:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e3c:	d817      	bhi.n	8007e6e <UART_SetConfig+0x33e>
 8007e3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e42:	d00b      	beq.n	8007e5c <UART_SetConfig+0x32c>
 8007e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e48:	d811      	bhi.n	8007e6e <UART_SetConfig+0x33e>
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d003      	beq.n	8007e56 <UART_SetConfig+0x326>
 8007e4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e52:	d006      	beq.n	8007e62 <UART_SetConfig+0x332>
 8007e54:	e00b      	b.n	8007e6e <UART_SetConfig+0x33e>
 8007e56:	2300      	movs	r3, #0
 8007e58:	77fb      	strb	r3, [r7, #31]
 8007e5a:	e00d      	b.n	8007e78 <UART_SetConfig+0x348>
 8007e5c:	2302      	movs	r3, #2
 8007e5e:	77fb      	strb	r3, [r7, #31]
 8007e60:	e00a      	b.n	8007e78 <UART_SetConfig+0x348>
 8007e62:	2304      	movs	r3, #4
 8007e64:	77fb      	strb	r3, [r7, #31]
 8007e66:	e007      	b.n	8007e78 <UART_SetConfig+0x348>
 8007e68:	2308      	movs	r3, #8
 8007e6a:	77fb      	strb	r3, [r7, #31]
 8007e6c:	e004      	b.n	8007e78 <UART_SetConfig+0x348>
 8007e6e:	2310      	movs	r3, #16
 8007e70:	77fb      	strb	r3, [r7, #31]
 8007e72:	e001      	b.n	8007e78 <UART_SetConfig+0x348>
 8007e74:	2310      	movs	r3, #16
 8007e76:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	69db      	ldr	r3, [r3, #28]
 8007e7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e80:	d15b      	bne.n	8007f3a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007e82:	7ffb      	ldrb	r3, [r7, #31]
 8007e84:	2b08      	cmp	r3, #8
 8007e86:	d828      	bhi.n	8007eda <UART_SetConfig+0x3aa>
 8007e88:	a201      	add	r2, pc, #4	; (adr r2, 8007e90 <UART_SetConfig+0x360>)
 8007e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8e:	bf00      	nop
 8007e90:	08007eb5 	.word	0x08007eb5
 8007e94:	08007ebd 	.word	0x08007ebd
 8007e98:	08007ec5 	.word	0x08007ec5
 8007e9c:	08007edb 	.word	0x08007edb
 8007ea0:	08007ecb 	.word	0x08007ecb
 8007ea4:	08007edb 	.word	0x08007edb
 8007ea8:	08007edb 	.word	0x08007edb
 8007eac:	08007edb 	.word	0x08007edb
 8007eb0:	08007ed3 	.word	0x08007ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007eb4:	f7fe f900 	bl	80060b8 <HAL_RCC_GetPCLK1Freq>
 8007eb8:	61b8      	str	r0, [r7, #24]
        break;
 8007eba:	e013      	b.n	8007ee4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ebc:	f7fe f910 	bl	80060e0 <HAL_RCC_GetPCLK2Freq>
 8007ec0:	61b8      	str	r0, [r7, #24]
        break;
 8007ec2:	e00f      	b.n	8007ee4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ec4:	4b4b      	ldr	r3, [pc, #300]	; (8007ff4 <UART_SetConfig+0x4c4>)
 8007ec6:	61bb      	str	r3, [r7, #24]
        break;
 8007ec8:	e00c      	b.n	8007ee4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007eca:	f7fd ffe3 	bl	8005e94 <HAL_RCC_GetSysClockFreq>
 8007ece:	61b8      	str	r0, [r7, #24]
        break;
 8007ed0:	e008      	b.n	8007ee4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ed6:	61bb      	str	r3, [r7, #24]
        break;
 8007ed8:	e004      	b.n	8007ee4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007eda:	2300      	movs	r3, #0
 8007edc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	77bb      	strb	r3, [r7, #30]
        break;
 8007ee2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d074      	beq.n	8007fd4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	005a      	lsls	r2, r3, #1
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	085b      	lsrs	r3, r3, #1
 8007ef4:	441a      	add	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007efe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	2b0f      	cmp	r3, #15
 8007f04:	d916      	bls.n	8007f34 <UART_SetConfig+0x404>
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f0c:	d212      	bcs.n	8007f34 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	f023 030f 	bic.w	r3, r3, #15
 8007f16:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	085b      	lsrs	r3, r3, #1
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	f003 0307 	and.w	r3, r3, #7
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	89fb      	ldrh	r3, [r7, #14]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	89fa      	ldrh	r2, [r7, #14]
 8007f30:	60da      	str	r2, [r3, #12]
 8007f32:	e04f      	b.n	8007fd4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	77bb      	strb	r3, [r7, #30]
 8007f38:	e04c      	b.n	8007fd4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f3a:	7ffb      	ldrb	r3, [r7, #31]
 8007f3c:	2b08      	cmp	r3, #8
 8007f3e:	d828      	bhi.n	8007f92 <UART_SetConfig+0x462>
 8007f40:	a201      	add	r2, pc, #4	; (adr r2, 8007f48 <UART_SetConfig+0x418>)
 8007f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f46:	bf00      	nop
 8007f48:	08007f6d 	.word	0x08007f6d
 8007f4c:	08007f75 	.word	0x08007f75
 8007f50:	08007f7d 	.word	0x08007f7d
 8007f54:	08007f93 	.word	0x08007f93
 8007f58:	08007f83 	.word	0x08007f83
 8007f5c:	08007f93 	.word	0x08007f93
 8007f60:	08007f93 	.word	0x08007f93
 8007f64:	08007f93 	.word	0x08007f93
 8007f68:	08007f8b 	.word	0x08007f8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f6c:	f7fe f8a4 	bl	80060b8 <HAL_RCC_GetPCLK1Freq>
 8007f70:	61b8      	str	r0, [r7, #24]
        break;
 8007f72:	e013      	b.n	8007f9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f74:	f7fe f8b4 	bl	80060e0 <HAL_RCC_GetPCLK2Freq>
 8007f78:	61b8      	str	r0, [r7, #24]
        break;
 8007f7a:	e00f      	b.n	8007f9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f7c:	4b1d      	ldr	r3, [pc, #116]	; (8007ff4 <UART_SetConfig+0x4c4>)
 8007f7e:	61bb      	str	r3, [r7, #24]
        break;
 8007f80:	e00c      	b.n	8007f9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f82:	f7fd ff87 	bl	8005e94 <HAL_RCC_GetSysClockFreq>
 8007f86:	61b8      	str	r0, [r7, #24]
        break;
 8007f88:	e008      	b.n	8007f9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f8e:	61bb      	str	r3, [r7, #24]
        break;
 8007f90:	e004      	b.n	8007f9c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007f92:	2300      	movs	r3, #0
 8007f94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	77bb      	strb	r3, [r7, #30]
        break;
 8007f9a:	bf00      	nop
    }

    if (pclk != 0U)
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d018      	beq.n	8007fd4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	085a      	lsrs	r2, r3, #1
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	441a      	add	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fb4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	2b0f      	cmp	r3, #15
 8007fba:	d909      	bls.n	8007fd0 <UART_SetConfig+0x4a0>
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fc2:	d205      	bcs.n	8007fd0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	60da      	str	r2, [r3, #12]
 8007fce:	e001      	b.n	8007fd4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007fe0:	7fbb      	ldrb	r3, [r7, #30]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3720      	adds	r7, #32
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	40007c00 	.word	0x40007c00
 8007ff0:	40023800 	.word	0x40023800
 8007ff4:	00f42400 	.word	0x00f42400

08007ff8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008004:	f003 0301 	and.w	r3, r3, #1
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00a      	beq.n	8008022 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	430a      	orrs	r2, r1
 8008020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008026:	f003 0302 	and.w	r3, r3, #2
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00a      	beq.n	8008044 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	430a      	orrs	r2, r1
 8008042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008048:	f003 0304 	and.w	r3, r3, #4
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00a      	beq.n	8008066 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	430a      	orrs	r2, r1
 8008064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806a:	f003 0308 	and.w	r3, r3, #8
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00a      	beq.n	8008088 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	430a      	orrs	r2, r1
 8008086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808c:	f003 0310 	and.w	r3, r3, #16
 8008090:	2b00      	cmp	r3, #0
 8008092:	d00a      	beq.n	80080aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	430a      	orrs	r2, r1
 80080a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ae:	f003 0320 	and.w	r3, r3, #32
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00a      	beq.n	80080cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	430a      	orrs	r2, r1
 80080ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d01a      	beq.n	800810e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	430a      	orrs	r2, r1
 80080ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080f6:	d10a      	bne.n	800810e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	430a      	orrs	r2, r1
 800810c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00a      	beq.n	8008130 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	430a      	orrs	r2, r1
 800812e:	605a      	str	r2, [r3, #4]
  }
}
 8008130:	bf00      	nop
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b086      	sub	sp, #24
 8008140:	af02      	add	r7, sp, #8
 8008142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800814c:	f7fc f980 	bl	8004450 <HAL_GetTick>
 8008150:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f003 0308 	and.w	r3, r3, #8
 800815c:	2b08      	cmp	r3, #8
 800815e:	d10e      	bne.n	800817e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008160:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008164:	9300      	str	r3, [sp, #0]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2200      	movs	r2, #0
 800816a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f831 	bl	80081d6 <UART_WaitOnFlagUntilTimeout>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d001      	beq.n	800817e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800817a:	2303      	movs	r3, #3
 800817c:	e027      	b.n	80081ce <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 0304 	and.w	r3, r3, #4
 8008188:	2b04      	cmp	r3, #4
 800818a:	d10e      	bne.n	80081aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800818c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2200      	movs	r2, #0
 8008196:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 f81b 	bl	80081d6 <UART_WaitOnFlagUntilTimeout>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d001      	beq.n	80081aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081a6:	2303      	movs	r3, #3
 80081a8:	e011      	b.n	80081ce <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2220      	movs	r2, #32
 80081ae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2220      	movs	r2, #32
 80081b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b09c      	sub	sp, #112	; 0x70
 80081da:	af00      	add	r7, sp, #0
 80081dc:	60f8      	str	r0, [r7, #12]
 80081de:	60b9      	str	r1, [r7, #8]
 80081e0:	603b      	str	r3, [r7, #0]
 80081e2:	4613      	mov	r3, r2
 80081e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081e6:	e0a7      	b.n	8008338 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ee:	f000 80a3 	beq.w	8008338 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081f2:	f7fc f92d 	bl	8004450 <HAL_GetTick>
 80081f6:	4602      	mov	r2, r0
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	1ad3      	subs	r3, r2, r3
 80081fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80081fe:	429a      	cmp	r2, r3
 8008200:	d302      	bcc.n	8008208 <UART_WaitOnFlagUntilTimeout+0x32>
 8008202:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008204:	2b00      	cmp	r3, #0
 8008206:	d13f      	bne.n	8008288 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008210:	e853 3f00 	ldrex	r3, [r3]
 8008214:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008218:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800821c:	667b      	str	r3, [r7, #100]	; 0x64
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	461a      	mov	r2, r3
 8008224:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008226:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008228:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800822c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800822e:	e841 2300 	strex	r3, r2, [r1]
 8008232:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1e6      	bne.n	8008208 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3308      	adds	r3, #8
 8008240:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008244:	e853 3f00 	ldrex	r3, [r3]
 8008248:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800824a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824c:	f023 0301 	bic.w	r3, r3, #1
 8008250:	663b      	str	r3, [r7, #96]	; 0x60
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3308      	adds	r3, #8
 8008258:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800825a:	64ba      	str	r2, [r7, #72]	; 0x48
 800825c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008260:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008262:	e841 2300 	strex	r3, r2, [r1]
 8008266:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1e5      	bne.n	800823a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2220      	movs	r2, #32
 8008272:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2220      	movs	r2, #32
 8008278:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2200      	movs	r2, #0
 8008280:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008284:	2303      	movs	r3, #3
 8008286:	e068      	b.n	800835a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f003 0304 	and.w	r3, r3, #4
 8008292:	2b00      	cmp	r3, #0
 8008294:	d050      	beq.n	8008338 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	69db      	ldr	r3, [r3, #28]
 800829c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082a4:	d148      	bne.n	8008338 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082ae:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b8:	e853 3f00 	ldrex	r3, [r3]
 80082bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	461a      	mov	r2, r3
 80082cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ce:	637b      	str	r3, [r7, #52]	; 0x34
 80082d0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082d6:	e841 2300 	strex	r3, r2, [r1]
 80082da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80082dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1e6      	bne.n	80082b0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	3308      	adds	r3, #8
 80082e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	e853 3f00 	ldrex	r3, [r3]
 80082f0:	613b      	str	r3, [r7, #16]
   return(result);
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	f023 0301 	bic.w	r3, r3, #1
 80082f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	3308      	adds	r3, #8
 8008300:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008302:	623a      	str	r2, [r7, #32]
 8008304:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008306:	69f9      	ldr	r1, [r7, #28]
 8008308:	6a3a      	ldr	r2, [r7, #32]
 800830a:	e841 2300 	strex	r3, r2, [r1]
 800830e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1e5      	bne.n	80082e2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2220      	movs	r2, #32
 800831a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2220      	movs	r2, #32
 8008320:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2220      	movs	r2, #32
 8008328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008334:	2303      	movs	r3, #3
 8008336:	e010      	b.n	800835a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	69da      	ldr	r2, [r3, #28]
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	4013      	ands	r3, r2
 8008342:	68ba      	ldr	r2, [r7, #8]
 8008344:	429a      	cmp	r2, r3
 8008346:	bf0c      	ite	eq
 8008348:	2301      	moveq	r3, #1
 800834a:	2300      	movne	r3, #0
 800834c:	b2db      	uxtb	r3, r3
 800834e:	461a      	mov	r2, r3
 8008350:	79fb      	ldrb	r3, [r7, #7]
 8008352:	429a      	cmp	r2, r3
 8008354:	f43f af48 	beq.w	80081e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3770      	adds	r7, #112	; 0x70
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
	...

08008364 <__errno>:
 8008364:	4b01      	ldr	r3, [pc, #4]	; (800836c <__errno+0x8>)
 8008366:	6818      	ldr	r0, [r3, #0]
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop
 800836c:	20000060 	.word	0x20000060

08008370 <__libc_init_array>:
 8008370:	b570      	push	{r4, r5, r6, lr}
 8008372:	4d0d      	ldr	r5, [pc, #52]	; (80083a8 <__libc_init_array+0x38>)
 8008374:	4c0d      	ldr	r4, [pc, #52]	; (80083ac <__libc_init_array+0x3c>)
 8008376:	1b64      	subs	r4, r4, r5
 8008378:	10a4      	asrs	r4, r4, #2
 800837a:	2600      	movs	r6, #0
 800837c:	42a6      	cmp	r6, r4
 800837e:	d109      	bne.n	8008394 <__libc_init_array+0x24>
 8008380:	4d0b      	ldr	r5, [pc, #44]	; (80083b0 <__libc_init_array+0x40>)
 8008382:	4c0c      	ldr	r4, [pc, #48]	; (80083b4 <__libc_init_array+0x44>)
 8008384:	f003 f832 	bl	800b3ec <_init>
 8008388:	1b64      	subs	r4, r4, r5
 800838a:	10a4      	asrs	r4, r4, #2
 800838c:	2600      	movs	r6, #0
 800838e:	42a6      	cmp	r6, r4
 8008390:	d105      	bne.n	800839e <__libc_init_array+0x2e>
 8008392:	bd70      	pop	{r4, r5, r6, pc}
 8008394:	f855 3b04 	ldr.w	r3, [r5], #4
 8008398:	4798      	blx	r3
 800839a:	3601      	adds	r6, #1
 800839c:	e7ee      	b.n	800837c <__libc_init_array+0xc>
 800839e:	f855 3b04 	ldr.w	r3, [r5], #4
 80083a2:	4798      	blx	r3
 80083a4:	3601      	adds	r6, #1
 80083a6:	e7f2      	b.n	800838e <__libc_init_array+0x1e>
 80083a8:	0800c8cc 	.word	0x0800c8cc
 80083ac:	0800c8cc 	.word	0x0800c8cc
 80083b0:	0800c8cc 	.word	0x0800c8cc
 80083b4:	0800c8d0 	.word	0x0800c8d0

080083b8 <memset>:
 80083b8:	4402      	add	r2, r0
 80083ba:	4603      	mov	r3, r0
 80083bc:	4293      	cmp	r3, r2
 80083be:	d100      	bne.n	80083c2 <memset+0xa>
 80083c0:	4770      	bx	lr
 80083c2:	f803 1b01 	strb.w	r1, [r3], #1
 80083c6:	e7f9      	b.n	80083bc <memset+0x4>

080083c8 <__cvt>:
 80083c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083ca:	ed2d 8b02 	vpush	{d8}
 80083ce:	eeb0 8b40 	vmov.f64	d8, d0
 80083d2:	b085      	sub	sp, #20
 80083d4:	4617      	mov	r7, r2
 80083d6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80083d8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80083da:	ee18 2a90 	vmov	r2, s17
 80083de:	f025 0520 	bic.w	r5, r5, #32
 80083e2:	2a00      	cmp	r2, #0
 80083e4:	bfb6      	itet	lt
 80083e6:	222d      	movlt	r2, #45	; 0x2d
 80083e8:	2200      	movge	r2, #0
 80083ea:	eeb1 8b40 	vneglt.f64	d8, d0
 80083ee:	2d46      	cmp	r5, #70	; 0x46
 80083f0:	460c      	mov	r4, r1
 80083f2:	701a      	strb	r2, [r3, #0]
 80083f4:	d004      	beq.n	8008400 <__cvt+0x38>
 80083f6:	2d45      	cmp	r5, #69	; 0x45
 80083f8:	d100      	bne.n	80083fc <__cvt+0x34>
 80083fa:	3401      	adds	r4, #1
 80083fc:	2102      	movs	r1, #2
 80083fe:	e000      	b.n	8008402 <__cvt+0x3a>
 8008400:	2103      	movs	r1, #3
 8008402:	ab03      	add	r3, sp, #12
 8008404:	9301      	str	r3, [sp, #4]
 8008406:	ab02      	add	r3, sp, #8
 8008408:	9300      	str	r3, [sp, #0]
 800840a:	4622      	mov	r2, r4
 800840c:	4633      	mov	r3, r6
 800840e:	eeb0 0b48 	vmov.f64	d0, d8
 8008412:	f000 febd 	bl	8009190 <_dtoa_r>
 8008416:	2d47      	cmp	r5, #71	; 0x47
 8008418:	d101      	bne.n	800841e <__cvt+0x56>
 800841a:	07fb      	lsls	r3, r7, #31
 800841c:	d51a      	bpl.n	8008454 <__cvt+0x8c>
 800841e:	2d46      	cmp	r5, #70	; 0x46
 8008420:	eb00 0204 	add.w	r2, r0, r4
 8008424:	d10c      	bne.n	8008440 <__cvt+0x78>
 8008426:	7803      	ldrb	r3, [r0, #0]
 8008428:	2b30      	cmp	r3, #48	; 0x30
 800842a:	d107      	bne.n	800843c <__cvt+0x74>
 800842c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008434:	bf1c      	itt	ne
 8008436:	f1c4 0401 	rsbne	r4, r4, #1
 800843a:	6034      	strne	r4, [r6, #0]
 800843c:	6833      	ldr	r3, [r6, #0]
 800843e:	441a      	add	r2, r3
 8008440:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008448:	bf08      	it	eq
 800844a:	9203      	streq	r2, [sp, #12]
 800844c:	2130      	movs	r1, #48	; 0x30
 800844e:	9b03      	ldr	r3, [sp, #12]
 8008450:	4293      	cmp	r3, r2
 8008452:	d307      	bcc.n	8008464 <__cvt+0x9c>
 8008454:	9b03      	ldr	r3, [sp, #12]
 8008456:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008458:	1a1b      	subs	r3, r3, r0
 800845a:	6013      	str	r3, [r2, #0]
 800845c:	b005      	add	sp, #20
 800845e:	ecbd 8b02 	vpop	{d8}
 8008462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008464:	1c5c      	adds	r4, r3, #1
 8008466:	9403      	str	r4, [sp, #12]
 8008468:	7019      	strb	r1, [r3, #0]
 800846a:	e7f0      	b.n	800844e <__cvt+0x86>

0800846c <__exponent>:
 800846c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800846e:	4603      	mov	r3, r0
 8008470:	2900      	cmp	r1, #0
 8008472:	bfb8      	it	lt
 8008474:	4249      	neglt	r1, r1
 8008476:	f803 2b02 	strb.w	r2, [r3], #2
 800847a:	bfb4      	ite	lt
 800847c:	222d      	movlt	r2, #45	; 0x2d
 800847e:	222b      	movge	r2, #43	; 0x2b
 8008480:	2909      	cmp	r1, #9
 8008482:	7042      	strb	r2, [r0, #1]
 8008484:	dd2a      	ble.n	80084dc <__exponent+0x70>
 8008486:	f10d 0407 	add.w	r4, sp, #7
 800848a:	46a4      	mov	ip, r4
 800848c:	270a      	movs	r7, #10
 800848e:	46a6      	mov	lr, r4
 8008490:	460a      	mov	r2, r1
 8008492:	fb91 f6f7 	sdiv	r6, r1, r7
 8008496:	fb07 1516 	mls	r5, r7, r6, r1
 800849a:	3530      	adds	r5, #48	; 0x30
 800849c:	2a63      	cmp	r2, #99	; 0x63
 800849e:	f104 34ff 	add.w	r4, r4, #4294967295
 80084a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80084a6:	4631      	mov	r1, r6
 80084a8:	dcf1      	bgt.n	800848e <__exponent+0x22>
 80084aa:	3130      	adds	r1, #48	; 0x30
 80084ac:	f1ae 0502 	sub.w	r5, lr, #2
 80084b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80084b4:	1c44      	adds	r4, r0, #1
 80084b6:	4629      	mov	r1, r5
 80084b8:	4561      	cmp	r1, ip
 80084ba:	d30a      	bcc.n	80084d2 <__exponent+0x66>
 80084bc:	f10d 0209 	add.w	r2, sp, #9
 80084c0:	eba2 020e 	sub.w	r2, r2, lr
 80084c4:	4565      	cmp	r5, ip
 80084c6:	bf88      	it	hi
 80084c8:	2200      	movhi	r2, #0
 80084ca:	4413      	add	r3, r2
 80084cc:	1a18      	subs	r0, r3, r0
 80084ce:	b003      	add	sp, #12
 80084d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80084da:	e7ed      	b.n	80084b8 <__exponent+0x4c>
 80084dc:	2330      	movs	r3, #48	; 0x30
 80084de:	3130      	adds	r1, #48	; 0x30
 80084e0:	7083      	strb	r3, [r0, #2]
 80084e2:	70c1      	strb	r1, [r0, #3]
 80084e4:	1d03      	adds	r3, r0, #4
 80084e6:	e7f1      	b.n	80084cc <__exponent+0x60>

080084e8 <_printf_float>:
 80084e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ec:	b08b      	sub	sp, #44	; 0x2c
 80084ee:	460c      	mov	r4, r1
 80084f0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80084f4:	4616      	mov	r6, r2
 80084f6:	461f      	mov	r7, r3
 80084f8:	4605      	mov	r5, r0
 80084fa:	f001 fbc9 	bl	8009c90 <_localeconv_r>
 80084fe:	f8d0 b000 	ldr.w	fp, [r0]
 8008502:	4658      	mov	r0, fp
 8008504:	f7f7 fe9c 	bl	8000240 <strlen>
 8008508:	2300      	movs	r3, #0
 800850a:	9308      	str	r3, [sp, #32]
 800850c:	f8d8 3000 	ldr.w	r3, [r8]
 8008510:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008514:	6822      	ldr	r2, [r4, #0]
 8008516:	3307      	adds	r3, #7
 8008518:	f023 0307 	bic.w	r3, r3, #7
 800851c:	f103 0108 	add.w	r1, r3, #8
 8008520:	f8c8 1000 	str.w	r1, [r8]
 8008524:	4682      	mov	sl, r0
 8008526:	e9d3 0100 	ldrd	r0, r1, [r3]
 800852a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800852e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8008790 <_printf_float+0x2a8>
 8008532:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8008536:	eeb0 6bc0 	vabs.f64	d6, d0
 800853a:	eeb4 6b47 	vcmp.f64	d6, d7
 800853e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008542:	dd24      	ble.n	800858e <_printf_float+0xa6>
 8008544:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800854c:	d502      	bpl.n	8008554 <_printf_float+0x6c>
 800854e:	232d      	movs	r3, #45	; 0x2d
 8008550:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008554:	4b90      	ldr	r3, [pc, #576]	; (8008798 <_printf_float+0x2b0>)
 8008556:	4891      	ldr	r0, [pc, #580]	; (800879c <_printf_float+0x2b4>)
 8008558:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800855c:	bf94      	ite	ls
 800855e:	4698      	movls	r8, r3
 8008560:	4680      	movhi	r8, r0
 8008562:	2303      	movs	r3, #3
 8008564:	6123      	str	r3, [r4, #16]
 8008566:	f022 0204 	bic.w	r2, r2, #4
 800856a:	2300      	movs	r3, #0
 800856c:	6022      	str	r2, [r4, #0]
 800856e:	9304      	str	r3, [sp, #16]
 8008570:	9700      	str	r7, [sp, #0]
 8008572:	4633      	mov	r3, r6
 8008574:	aa09      	add	r2, sp, #36	; 0x24
 8008576:	4621      	mov	r1, r4
 8008578:	4628      	mov	r0, r5
 800857a:	f000 f9d3 	bl	8008924 <_printf_common>
 800857e:	3001      	adds	r0, #1
 8008580:	f040 808a 	bne.w	8008698 <_printf_float+0x1b0>
 8008584:	f04f 30ff 	mov.w	r0, #4294967295
 8008588:	b00b      	add	sp, #44	; 0x2c
 800858a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800858e:	eeb4 0b40 	vcmp.f64	d0, d0
 8008592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008596:	d709      	bvc.n	80085ac <_printf_float+0xc4>
 8008598:	ee10 3a90 	vmov	r3, s1
 800859c:	2b00      	cmp	r3, #0
 800859e:	bfbc      	itt	lt
 80085a0:	232d      	movlt	r3, #45	; 0x2d
 80085a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80085a6:	487e      	ldr	r0, [pc, #504]	; (80087a0 <_printf_float+0x2b8>)
 80085a8:	4b7e      	ldr	r3, [pc, #504]	; (80087a4 <_printf_float+0x2bc>)
 80085aa:	e7d5      	b.n	8008558 <_printf_float+0x70>
 80085ac:	6863      	ldr	r3, [r4, #4]
 80085ae:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80085b2:	9104      	str	r1, [sp, #16]
 80085b4:	1c59      	adds	r1, r3, #1
 80085b6:	d13c      	bne.n	8008632 <_printf_float+0x14a>
 80085b8:	2306      	movs	r3, #6
 80085ba:	6063      	str	r3, [r4, #4]
 80085bc:	2300      	movs	r3, #0
 80085be:	9303      	str	r3, [sp, #12]
 80085c0:	ab08      	add	r3, sp, #32
 80085c2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80085c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80085ca:	ab07      	add	r3, sp, #28
 80085cc:	6861      	ldr	r1, [r4, #4]
 80085ce:	9300      	str	r3, [sp, #0]
 80085d0:	6022      	str	r2, [r4, #0]
 80085d2:	f10d 031b 	add.w	r3, sp, #27
 80085d6:	4628      	mov	r0, r5
 80085d8:	f7ff fef6 	bl	80083c8 <__cvt>
 80085dc:	9b04      	ldr	r3, [sp, #16]
 80085de:	9907      	ldr	r1, [sp, #28]
 80085e0:	2b47      	cmp	r3, #71	; 0x47
 80085e2:	4680      	mov	r8, r0
 80085e4:	d108      	bne.n	80085f8 <_printf_float+0x110>
 80085e6:	1cc8      	adds	r0, r1, #3
 80085e8:	db02      	blt.n	80085f0 <_printf_float+0x108>
 80085ea:	6863      	ldr	r3, [r4, #4]
 80085ec:	4299      	cmp	r1, r3
 80085ee:	dd41      	ble.n	8008674 <_printf_float+0x18c>
 80085f0:	f1a9 0902 	sub.w	r9, r9, #2
 80085f4:	fa5f f989 	uxtb.w	r9, r9
 80085f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80085fc:	d820      	bhi.n	8008640 <_printf_float+0x158>
 80085fe:	3901      	subs	r1, #1
 8008600:	464a      	mov	r2, r9
 8008602:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008606:	9107      	str	r1, [sp, #28]
 8008608:	f7ff ff30 	bl	800846c <__exponent>
 800860c:	9a08      	ldr	r2, [sp, #32]
 800860e:	9004      	str	r0, [sp, #16]
 8008610:	1813      	adds	r3, r2, r0
 8008612:	2a01      	cmp	r2, #1
 8008614:	6123      	str	r3, [r4, #16]
 8008616:	dc02      	bgt.n	800861e <_printf_float+0x136>
 8008618:	6822      	ldr	r2, [r4, #0]
 800861a:	07d2      	lsls	r2, r2, #31
 800861c:	d501      	bpl.n	8008622 <_printf_float+0x13a>
 800861e:	3301      	adds	r3, #1
 8008620:	6123      	str	r3, [r4, #16]
 8008622:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d0a2      	beq.n	8008570 <_printf_float+0x88>
 800862a:	232d      	movs	r3, #45	; 0x2d
 800862c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008630:	e79e      	b.n	8008570 <_printf_float+0x88>
 8008632:	9904      	ldr	r1, [sp, #16]
 8008634:	2947      	cmp	r1, #71	; 0x47
 8008636:	d1c1      	bne.n	80085bc <_printf_float+0xd4>
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1bf      	bne.n	80085bc <_printf_float+0xd4>
 800863c:	2301      	movs	r3, #1
 800863e:	e7bc      	b.n	80085ba <_printf_float+0xd2>
 8008640:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008644:	d118      	bne.n	8008678 <_printf_float+0x190>
 8008646:	2900      	cmp	r1, #0
 8008648:	6863      	ldr	r3, [r4, #4]
 800864a:	dd0b      	ble.n	8008664 <_printf_float+0x17c>
 800864c:	6121      	str	r1, [r4, #16]
 800864e:	b913      	cbnz	r3, 8008656 <_printf_float+0x16e>
 8008650:	6822      	ldr	r2, [r4, #0]
 8008652:	07d0      	lsls	r0, r2, #31
 8008654:	d502      	bpl.n	800865c <_printf_float+0x174>
 8008656:	3301      	adds	r3, #1
 8008658:	440b      	add	r3, r1
 800865a:	6123      	str	r3, [r4, #16]
 800865c:	2300      	movs	r3, #0
 800865e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008660:	9304      	str	r3, [sp, #16]
 8008662:	e7de      	b.n	8008622 <_printf_float+0x13a>
 8008664:	b913      	cbnz	r3, 800866c <_printf_float+0x184>
 8008666:	6822      	ldr	r2, [r4, #0]
 8008668:	07d2      	lsls	r2, r2, #31
 800866a:	d501      	bpl.n	8008670 <_printf_float+0x188>
 800866c:	3302      	adds	r3, #2
 800866e:	e7f4      	b.n	800865a <_printf_float+0x172>
 8008670:	2301      	movs	r3, #1
 8008672:	e7f2      	b.n	800865a <_printf_float+0x172>
 8008674:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008678:	9b08      	ldr	r3, [sp, #32]
 800867a:	4299      	cmp	r1, r3
 800867c:	db05      	blt.n	800868a <_printf_float+0x1a2>
 800867e:	6823      	ldr	r3, [r4, #0]
 8008680:	6121      	str	r1, [r4, #16]
 8008682:	07d8      	lsls	r0, r3, #31
 8008684:	d5ea      	bpl.n	800865c <_printf_float+0x174>
 8008686:	1c4b      	adds	r3, r1, #1
 8008688:	e7e7      	b.n	800865a <_printf_float+0x172>
 800868a:	2900      	cmp	r1, #0
 800868c:	bfd4      	ite	le
 800868e:	f1c1 0202 	rsble	r2, r1, #2
 8008692:	2201      	movgt	r2, #1
 8008694:	4413      	add	r3, r2
 8008696:	e7e0      	b.n	800865a <_printf_float+0x172>
 8008698:	6823      	ldr	r3, [r4, #0]
 800869a:	055a      	lsls	r2, r3, #21
 800869c:	d407      	bmi.n	80086ae <_printf_float+0x1c6>
 800869e:	6923      	ldr	r3, [r4, #16]
 80086a0:	4642      	mov	r2, r8
 80086a2:	4631      	mov	r1, r6
 80086a4:	4628      	mov	r0, r5
 80086a6:	47b8      	blx	r7
 80086a8:	3001      	adds	r0, #1
 80086aa:	d12a      	bne.n	8008702 <_printf_float+0x21a>
 80086ac:	e76a      	b.n	8008584 <_printf_float+0x9c>
 80086ae:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80086b2:	f240 80e2 	bls.w	800887a <_printf_float+0x392>
 80086b6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80086ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80086be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086c2:	d133      	bne.n	800872c <_printf_float+0x244>
 80086c4:	4a38      	ldr	r2, [pc, #224]	; (80087a8 <_printf_float+0x2c0>)
 80086c6:	2301      	movs	r3, #1
 80086c8:	4631      	mov	r1, r6
 80086ca:	4628      	mov	r0, r5
 80086cc:	47b8      	blx	r7
 80086ce:	3001      	adds	r0, #1
 80086d0:	f43f af58 	beq.w	8008584 <_printf_float+0x9c>
 80086d4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80086d8:	429a      	cmp	r2, r3
 80086da:	db02      	blt.n	80086e2 <_printf_float+0x1fa>
 80086dc:	6823      	ldr	r3, [r4, #0]
 80086de:	07d8      	lsls	r0, r3, #31
 80086e0:	d50f      	bpl.n	8008702 <_printf_float+0x21a>
 80086e2:	4653      	mov	r3, sl
 80086e4:	465a      	mov	r2, fp
 80086e6:	4631      	mov	r1, r6
 80086e8:	4628      	mov	r0, r5
 80086ea:	47b8      	blx	r7
 80086ec:	3001      	adds	r0, #1
 80086ee:	f43f af49 	beq.w	8008584 <_printf_float+0x9c>
 80086f2:	f04f 0800 	mov.w	r8, #0
 80086f6:	f104 091a 	add.w	r9, r4, #26
 80086fa:	9b08      	ldr	r3, [sp, #32]
 80086fc:	3b01      	subs	r3, #1
 80086fe:	4543      	cmp	r3, r8
 8008700:	dc09      	bgt.n	8008716 <_printf_float+0x22e>
 8008702:	6823      	ldr	r3, [r4, #0]
 8008704:	079b      	lsls	r3, r3, #30
 8008706:	f100 8108 	bmi.w	800891a <_printf_float+0x432>
 800870a:	68e0      	ldr	r0, [r4, #12]
 800870c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800870e:	4298      	cmp	r0, r3
 8008710:	bfb8      	it	lt
 8008712:	4618      	movlt	r0, r3
 8008714:	e738      	b.n	8008588 <_printf_float+0xa0>
 8008716:	2301      	movs	r3, #1
 8008718:	464a      	mov	r2, r9
 800871a:	4631      	mov	r1, r6
 800871c:	4628      	mov	r0, r5
 800871e:	47b8      	blx	r7
 8008720:	3001      	adds	r0, #1
 8008722:	f43f af2f 	beq.w	8008584 <_printf_float+0x9c>
 8008726:	f108 0801 	add.w	r8, r8, #1
 800872a:	e7e6      	b.n	80086fa <_printf_float+0x212>
 800872c:	9b07      	ldr	r3, [sp, #28]
 800872e:	2b00      	cmp	r3, #0
 8008730:	dc3c      	bgt.n	80087ac <_printf_float+0x2c4>
 8008732:	4a1d      	ldr	r2, [pc, #116]	; (80087a8 <_printf_float+0x2c0>)
 8008734:	2301      	movs	r3, #1
 8008736:	4631      	mov	r1, r6
 8008738:	4628      	mov	r0, r5
 800873a:	47b8      	blx	r7
 800873c:	3001      	adds	r0, #1
 800873e:	f43f af21 	beq.w	8008584 <_printf_float+0x9c>
 8008742:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008746:	4313      	orrs	r3, r2
 8008748:	d102      	bne.n	8008750 <_printf_float+0x268>
 800874a:	6823      	ldr	r3, [r4, #0]
 800874c:	07d9      	lsls	r1, r3, #31
 800874e:	d5d8      	bpl.n	8008702 <_printf_float+0x21a>
 8008750:	4653      	mov	r3, sl
 8008752:	465a      	mov	r2, fp
 8008754:	4631      	mov	r1, r6
 8008756:	4628      	mov	r0, r5
 8008758:	47b8      	blx	r7
 800875a:	3001      	adds	r0, #1
 800875c:	f43f af12 	beq.w	8008584 <_printf_float+0x9c>
 8008760:	f04f 0900 	mov.w	r9, #0
 8008764:	f104 0a1a 	add.w	sl, r4, #26
 8008768:	9b07      	ldr	r3, [sp, #28]
 800876a:	425b      	negs	r3, r3
 800876c:	454b      	cmp	r3, r9
 800876e:	dc01      	bgt.n	8008774 <_printf_float+0x28c>
 8008770:	9b08      	ldr	r3, [sp, #32]
 8008772:	e795      	b.n	80086a0 <_printf_float+0x1b8>
 8008774:	2301      	movs	r3, #1
 8008776:	4652      	mov	r2, sl
 8008778:	4631      	mov	r1, r6
 800877a:	4628      	mov	r0, r5
 800877c:	47b8      	blx	r7
 800877e:	3001      	adds	r0, #1
 8008780:	f43f af00 	beq.w	8008584 <_printf_float+0x9c>
 8008784:	f109 0901 	add.w	r9, r9, #1
 8008788:	e7ee      	b.n	8008768 <_printf_float+0x280>
 800878a:	bf00      	nop
 800878c:	f3af 8000 	nop.w
 8008790:	ffffffff 	.word	0xffffffff
 8008794:	7fefffff 	.word	0x7fefffff
 8008798:	0800c48c 	.word	0x0800c48c
 800879c:	0800c490 	.word	0x0800c490
 80087a0:	0800c498 	.word	0x0800c498
 80087a4:	0800c494 	.word	0x0800c494
 80087a8:	0800c49c 	.word	0x0800c49c
 80087ac:	9a08      	ldr	r2, [sp, #32]
 80087ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80087b0:	429a      	cmp	r2, r3
 80087b2:	bfa8      	it	ge
 80087b4:	461a      	movge	r2, r3
 80087b6:	2a00      	cmp	r2, #0
 80087b8:	4691      	mov	r9, r2
 80087ba:	dc38      	bgt.n	800882e <_printf_float+0x346>
 80087bc:	2300      	movs	r3, #0
 80087be:	9305      	str	r3, [sp, #20]
 80087c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80087c4:	f104 021a 	add.w	r2, r4, #26
 80087c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80087ca:	9905      	ldr	r1, [sp, #20]
 80087cc:	9304      	str	r3, [sp, #16]
 80087ce:	eba3 0309 	sub.w	r3, r3, r9
 80087d2:	428b      	cmp	r3, r1
 80087d4:	dc33      	bgt.n	800883e <_printf_float+0x356>
 80087d6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80087da:	429a      	cmp	r2, r3
 80087dc:	db3c      	blt.n	8008858 <_printf_float+0x370>
 80087de:	6823      	ldr	r3, [r4, #0]
 80087e0:	07da      	lsls	r2, r3, #31
 80087e2:	d439      	bmi.n	8008858 <_printf_float+0x370>
 80087e4:	9b08      	ldr	r3, [sp, #32]
 80087e6:	9a04      	ldr	r2, [sp, #16]
 80087e8:	9907      	ldr	r1, [sp, #28]
 80087ea:	1a9a      	subs	r2, r3, r2
 80087ec:	eba3 0901 	sub.w	r9, r3, r1
 80087f0:	4591      	cmp	r9, r2
 80087f2:	bfa8      	it	ge
 80087f4:	4691      	movge	r9, r2
 80087f6:	f1b9 0f00 	cmp.w	r9, #0
 80087fa:	dc35      	bgt.n	8008868 <_printf_float+0x380>
 80087fc:	f04f 0800 	mov.w	r8, #0
 8008800:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008804:	f104 0a1a 	add.w	sl, r4, #26
 8008808:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800880c:	1a9b      	subs	r3, r3, r2
 800880e:	eba3 0309 	sub.w	r3, r3, r9
 8008812:	4543      	cmp	r3, r8
 8008814:	f77f af75 	ble.w	8008702 <_printf_float+0x21a>
 8008818:	2301      	movs	r3, #1
 800881a:	4652      	mov	r2, sl
 800881c:	4631      	mov	r1, r6
 800881e:	4628      	mov	r0, r5
 8008820:	47b8      	blx	r7
 8008822:	3001      	adds	r0, #1
 8008824:	f43f aeae 	beq.w	8008584 <_printf_float+0x9c>
 8008828:	f108 0801 	add.w	r8, r8, #1
 800882c:	e7ec      	b.n	8008808 <_printf_float+0x320>
 800882e:	4613      	mov	r3, r2
 8008830:	4631      	mov	r1, r6
 8008832:	4642      	mov	r2, r8
 8008834:	4628      	mov	r0, r5
 8008836:	47b8      	blx	r7
 8008838:	3001      	adds	r0, #1
 800883a:	d1bf      	bne.n	80087bc <_printf_float+0x2d4>
 800883c:	e6a2      	b.n	8008584 <_printf_float+0x9c>
 800883e:	2301      	movs	r3, #1
 8008840:	4631      	mov	r1, r6
 8008842:	4628      	mov	r0, r5
 8008844:	9204      	str	r2, [sp, #16]
 8008846:	47b8      	blx	r7
 8008848:	3001      	adds	r0, #1
 800884a:	f43f ae9b 	beq.w	8008584 <_printf_float+0x9c>
 800884e:	9b05      	ldr	r3, [sp, #20]
 8008850:	9a04      	ldr	r2, [sp, #16]
 8008852:	3301      	adds	r3, #1
 8008854:	9305      	str	r3, [sp, #20]
 8008856:	e7b7      	b.n	80087c8 <_printf_float+0x2e0>
 8008858:	4653      	mov	r3, sl
 800885a:	465a      	mov	r2, fp
 800885c:	4631      	mov	r1, r6
 800885e:	4628      	mov	r0, r5
 8008860:	47b8      	blx	r7
 8008862:	3001      	adds	r0, #1
 8008864:	d1be      	bne.n	80087e4 <_printf_float+0x2fc>
 8008866:	e68d      	b.n	8008584 <_printf_float+0x9c>
 8008868:	9a04      	ldr	r2, [sp, #16]
 800886a:	464b      	mov	r3, r9
 800886c:	4442      	add	r2, r8
 800886e:	4631      	mov	r1, r6
 8008870:	4628      	mov	r0, r5
 8008872:	47b8      	blx	r7
 8008874:	3001      	adds	r0, #1
 8008876:	d1c1      	bne.n	80087fc <_printf_float+0x314>
 8008878:	e684      	b.n	8008584 <_printf_float+0x9c>
 800887a:	9a08      	ldr	r2, [sp, #32]
 800887c:	2a01      	cmp	r2, #1
 800887e:	dc01      	bgt.n	8008884 <_printf_float+0x39c>
 8008880:	07db      	lsls	r3, r3, #31
 8008882:	d537      	bpl.n	80088f4 <_printf_float+0x40c>
 8008884:	2301      	movs	r3, #1
 8008886:	4642      	mov	r2, r8
 8008888:	4631      	mov	r1, r6
 800888a:	4628      	mov	r0, r5
 800888c:	47b8      	blx	r7
 800888e:	3001      	adds	r0, #1
 8008890:	f43f ae78 	beq.w	8008584 <_printf_float+0x9c>
 8008894:	4653      	mov	r3, sl
 8008896:	465a      	mov	r2, fp
 8008898:	4631      	mov	r1, r6
 800889a:	4628      	mov	r0, r5
 800889c:	47b8      	blx	r7
 800889e:	3001      	adds	r0, #1
 80088a0:	f43f ae70 	beq.w	8008584 <_printf_float+0x9c>
 80088a4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80088a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80088ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088b0:	d01b      	beq.n	80088ea <_printf_float+0x402>
 80088b2:	9b08      	ldr	r3, [sp, #32]
 80088b4:	f108 0201 	add.w	r2, r8, #1
 80088b8:	3b01      	subs	r3, #1
 80088ba:	4631      	mov	r1, r6
 80088bc:	4628      	mov	r0, r5
 80088be:	47b8      	blx	r7
 80088c0:	3001      	adds	r0, #1
 80088c2:	d10e      	bne.n	80088e2 <_printf_float+0x3fa>
 80088c4:	e65e      	b.n	8008584 <_printf_float+0x9c>
 80088c6:	2301      	movs	r3, #1
 80088c8:	464a      	mov	r2, r9
 80088ca:	4631      	mov	r1, r6
 80088cc:	4628      	mov	r0, r5
 80088ce:	47b8      	blx	r7
 80088d0:	3001      	adds	r0, #1
 80088d2:	f43f ae57 	beq.w	8008584 <_printf_float+0x9c>
 80088d6:	f108 0801 	add.w	r8, r8, #1
 80088da:	9b08      	ldr	r3, [sp, #32]
 80088dc:	3b01      	subs	r3, #1
 80088de:	4543      	cmp	r3, r8
 80088e0:	dcf1      	bgt.n	80088c6 <_printf_float+0x3de>
 80088e2:	9b04      	ldr	r3, [sp, #16]
 80088e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80088e8:	e6db      	b.n	80086a2 <_printf_float+0x1ba>
 80088ea:	f04f 0800 	mov.w	r8, #0
 80088ee:	f104 091a 	add.w	r9, r4, #26
 80088f2:	e7f2      	b.n	80088da <_printf_float+0x3f2>
 80088f4:	2301      	movs	r3, #1
 80088f6:	4642      	mov	r2, r8
 80088f8:	e7df      	b.n	80088ba <_printf_float+0x3d2>
 80088fa:	2301      	movs	r3, #1
 80088fc:	464a      	mov	r2, r9
 80088fe:	4631      	mov	r1, r6
 8008900:	4628      	mov	r0, r5
 8008902:	47b8      	blx	r7
 8008904:	3001      	adds	r0, #1
 8008906:	f43f ae3d 	beq.w	8008584 <_printf_float+0x9c>
 800890a:	f108 0801 	add.w	r8, r8, #1
 800890e:	68e3      	ldr	r3, [r4, #12]
 8008910:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008912:	1a5b      	subs	r3, r3, r1
 8008914:	4543      	cmp	r3, r8
 8008916:	dcf0      	bgt.n	80088fa <_printf_float+0x412>
 8008918:	e6f7      	b.n	800870a <_printf_float+0x222>
 800891a:	f04f 0800 	mov.w	r8, #0
 800891e:	f104 0919 	add.w	r9, r4, #25
 8008922:	e7f4      	b.n	800890e <_printf_float+0x426>

08008924 <_printf_common>:
 8008924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008928:	4616      	mov	r6, r2
 800892a:	4699      	mov	r9, r3
 800892c:	688a      	ldr	r2, [r1, #8]
 800892e:	690b      	ldr	r3, [r1, #16]
 8008930:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008934:	4293      	cmp	r3, r2
 8008936:	bfb8      	it	lt
 8008938:	4613      	movlt	r3, r2
 800893a:	6033      	str	r3, [r6, #0]
 800893c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008940:	4607      	mov	r7, r0
 8008942:	460c      	mov	r4, r1
 8008944:	b10a      	cbz	r2, 800894a <_printf_common+0x26>
 8008946:	3301      	adds	r3, #1
 8008948:	6033      	str	r3, [r6, #0]
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	0699      	lsls	r1, r3, #26
 800894e:	bf42      	ittt	mi
 8008950:	6833      	ldrmi	r3, [r6, #0]
 8008952:	3302      	addmi	r3, #2
 8008954:	6033      	strmi	r3, [r6, #0]
 8008956:	6825      	ldr	r5, [r4, #0]
 8008958:	f015 0506 	ands.w	r5, r5, #6
 800895c:	d106      	bne.n	800896c <_printf_common+0x48>
 800895e:	f104 0a19 	add.w	sl, r4, #25
 8008962:	68e3      	ldr	r3, [r4, #12]
 8008964:	6832      	ldr	r2, [r6, #0]
 8008966:	1a9b      	subs	r3, r3, r2
 8008968:	42ab      	cmp	r3, r5
 800896a:	dc26      	bgt.n	80089ba <_printf_common+0x96>
 800896c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008970:	1e13      	subs	r3, r2, #0
 8008972:	6822      	ldr	r2, [r4, #0]
 8008974:	bf18      	it	ne
 8008976:	2301      	movne	r3, #1
 8008978:	0692      	lsls	r2, r2, #26
 800897a:	d42b      	bmi.n	80089d4 <_printf_common+0xb0>
 800897c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008980:	4649      	mov	r1, r9
 8008982:	4638      	mov	r0, r7
 8008984:	47c0      	blx	r8
 8008986:	3001      	adds	r0, #1
 8008988:	d01e      	beq.n	80089c8 <_printf_common+0xa4>
 800898a:	6823      	ldr	r3, [r4, #0]
 800898c:	68e5      	ldr	r5, [r4, #12]
 800898e:	6832      	ldr	r2, [r6, #0]
 8008990:	f003 0306 	and.w	r3, r3, #6
 8008994:	2b04      	cmp	r3, #4
 8008996:	bf08      	it	eq
 8008998:	1aad      	subeq	r5, r5, r2
 800899a:	68a3      	ldr	r3, [r4, #8]
 800899c:	6922      	ldr	r2, [r4, #16]
 800899e:	bf0c      	ite	eq
 80089a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089a4:	2500      	movne	r5, #0
 80089a6:	4293      	cmp	r3, r2
 80089a8:	bfc4      	itt	gt
 80089aa:	1a9b      	subgt	r3, r3, r2
 80089ac:	18ed      	addgt	r5, r5, r3
 80089ae:	2600      	movs	r6, #0
 80089b0:	341a      	adds	r4, #26
 80089b2:	42b5      	cmp	r5, r6
 80089b4:	d11a      	bne.n	80089ec <_printf_common+0xc8>
 80089b6:	2000      	movs	r0, #0
 80089b8:	e008      	b.n	80089cc <_printf_common+0xa8>
 80089ba:	2301      	movs	r3, #1
 80089bc:	4652      	mov	r2, sl
 80089be:	4649      	mov	r1, r9
 80089c0:	4638      	mov	r0, r7
 80089c2:	47c0      	blx	r8
 80089c4:	3001      	adds	r0, #1
 80089c6:	d103      	bne.n	80089d0 <_printf_common+0xac>
 80089c8:	f04f 30ff 	mov.w	r0, #4294967295
 80089cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089d0:	3501      	adds	r5, #1
 80089d2:	e7c6      	b.n	8008962 <_printf_common+0x3e>
 80089d4:	18e1      	adds	r1, r4, r3
 80089d6:	1c5a      	adds	r2, r3, #1
 80089d8:	2030      	movs	r0, #48	; 0x30
 80089da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80089de:	4422      	add	r2, r4
 80089e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80089e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80089e8:	3302      	adds	r3, #2
 80089ea:	e7c7      	b.n	800897c <_printf_common+0x58>
 80089ec:	2301      	movs	r3, #1
 80089ee:	4622      	mov	r2, r4
 80089f0:	4649      	mov	r1, r9
 80089f2:	4638      	mov	r0, r7
 80089f4:	47c0      	blx	r8
 80089f6:	3001      	adds	r0, #1
 80089f8:	d0e6      	beq.n	80089c8 <_printf_common+0xa4>
 80089fa:	3601      	adds	r6, #1
 80089fc:	e7d9      	b.n	80089b2 <_printf_common+0x8e>
	...

08008a00 <_printf_i>:
 8008a00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a04:	7e0f      	ldrb	r7, [r1, #24]
 8008a06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a08:	2f78      	cmp	r7, #120	; 0x78
 8008a0a:	4691      	mov	r9, r2
 8008a0c:	4680      	mov	r8, r0
 8008a0e:	460c      	mov	r4, r1
 8008a10:	469a      	mov	sl, r3
 8008a12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a16:	d807      	bhi.n	8008a28 <_printf_i+0x28>
 8008a18:	2f62      	cmp	r7, #98	; 0x62
 8008a1a:	d80a      	bhi.n	8008a32 <_printf_i+0x32>
 8008a1c:	2f00      	cmp	r7, #0
 8008a1e:	f000 80d8 	beq.w	8008bd2 <_printf_i+0x1d2>
 8008a22:	2f58      	cmp	r7, #88	; 0x58
 8008a24:	f000 80a3 	beq.w	8008b6e <_printf_i+0x16e>
 8008a28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a30:	e03a      	b.n	8008aa8 <_printf_i+0xa8>
 8008a32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a36:	2b15      	cmp	r3, #21
 8008a38:	d8f6      	bhi.n	8008a28 <_printf_i+0x28>
 8008a3a:	a101      	add	r1, pc, #4	; (adr r1, 8008a40 <_printf_i+0x40>)
 8008a3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a40:	08008a99 	.word	0x08008a99
 8008a44:	08008aad 	.word	0x08008aad
 8008a48:	08008a29 	.word	0x08008a29
 8008a4c:	08008a29 	.word	0x08008a29
 8008a50:	08008a29 	.word	0x08008a29
 8008a54:	08008a29 	.word	0x08008a29
 8008a58:	08008aad 	.word	0x08008aad
 8008a5c:	08008a29 	.word	0x08008a29
 8008a60:	08008a29 	.word	0x08008a29
 8008a64:	08008a29 	.word	0x08008a29
 8008a68:	08008a29 	.word	0x08008a29
 8008a6c:	08008bb9 	.word	0x08008bb9
 8008a70:	08008add 	.word	0x08008add
 8008a74:	08008b9b 	.word	0x08008b9b
 8008a78:	08008a29 	.word	0x08008a29
 8008a7c:	08008a29 	.word	0x08008a29
 8008a80:	08008bdb 	.word	0x08008bdb
 8008a84:	08008a29 	.word	0x08008a29
 8008a88:	08008add 	.word	0x08008add
 8008a8c:	08008a29 	.word	0x08008a29
 8008a90:	08008a29 	.word	0x08008a29
 8008a94:	08008ba3 	.word	0x08008ba3
 8008a98:	682b      	ldr	r3, [r5, #0]
 8008a9a:	1d1a      	adds	r2, r3, #4
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	602a      	str	r2, [r5, #0]
 8008aa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008aa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e0a3      	b.n	8008bf4 <_printf_i+0x1f4>
 8008aac:	6820      	ldr	r0, [r4, #0]
 8008aae:	6829      	ldr	r1, [r5, #0]
 8008ab0:	0606      	lsls	r6, r0, #24
 8008ab2:	f101 0304 	add.w	r3, r1, #4
 8008ab6:	d50a      	bpl.n	8008ace <_printf_i+0xce>
 8008ab8:	680e      	ldr	r6, [r1, #0]
 8008aba:	602b      	str	r3, [r5, #0]
 8008abc:	2e00      	cmp	r6, #0
 8008abe:	da03      	bge.n	8008ac8 <_printf_i+0xc8>
 8008ac0:	232d      	movs	r3, #45	; 0x2d
 8008ac2:	4276      	negs	r6, r6
 8008ac4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ac8:	485e      	ldr	r0, [pc, #376]	; (8008c44 <_printf_i+0x244>)
 8008aca:	230a      	movs	r3, #10
 8008acc:	e019      	b.n	8008b02 <_printf_i+0x102>
 8008ace:	680e      	ldr	r6, [r1, #0]
 8008ad0:	602b      	str	r3, [r5, #0]
 8008ad2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ad6:	bf18      	it	ne
 8008ad8:	b236      	sxthne	r6, r6
 8008ada:	e7ef      	b.n	8008abc <_printf_i+0xbc>
 8008adc:	682b      	ldr	r3, [r5, #0]
 8008ade:	6820      	ldr	r0, [r4, #0]
 8008ae0:	1d19      	adds	r1, r3, #4
 8008ae2:	6029      	str	r1, [r5, #0]
 8008ae4:	0601      	lsls	r1, r0, #24
 8008ae6:	d501      	bpl.n	8008aec <_printf_i+0xec>
 8008ae8:	681e      	ldr	r6, [r3, #0]
 8008aea:	e002      	b.n	8008af2 <_printf_i+0xf2>
 8008aec:	0646      	lsls	r6, r0, #25
 8008aee:	d5fb      	bpl.n	8008ae8 <_printf_i+0xe8>
 8008af0:	881e      	ldrh	r6, [r3, #0]
 8008af2:	4854      	ldr	r0, [pc, #336]	; (8008c44 <_printf_i+0x244>)
 8008af4:	2f6f      	cmp	r7, #111	; 0x6f
 8008af6:	bf0c      	ite	eq
 8008af8:	2308      	moveq	r3, #8
 8008afa:	230a      	movne	r3, #10
 8008afc:	2100      	movs	r1, #0
 8008afe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b02:	6865      	ldr	r5, [r4, #4]
 8008b04:	60a5      	str	r5, [r4, #8]
 8008b06:	2d00      	cmp	r5, #0
 8008b08:	bfa2      	ittt	ge
 8008b0a:	6821      	ldrge	r1, [r4, #0]
 8008b0c:	f021 0104 	bicge.w	r1, r1, #4
 8008b10:	6021      	strge	r1, [r4, #0]
 8008b12:	b90e      	cbnz	r6, 8008b18 <_printf_i+0x118>
 8008b14:	2d00      	cmp	r5, #0
 8008b16:	d04d      	beq.n	8008bb4 <_printf_i+0x1b4>
 8008b18:	4615      	mov	r5, r2
 8008b1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b1e:	fb03 6711 	mls	r7, r3, r1, r6
 8008b22:	5dc7      	ldrb	r7, [r0, r7]
 8008b24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b28:	4637      	mov	r7, r6
 8008b2a:	42bb      	cmp	r3, r7
 8008b2c:	460e      	mov	r6, r1
 8008b2e:	d9f4      	bls.n	8008b1a <_printf_i+0x11a>
 8008b30:	2b08      	cmp	r3, #8
 8008b32:	d10b      	bne.n	8008b4c <_printf_i+0x14c>
 8008b34:	6823      	ldr	r3, [r4, #0]
 8008b36:	07de      	lsls	r6, r3, #31
 8008b38:	d508      	bpl.n	8008b4c <_printf_i+0x14c>
 8008b3a:	6923      	ldr	r3, [r4, #16]
 8008b3c:	6861      	ldr	r1, [r4, #4]
 8008b3e:	4299      	cmp	r1, r3
 8008b40:	bfde      	ittt	le
 8008b42:	2330      	movle	r3, #48	; 0x30
 8008b44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008b4c:	1b52      	subs	r2, r2, r5
 8008b4e:	6122      	str	r2, [r4, #16]
 8008b50:	f8cd a000 	str.w	sl, [sp]
 8008b54:	464b      	mov	r3, r9
 8008b56:	aa03      	add	r2, sp, #12
 8008b58:	4621      	mov	r1, r4
 8008b5a:	4640      	mov	r0, r8
 8008b5c:	f7ff fee2 	bl	8008924 <_printf_common>
 8008b60:	3001      	adds	r0, #1
 8008b62:	d14c      	bne.n	8008bfe <_printf_i+0x1fe>
 8008b64:	f04f 30ff 	mov.w	r0, #4294967295
 8008b68:	b004      	add	sp, #16
 8008b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b6e:	4835      	ldr	r0, [pc, #212]	; (8008c44 <_printf_i+0x244>)
 8008b70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008b74:	6829      	ldr	r1, [r5, #0]
 8008b76:	6823      	ldr	r3, [r4, #0]
 8008b78:	f851 6b04 	ldr.w	r6, [r1], #4
 8008b7c:	6029      	str	r1, [r5, #0]
 8008b7e:	061d      	lsls	r5, r3, #24
 8008b80:	d514      	bpl.n	8008bac <_printf_i+0x1ac>
 8008b82:	07df      	lsls	r7, r3, #31
 8008b84:	bf44      	itt	mi
 8008b86:	f043 0320 	orrmi.w	r3, r3, #32
 8008b8a:	6023      	strmi	r3, [r4, #0]
 8008b8c:	b91e      	cbnz	r6, 8008b96 <_printf_i+0x196>
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	f023 0320 	bic.w	r3, r3, #32
 8008b94:	6023      	str	r3, [r4, #0]
 8008b96:	2310      	movs	r3, #16
 8008b98:	e7b0      	b.n	8008afc <_printf_i+0xfc>
 8008b9a:	6823      	ldr	r3, [r4, #0]
 8008b9c:	f043 0320 	orr.w	r3, r3, #32
 8008ba0:	6023      	str	r3, [r4, #0]
 8008ba2:	2378      	movs	r3, #120	; 0x78
 8008ba4:	4828      	ldr	r0, [pc, #160]	; (8008c48 <_printf_i+0x248>)
 8008ba6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008baa:	e7e3      	b.n	8008b74 <_printf_i+0x174>
 8008bac:	0659      	lsls	r1, r3, #25
 8008bae:	bf48      	it	mi
 8008bb0:	b2b6      	uxthmi	r6, r6
 8008bb2:	e7e6      	b.n	8008b82 <_printf_i+0x182>
 8008bb4:	4615      	mov	r5, r2
 8008bb6:	e7bb      	b.n	8008b30 <_printf_i+0x130>
 8008bb8:	682b      	ldr	r3, [r5, #0]
 8008bba:	6826      	ldr	r6, [r4, #0]
 8008bbc:	6961      	ldr	r1, [r4, #20]
 8008bbe:	1d18      	adds	r0, r3, #4
 8008bc0:	6028      	str	r0, [r5, #0]
 8008bc2:	0635      	lsls	r5, r6, #24
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	d501      	bpl.n	8008bcc <_printf_i+0x1cc>
 8008bc8:	6019      	str	r1, [r3, #0]
 8008bca:	e002      	b.n	8008bd2 <_printf_i+0x1d2>
 8008bcc:	0670      	lsls	r0, r6, #25
 8008bce:	d5fb      	bpl.n	8008bc8 <_printf_i+0x1c8>
 8008bd0:	8019      	strh	r1, [r3, #0]
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	6123      	str	r3, [r4, #16]
 8008bd6:	4615      	mov	r5, r2
 8008bd8:	e7ba      	b.n	8008b50 <_printf_i+0x150>
 8008bda:	682b      	ldr	r3, [r5, #0]
 8008bdc:	1d1a      	adds	r2, r3, #4
 8008bde:	602a      	str	r2, [r5, #0]
 8008be0:	681d      	ldr	r5, [r3, #0]
 8008be2:	6862      	ldr	r2, [r4, #4]
 8008be4:	2100      	movs	r1, #0
 8008be6:	4628      	mov	r0, r5
 8008be8:	f7f7 fb32 	bl	8000250 <memchr>
 8008bec:	b108      	cbz	r0, 8008bf2 <_printf_i+0x1f2>
 8008bee:	1b40      	subs	r0, r0, r5
 8008bf0:	6060      	str	r0, [r4, #4]
 8008bf2:	6863      	ldr	r3, [r4, #4]
 8008bf4:	6123      	str	r3, [r4, #16]
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bfc:	e7a8      	b.n	8008b50 <_printf_i+0x150>
 8008bfe:	6923      	ldr	r3, [r4, #16]
 8008c00:	462a      	mov	r2, r5
 8008c02:	4649      	mov	r1, r9
 8008c04:	4640      	mov	r0, r8
 8008c06:	47d0      	blx	sl
 8008c08:	3001      	adds	r0, #1
 8008c0a:	d0ab      	beq.n	8008b64 <_printf_i+0x164>
 8008c0c:	6823      	ldr	r3, [r4, #0]
 8008c0e:	079b      	lsls	r3, r3, #30
 8008c10:	d413      	bmi.n	8008c3a <_printf_i+0x23a>
 8008c12:	68e0      	ldr	r0, [r4, #12]
 8008c14:	9b03      	ldr	r3, [sp, #12]
 8008c16:	4298      	cmp	r0, r3
 8008c18:	bfb8      	it	lt
 8008c1a:	4618      	movlt	r0, r3
 8008c1c:	e7a4      	b.n	8008b68 <_printf_i+0x168>
 8008c1e:	2301      	movs	r3, #1
 8008c20:	4632      	mov	r2, r6
 8008c22:	4649      	mov	r1, r9
 8008c24:	4640      	mov	r0, r8
 8008c26:	47d0      	blx	sl
 8008c28:	3001      	adds	r0, #1
 8008c2a:	d09b      	beq.n	8008b64 <_printf_i+0x164>
 8008c2c:	3501      	adds	r5, #1
 8008c2e:	68e3      	ldr	r3, [r4, #12]
 8008c30:	9903      	ldr	r1, [sp, #12]
 8008c32:	1a5b      	subs	r3, r3, r1
 8008c34:	42ab      	cmp	r3, r5
 8008c36:	dcf2      	bgt.n	8008c1e <_printf_i+0x21e>
 8008c38:	e7eb      	b.n	8008c12 <_printf_i+0x212>
 8008c3a:	2500      	movs	r5, #0
 8008c3c:	f104 0619 	add.w	r6, r4, #25
 8008c40:	e7f5      	b.n	8008c2e <_printf_i+0x22e>
 8008c42:	bf00      	nop
 8008c44:	0800c49e 	.word	0x0800c49e
 8008c48:	0800c4af 	.word	0x0800c4af

08008c4c <swapfunc>:
 8008c4c:	2b02      	cmp	r3, #2
 8008c4e:	b510      	push	{r4, lr}
 8008c50:	d00a      	beq.n	8008c68 <swapfunc+0x1c>
 8008c52:	0892      	lsrs	r2, r2, #2
 8008c54:	3a01      	subs	r2, #1
 8008c56:	6803      	ldr	r3, [r0, #0]
 8008c58:	680c      	ldr	r4, [r1, #0]
 8008c5a:	f840 4b04 	str.w	r4, [r0], #4
 8008c5e:	2a00      	cmp	r2, #0
 8008c60:	f841 3b04 	str.w	r3, [r1], #4
 8008c64:	dcf6      	bgt.n	8008c54 <swapfunc+0x8>
 8008c66:	bd10      	pop	{r4, pc}
 8008c68:	4402      	add	r2, r0
 8008c6a:	780c      	ldrb	r4, [r1, #0]
 8008c6c:	7803      	ldrb	r3, [r0, #0]
 8008c6e:	f800 4b01 	strb.w	r4, [r0], #1
 8008c72:	f801 3b01 	strb.w	r3, [r1], #1
 8008c76:	1a13      	subs	r3, r2, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	dcf6      	bgt.n	8008c6a <swapfunc+0x1e>
 8008c7c:	e7f3      	b.n	8008c66 <swapfunc+0x1a>

08008c7e <med3.constprop.0>:
 8008c7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c80:	460c      	mov	r4, r1
 8008c82:	4615      	mov	r5, r2
 8008c84:	4607      	mov	r7, r0
 8008c86:	461e      	mov	r6, r3
 8008c88:	4798      	blx	r3
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	4629      	mov	r1, r5
 8008c8e:	4620      	mov	r0, r4
 8008c90:	da0a      	bge.n	8008ca8 <med3.constprop.0+0x2a>
 8008c92:	47b0      	blx	r6
 8008c94:	2800      	cmp	r0, #0
 8008c96:	db05      	blt.n	8008ca4 <med3.constprop.0+0x26>
 8008c98:	4629      	mov	r1, r5
 8008c9a:	4638      	mov	r0, r7
 8008c9c:	47b0      	blx	r6
 8008c9e:	2800      	cmp	r0, #0
 8008ca0:	db0a      	blt.n	8008cb8 <med3.constprop.0+0x3a>
 8008ca2:	463c      	mov	r4, r7
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ca8:	47b0      	blx	r6
 8008caa:	2800      	cmp	r0, #0
 8008cac:	dcfa      	bgt.n	8008ca4 <med3.constprop.0+0x26>
 8008cae:	4629      	mov	r1, r5
 8008cb0:	4638      	mov	r0, r7
 8008cb2:	47b0      	blx	r6
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	dbf4      	blt.n	8008ca2 <med3.constprop.0+0x24>
 8008cb8:	462c      	mov	r4, r5
 8008cba:	e7f3      	b.n	8008ca4 <med3.constprop.0+0x26>

08008cbc <qsort>:
 8008cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc0:	469a      	mov	sl, r3
 8008cc2:	ea40 0302 	orr.w	r3, r0, r2
 8008cc6:	079b      	lsls	r3, r3, #30
 8008cc8:	b097      	sub	sp, #92	; 0x5c
 8008cca:	4606      	mov	r6, r0
 8008ccc:	4614      	mov	r4, r2
 8008cce:	d11a      	bne.n	8008d06 <qsort+0x4a>
 8008cd0:	f1b2 0804 	subs.w	r8, r2, #4
 8008cd4:	bf18      	it	ne
 8008cd6:	f04f 0801 	movne.w	r8, #1
 8008cda:	2300      	movs	r3, #0
 8008cdc:	9302      	str	r3, [sp, #8]
 8008cde:	1933      	adds	r3, r6, r4
 8008ce0:	fb04 f701 	mul.w	r7, r4, r1
 8008ce4:	9301      	str	r3, [sp, #4]
 8008ce6:	2906      	cmp	r1, #6
 8008ce8:	eb06 0307 	add.w	r3, r6, r7
 8008cec:	9303      	str	r3, [sp, #12]
 8008cee:	d82a      	bhi.n	8008d46 <qsort+0x8a>
 8008cf0:	9b01      	ldr	r3, [sp, #4]
 8008cf2:	9a03      	ldr	r2, [sp, #12]
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d310      	bcc.n	8008d1a <qsort+0x5e>
 8008cf8:	9b02      	ldr	r3, [sp, #8]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f040 811e 	bne.w	8008f3c <qsort+0x280>
 8008d00:	b017      	add	sp, #92	; 0x5c
 8008d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d06:	f04f 0802 	mov.w	r8, #2
 8008d0a:	e7e6      	b.n	8008cda <qsort+0x1e>
 8008d0c:	4643      	mov	r3, r8
 8008d0e:	4622      	mov	r2, r4
 8008d10:	4639      	mov	r1, r7
 8008d12:	4628      	mov	r0, r5
 8008d14:	f7ff ff9a 	bl	8008c4c <swapfunc>
 8008d18:	e00e      	b.n	8008d38 <qsort+0x7c>
 8008d1a:	9d01      	ldr	r5, [sp, #4]
 8008d1c:	e00d      	b.n	8008d3a <qsort+0x7e>
 8008d1e:	1b2f      	subs	r7, r5, r4
 8008d20:	4629      	mov	r1, r5
 8008d22:	4638      	mov	r0, r7
 8008d24:	47d0      	blx	sl
 8008d26:	2800      	cmp	r0, #0
 8008d28:	dd09      	ble.n	8008d3e <qsort+0x82>
 8008d2a:	f1b8 0f00 	cmp.w	r8, #0
 8008d2e:	d1ed      	bne.n	8008d0c <qsort+0x50>
 8008d30:	682b      	ldr	r3, [r5, #0]
 8008d32:	683a      	ldr	r2, [r7, #0]
 8008d34:	602a      	str	r2, [r5, #0]
 8008d36:	603b      	str	r3, [r7, #0]
 8008d38:	463d      	mov	r5, r7
 8008d3a:	42ae      	cmp	r6, r5
 8008d3c:	d3ef      	bcc.n	8008d1e <qsort+0x62>
 8008d3e:	9b01      	ldr	r3, [sp, #4]
 8008d40:	4423      	add	r3, r4
 8008d42:	9301      	str	r3, [sp, #4]
 8008d44:	e7d4      	b.n	8008cf0 <qsort+0x34>
 8008d46:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8008d4a:	1b3f      	subs	r7, r7, r4
 8008d4c:	2907      	cmp	r1, #7
 8008d4e:	fb04 6909 	mla	r9, r4, r9, r6
 8008d52:	4437      	add	r7, r6
 8008d54:	d022      	beq.n	8008d9c <qsort+0xe0>
 8008d56:	2928      	cmp	r1, #40	; 0x28
 8008d58:	d945      	bls.n	8008de6 <qsort+0x12a>
 8008d5a:	08c9      	lsrs	r1, r1, #3
 8008d5c:	fb04 f501 	mul.w	r5, r4, r1
 8008d60:	4653      	mov	r3, sl
 8008d62:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8008d66:	1971      	adds	r1, r6, r5
 8008d68:	4630      	mov	r0, r6
 8008d6a:	f7ff ff88 	bl	8008c7e <med3.constprop.0>
 8008d6e:	4649      	mov	r1, r9
 8008d70:	eb09 0205 	add.w	r2, r9, r5
 8008d74:	4653      	mov	r3, sl
 8008d76:	4683      	mov	fp, r0
 8008d78:	1b48      	subs	r0, r1, r5
 8008d7a:	f7ff ff80 	bl	8008c7e <med3.constprop.0>
 8008d7e:	463a      	mov	r2, r7
 8008d80:	4681      	mov	r9, r0
 8008d82:	4653      	mov	r3, sl
 8008d84:	1b79      	subs	r1, r7, r5
 8008d86:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 8008d8a:	f7ff ff78 	bl	8008c7e <med3.constprop.0>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	4649      	mov	r1, r9
 8008d92:	4653      	mov	r3, sl
 8008d94:	4658      	mov	r0, fp
 8008d96:	f7ff ff72 	bl	8008c7e <med3.constprop.0>
 8008d9a:	4681      	mov	r9, r0
 8008d9c:	f1b8 0f00 	cmp.w	r8, #0
 8008da0:	d124      	bne.n	8008dec <qsort+0x130>
 8008da2:	6833      	ldr	r3, [r6, #0]
 8008da4:	f8d9 2000 	ldr.w	r2, [r9]
 8008da8:	6032      	str	r2, [r6, #0]
 8008daa:	f8c9 3000 	str.w	r3, [r9]
 8008dae:	eb06 0b04 	add.w	fp, r6, r4
 8008db2:	46b9      	mov	r9, r7
 8008db4:	465d      	mov	r5, fp
 8008db6:	2300      	movs	r3, #0
 8008db8:	45bb      	cmp	fp, r7
 8008dba:	d835      	bhi.n	8008e28 <qsort+0x16c>
 8008dbc:	4631      	mov	r1, r6
 8008dbe:	4658      	mov	r0, fp
 8008dc0:	9304      	str	r3, [sp, #16]
 8008dc2:	47d0      	blx	sl
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	9b04      	ldr	r3, [sp, #16]
 8008dc8:	dc3e      	bgt.n	8008e48 <qsort+0x18c>
 8008dca:	d10a      	bne.n	8008de2 <qsort+0x126>
 8008dcc:	f1b8 0f00 	cmp.w	r8, #0
 8008dd0:	d113      	bne.n	8008dfa <qsort+0x13e>
 8008dd2:	682b      	ldr	r3, [r5, #0]
 8008dd4:	f8db 2000 	ldr.w	r2, [fp]
 8008dd8:	602a      	str	r2, [r5, #0]
 8008dda:	f8cb 3000 	str.w	r3, [fp]
 8008dde:	4425      	add	r5, r4
 8008de0:	2301      	movs	r3, #1
 8008de2:	44a3      	add	fp, r4
 8008de4:	e7e8      	b.n	8008db8 <qsort+0xfc>
 8008de6:	463a      	mov	r2, r7
 8008de8:	46b3      	mov	fp, r6
 8008dea:	e7d1      	b.n	8008d90 <qsort+0xd4>
 8008dec:	4643      	mov	r3, r8
 8008dee:	4622      	mov	r2, r4
 8008df0:	4649      	mov	r1, r9
 8008df2:	4630      	mov	r0, r6
 8008df4:	f7ff ff2a 	bl	8008c4c <swapfunc>
 8008df8:	e7d9      	b.n	8008dae <qsort+0xf2>
 8008dfa:	4643      	mov	r3, r8
 8008dfc:	4622      	mov	r2, r4
 8008dfe:	4659      	mov	r1, fp
 8008e00:	4628      	mov	r0, r5
 8008e02:	f7ff ff23 	bl	8008c4c <swapfunc>
 8008e06:	e7ea      	b.n	8008dde <qsort+0x122>
 8008e08:	d10b      	bne.n	8008e22 <qsort+0x166>
 8008e0a:	f1b8 0f00 	cmp.w	r8, #0
 8008e0e:	d114      	bne.n	8008e3a <qsort+0x17e>
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	f8d9 2000 	ldr.w	r2, [r9]
 8008e16:	603a      	str	r2, [r7, #0]
 8008e18:	f8c9 3000 	str.w	r3, [r9]
 8008e1c:	eba9 0904 	sub.w	r9, r9, r4
 8008e20:	2301      	movs	r3, #1
 8008e22:	9f04      	ldr	r7, [sp, #16]
 8008e24:	45bb      	cmp	fp, r7
 8008e26:	d90f      	bls.n	8008e48 <qsort+0x18c>
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d143      	bne.n	8008eb4 <qsort+0x1f8>
 8008e2c:	9b01      	ldr	r3, [sp, #4]
 8008e2e:	9a03      	ldr	r2, [sp, #12]
 8008e30:	4293      	cmp	r3, r2
 8008e32:	f4bf af61 	bcs.w	8008cf8 <qsort+0x3c>
 8008e36:	9d01      	ldr	r5, [sp, #4]
 8008e38:	e036      	b.n	8008ea8 <qsort+0x1ec>
 8008e3a:	4643      	mov	r3, r8
 8008e3c:	4622      	mov	r2, r4
 8008e3e:	4649      	mov	r1, r9
 8008e40:	4638      	mov	r0, r7
 8008e42:	f7ff ff03 	bl	8008c4c <swapfunc>
 8008e46:	e7e9      	b.n	8008e1c <qsort+0x160>
 8008e48:	4631      	mov	r1, r6
 8008e4a:	4638      	mov	r0, r7
 8008e4c:	9305      	str	r3, [sp, #20]
 8008e4e:	47d0      	blx	sl
 8008e50:	1b3b      	subs	r3, r7, r4
 8008e52:	2800      	cmp	r0, #0
 8008e54:	9304      	str	r3, [sp, #16]
 8008e56:	9b05      	ldr	r3, [sp, #20]
 8008e58:	dad6      	bge.n	8008e08 <qsort+0x14c>
 8008e5a:	f1b8 0f00 	cmp.w	r8, #0
 8008e5e:	d006      	beq.n	8008e6e <qsort+0x1b2>
 8008e60:	4643      	mov	r3, r8
 8008e62:	4622      	mov	r2, r4
 8008e64:	4639      	mov	r1, r7
 8008e66:	4658      	mov	r0, fp
 8008e68:	f7ff fef0 	bl	8008c4c <swapfunc>
 8008e6c:	e005      	b.n	8008e7a <qsort+0x1be>
 8008e6e:	f8db 3000 	ldr.w	r3, [fp]
 8008e72:	683a      	ldr	r2, [r7, #0]
 8008e74:	f8cb 2000 	str.w	r2, [fp]
 8008e78:	603b      	str	r3, [r7, #0]
 8008e7a:	9f04      	ldr	r7, [sp, #16]
 8008e7c:	e7b0      	b.n	8008de0 <qsort+0x124>
 8008e7e:	4643      	mov	r3, r8
 8008e80:	4622      	mov	r2, r4
 8008e82:	4639      	mov	r1, r7
 8008e84:	4628      	mov	r0, r5
 8008e86:	f7ff fee1 	bl	8008c4c <swapfunc>
 8008e8a:	e00c      	b.n	8008ea6 <qsort+0x1ea>
 8008e8c:	1b2f      	subs	r7, r5, r4
 8008e8e:	4629      	mov	r1, r5
 8008e90:	4638      	mov	r0, r7
 8008e92:	47d0      	blx	sl
 8008e94:	2800      	cmp	r0, #0
 8008e96:	dd09      	ble.n	8008eac <qsort+0x1f0>
 8008e98:	f1b8 0f00 	cmp.w	r8, #0
 8008e9c:	d1ef      	bne.n	8008e7e <qsort+0x1c2>
 8008e9e:	682b      	ldr	r3, [r5, #0]
 8008ea0:	683a      	ldr	r2, [r7, #0]
 8008ea2:	602a      	str	r2, [r5, #0]
 8008ea4:	603b      	str	r3, [r7, #0]
 8008ea6:	463d      	mov	r5, r7
 8008ea8:	42ae      	cmp	r6, r5
 8008eaa:	d3ef      	bcc.n	8008e8c <qsort+0x1d0>
 8008eac:	9b01      	ldr	r3, [sp, #4]
 8008eae:	4423      	add	r3, r4
 8008eb0:	9301      	str	r3, [sp, #4]
 8008eb2:	e7bb      	b.n	8008e2c <qsort+0x170>
 8008eb4:	ebab 0305 	sub.w	r3, fp, r5
 8008eb8:	1baa      	subs	r2, r5, r6
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	bfa8      	it	ge
 8008ebe:	461a      	movge	r2, r3
 8008ec0:	9301      	str	r3, [sp, #4]
 8008ec2:	b12a      	cbz	r2, 8008ed0 <qsort+0x214>
 8008ec4:	4643      	mov	r3, r8
 8008ec6:	ebab 0102 	sub.w	r1, fp, r2
 8008eca:	4630      	mov	r0, r6
 8008ecc:	f7ff febe 	bl	8008c4c <swapfunc>
 8008ed0:	9b03      	ldr	r3, [sp, #12]
 8008ed2:	eba3 0209 	sub.w	r2, r3, r9
 8008ed6:	eba9 0707 	sub.w	r7, r9, r7
 8008eda:	1b12      	subs	r2, r2, r4
 8008edc:	42ba      	cmp	r2, r7
 8008ede:	bf28      	it	cs
 8008ee0:	463a      	movcs	r2, r7
 8008ee2:	b12a      	cbz	r2, 8008ef0 <qsort+0x234>
 8008ee4:	9903      	ldr	r1, [sp, #12]
 8008ee6:	4643      	mov	r3, r8
 8008ee8:	1a89      	subs	r1, r1, r2
 8008eea:	4658      	mov	r0, fp
 8008eec:	f7ff feae 	bl	8008c4c <swapfunc>
 8008ef0:	9d01      	ldr	r5, [sp, #4]
 8008ef2:	9b03      	ldr	r3, [sp, #12]
 8008ef4:	42af      	cmp	r7, r5
 8008ef6:	eba3 0007 	sub.w	r0, r3, r7
 8008efa:	d904      	bls.n	8008f06 <qsort+0x24a>
 8008efc:	4633      	mov	r3, r6
 8008efe:	463d      	mov	r5, r7
 8008f00:	9f01      	ldr	r7, [sp, #4]
 8008f02:	4606      	mov	r6, r0
 8008f04:	4618      	mov	r0, r3
 8008f06:	42a7      	cmp	r7, r4
 8008f08:	d921      	bls.n	8008f4e <qsort+0x292>
 8008f0a:	fbb7 f1f4 	udiv	r1, r7, r4
 8008f0e:	9b02      	ldr	r3, [sp, #8]
 8008f10:	2b07      	cmp	r3, #7
 8008f12:	d80d      	bhi.n	8008f30 <qsort+0x274>
 8008f14:	fbb5 f5f4 	udiv	r5, r5, r4
 8008f18:	aa16      	add	r2, sp, #88	; 0x58
 8008f1a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f1e:	f843 6c40 	str.w	r6, [r3, #-64]
 8008f22:	f843 5c3c 	str.w	r5, [r3, #-60]
 8008f26:	9b02      	ldr	r3, [sp, #8]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	9302      	str	r3, [sp, #8]
 8008f2c:	4606      	mov	r6, r0
 8008f2e:	e6d6      	b.n	8008cde <qsort+0x22>
 8008f30:	4653      	mov	r3, sl
 8008f32:	4622      	mov	r2, r4
 8008f34:	f7ff fec2 	bl	8008cbc <qsort>
 8008f38:	42a5      	cmp	r5, r4
 8008f3a:	d80b      	bhi.n	8008f54 <qsort+0x298>
 8008f3c:	9b02      	ldr	r3, [sp, #8]
 8008f3e:	aa16      	add	r2, sp, #88	; 0x58
 8008f40:	3b01      	subs	r3, #1
 8008f42:	9302      	str	r3, [sp, #8]
 8008f44:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f48:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 8008f4c:	e7ee      	b.n	8008f2c <qsort+0x270>
 8008f4e:	42a5      	cmp	r5, r4
 8008f50:	f67f aed2 	bls.w	8008cf8 <qsort+0x3c>
 8008f54:	fbb5 f1f4 	udiv	r1, r5, r4
 8008f58:	4630      	mov	r0, r6
 8008f5a:	e7e7      	b.n	8008f2c <qsort+0x270>

08008f5c <rand>:
 8008f5c:	4b16      	ldr	r3, [pc, #88]	; (8008fb8 <rand+0x5c>)
 8008f5e:	b510      	push	{r4, lr}
 8008f60:	681c      	ldr	r4, [r3, #0]
 8008f62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008f64:	b9b3      	cbnz	r3, 8008f94 <rand+0x38>
 8008f66:	2018      	movs	r0, #24
 8008f68:	f000 fe96 	bl	8009c98 <malloc>
 8008f6c:	63a0      	str	r0, [r4, #56]	; 0x38
 8008f6e:	b928      	cbnz	r0, 8008f7c <rand+0x20>
 8008f70:	4602      	mov	r2, r0
 8008f72:	4b12      	ldr	r3, [pc, #72]	; (8008fbc <rand+0x60>)
 8008f74:	4812      	ldr	r0, [pc, #72]	; (8008fc0 <rand+0x64>)
 8008f76:	214e      	movs	r1, #78	; 0x4e
 8008f78:	f000 f85e 	bl	8009038 <__assert_func>
 8008f7c:	4a11      	ldr	r2, [pc, #68]	; (8008fc4 <rand+0x68>)
 8008f7e:	4b12      	ldr	r3, [pc, #72]	; (8008fc8 <rand+0x6c>)
 8008f80:	e9c0 2300 	strd	r2, r3, [r0]
 8008f84:	4b11      	ldr	r3, [pc, #68]	; (8008fcc <rand+0x70>)
 8008f86:	6083      	str	r3, [r0, #8]
 8008f88:	230b      	movs	r3, #11
 8008f8a:	8183      	strh	r3, [r0, #12]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	2300      	movs	r3, #0
 8008f90:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008f94:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8008f96:	4a0e      	ldr	r2, [pc, #56]	; (8008fd0 <rand+0x74>)
 8008f98:	6920      	ldr	r0, [r4, #16]
 8008f9a:	6963      	ldr	r3, [r4, #20]
 8008f9c:	490d      	ldr	r1, [pc, #52]	; (8008fd4 <rand+0x78>)
 8008f9e:	4342      	muls	r2, r0
 8008fa0:	fb01 2203 	mla	r2, r1, r3, r2
 8008fa4:	fba0 0101 	umull	r0, r1, r0, r1
 8008fa8:	1c43      	adds	r3, r0, #1
 8008faa:	eb42 0001 	adc.w	r0, r2, r1
 8008fae:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8008fb2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008fb6:	bd10      	pop	{r4, pc}
 8008fb8:	20000060 	.word	0x20000060
 8008fbc:	0800c4c0 	.word	0x0800c4c0
 8008fc0:	0800c4d7 	.word	0x0800c4d7
 8008fc4:	abcd330e 	.word	0xabcd330e
 8008fc8:	e66d1234 	.word	0xe66d1234
 8008fcc:	0005deec 	.word	0x0005deec
 8008fd0:	5851f42d 	.word	0x5851f42d
 8008fd4:	4c957f2d 	.word	0x4c957f2d

08008fd8 <siprintf>:
 8008fd8:	b40e      	push	{r1, r2, r3}
 8008fda:	b500      	push	{lr}
 8008fdc:	b09c      	sub	sp, #112	; 0x70
 8008fde:	ab1d      	add	r3, sp, #116	; 0x74
 8008fe0:	9002      	str	r0, [sp, #8]
 8008fe2:	9006      	str	r0, [sp, #24]
 8008fe4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008fe8:	4809      	ldr	r0, [pc, #36]	; (8009010 <siprintf+0x38>)
 8008fea:	9107      	str	r1, [sp, #28]
 8008fec:	9104      	str	r1, [sp, #16]
 8008fee:	4909      	ldr	r1, [pc, #36]	; (8009014 <siprintf+0x3c>)
 8008ff0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ff4:	9105      	str	r1, [sp, #20]
 8008ff6:	6800      	ldr	r0, [r0, #0]
 8008ff8:	9301      	str	r3, [sp, #4]
 8008ffa:	a902      	add	r1, sp, #8
 8008ffc:	f001 fb38 	bl	800a670 <_svfiprintf_r>
 8009000:	9b02      	ldr	r3, [sp, #8]
 8009002:	2200      	movs	r2, #0
 8009004:	701a      	strb	r2, [r3, #0]
 8009006:	b01c      	add	sp, #112	; 0x70
 8009008:	f85d eb04 	ldr.w	lr, [sp], #4
 800900c:	b003      	add	sp, #12
 800900e:	4770      	bx	lr
 8009010:	20000060 	.word	0x20000060
 8009014:	ffff0208 	.word	0xffff0208

08009018 <strcat>:
 8009018:	b510      	push	{r4, lr}
 800901a:	4602      	mov	r2, r0
 800901c:	7814      	ldrb	r4, [r2, #0]
 800901e:	4613      	mov	r3, r2
 8009020:	3201      	adds	r2, #1
 8009022:	2c00      	cmp	r4, #0
 8009024:	d1fa      	bne.n	800901c <strcat+0x4>
 8009026:	3b01      	subs	r3, #1
 8009028:	f811 2b01 	ldrb.w	r2, [r1], #1
 800902c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009030:	2a00      	cmp	r2, #0
 8009032:	d1f9      	bne.n	8009028 <strcat+0x10>
 8009034:	bd10      	pop	{r4, pc}
	...

08009038 <__assert_func>:
 8009038:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800903a:	4614      	mov	r4, r2
 800903c:	461a      	mov	r2, r3
 800903e:	4b09      	ldr	r3, [pc, #36]	; (8009064 <__assert_func+0x2c>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4605      	mov	r5, r0
 8009044:	68d8      	ldr	r0, [r3, #12]
 8009046:	b14c      	cbz	r4, 800905c <__assert_func+0x24>
 8009048:	4b07      	ldr	r3, [pc, #28]	; (8009068 <__assert_func+0x30>)
 800904a:	9100      	str	r1, [sp, #0]
 800904c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009050:	4906      	ldr	r1, [pc, #24]	; (800906c <__assert_func+0x34>)
 8009052:	462b      	mov	r3, r5
 8009054:	f000 fe0a 	bl	8009c6c <fiprintf>
 8009058:	f001 fe34 	bl	800acc4 <abort>
 800905c:	4b04      	ldr	r3, [pc, #16]	; (8009070 <__assert_func+0x38>)
 800905e:	461c      	mov	r4, r3
 8009060:	e7f3      	b.n	800904a <__assert_func+0x12>
 8009062:	bf00      	nop
 8009064:	20000060 	.word	0x20000060
 8009068:	0800c532 	.word	0x0800c532
 800906c:	0800c53f 	.word	0x0800c53f
 8009070:	0800c56d 	.word	0x0800c56d

08009074 <quorem>:
 8009074:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009078:	6903      	ldr	r3, [r0, #16]
 800907a:	690c      	ldr	r4, [r1, #16]
 800907c:	42a3      	cmp	r3, r4
 800907e:	4607      	mov	r7, r0
 8009080:	f2c0 8081 	blt.w	8009186 <quorem+0x112>
 8009084:	3c01      	subs	r4, #1
 8009086:	f101 0814 	add.w	r8, r1, #20
 800908a:	f100 0514 	add.w	r5, r0, #20
 800908e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009092:	9301      	str	r3, [sp, #4]
 8009094:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009098:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800909c:	3301      	adds	r3, #1
 800909e:	429a      	cmp	r2, r3
 80090a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80090a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80090a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80090ac:	d331      	bcc.n	8009112 <quorem+0x9e>
 80090ae:	f04f 0e00 	mov.w	lr, #0
 80090b2:	4640      	mov	r0, r8
 80090b4:	46ac      	mov	ip, r5
 80090b6:	46f2      	mov	sl, lr
 80090b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80090bc:	b293      	uxth	r3, r2
 80090be:	fb06 e303 	mla	r3, r6, r3, lr
 80090c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	ebaa 0303 	sub.w	r3, sl, r3
 80090cc:	f8dc a000 	ldr.w	sl, [ip]
 80090d0:	0c12      	lsrs	r2, r2, #16
 80090d2:	fa13 f38a 	uxtah	r3, r3, sl
 80090d6:	fb06 e202 	mla	r2, r6, r2, lr
 80090da:	9300      	str	r3, [sp, #0]
 80090dc:	9b00      	ldr	r3, [sp, #0]
 80090de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80090e2:	b292      	uxth	r2, r2
 80090e4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80090e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80090ec:	f8bd 3000 	ldrh.w	r3, [sp]
 80090f0:	4581      	cmp	r9, r0
 80090f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090f6:	f84c 3b04 	str.w	r3, [ip], #4
 80090fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80090fe:	d2db      	bcs.n	80090b8 <quorem+0x44>
 8009100:	f855 300b 	ldr.w	r3, [r5, fp]
 8009104:	b92b      	cbnz	r3, 8009112 <quorem+0x9e>
 8009106:	9b01      	ldr	r3, [sp, #4]
 8009108:	3b04      	subs	r3, #4
 800910a:	429d      	cmp	r5, r3
 800910c:	461a      	mov	r2, r3
 800910e:	d32e      	bcc.n	800916e <quorem+0xfa>
 8009110:	613c      	str	r4, [r7, #16]
 8009112:	4638      	mov	r0, r7
 8009114:	f001 f858 	bl	800a1c8 <__mcmp>
 8009118:	2800      	cmp	r0, #0
 800911a:	db24      	blt.n	8009166 <quorem+0xf2>
 800911c:	3601      	adds	r6, #1
 800911e:	4628      	mov	r0, r5
 8009120:	f04f 0c00 	mov.w	ip, #0
 8009124:	f858 2b04 	ldr.w	r2, [r8], #4
 8009128:	f8d0 e000 	ldr.w	lr, [r0]
 800912c:	b293      	uxth	r3, r2
 800912e:	ebac 0303 	sub.w	r3, ip, r3
 8009132:	0c12      	lsrs	r2, r2, #16
 8009134:	fa13 f38e 	uxtah	r3, r3, lr
 8009138:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800913c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009140:	b29b      	uxth	r3, r3
 8009142:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009146:	45c1      	cmp	r9, r8
 8009148:	f840 3b04 	str.w	r3, [r0], #4
 800914c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009150:	d2e8      	bcs.n	8009124 <quorem+0xb0>
 8009152:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009156:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800915a:	b922      	cbnz	r2, 8009166 <quorem+0xf2>
 800915c:	3b04      	subs	r3, #4
 800915e:	429d      	cmp	r5, r3
 8009160:	461a      	mov	r2, r3
 8009162:	d30a      	bcc.n	800917a <quorem+0x106>
 8009164:	613c      	str	r4, [r7, #16]
 8009166:	4630      	mov	r0, r6
 8009168:	b003      	add	sp, #12
 800916a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800916e:	6812      	ldr	r2, [r2, #0]
 8009170:	3b04      	subs	r3, #4
 8009172:	2a00      	cmp	r2, #0
 8009174:	d1cc      	bne.n	8009110 <quorem+0x9c>
 8009176:	3c01      	subs	r4, #1
 8009178:	e7c7      	b.n	800910a <quorem+0x96>
 800917a:	6812      	ldr	r2, [r2, #0]
 800917c:	3b04      	subs	r3, #4
 800917e:	2a00      	cmp	r2, #0
 8009180:	d1f0      	bne.n	8009164 <quorem+0xf0>
 8009182:	3c01      	subs	r4, #1
 8009184:	e7eb      	b.n	800915e <quorem+0xea>
 8009186:	2000      	movs	r0, #0
 8009188:	e7ee      	b.n	8009168 <quorem+0xf4>
 800918a:	0000      	movs	r0, r0
 800918c:	0000      	movs	r0, r0
	...

08009190 <_dtoa_r>:
 8009190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009194:	ed2d 8b02 	vpush	{d8}
 8009198:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800919a:	b091      	sub	sp, #68	; 0x44
 800919c:	ed8d 0b02 	vstr	d0, [sp, #8]
 80091a0:	ec59 8b10 	vmov	r8, r9, d0
 80091a4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80091a6:	9106      	str	r1, [sp, #24]
 80091a8:	4606      	mov	r6, r0
 80091aa:	9208      	str	r2, [sp, #32]
 80091ac:	930c      	str	r3, [sp, #48]	; 0x30
 80091ae:	b975      	cbnz	r5, 80091ce <_dtoa_r+0x3e>
 80091b0:	2010      	movs	r0, #16
 80091b2:	f000 fd71 	bl	8009c98 <malloc>
 80091b6:	4602      	mov	r2, r0
 80091b8:	6270      	str	r0, [r6, #36]	; 0x24
 80091ba:	b920      	cbnz	r0, 80091c6 <_dtoa_r+0x36>
 80091bc:	4baa      	ldr	r3, [pc, #680]	; (8009468 <_dtoa_r+0x2d8>)
 80091be:	21ea      	movs	r1, #234	; 0xea
 80091c0:	48aa      	ldr	r0, [pc, #680]	; (800946c <_dtoa_r+0x2dc>)
 80091c2:	f7ff ff39 	bl	8009038 <__assert_func>
 80091c6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80091ca:	6005      	str	r5, [r0, #0]
 80091cc:	60c5      	str	r5, [r0, #12]
 80091ce:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80091d0:	6819      	ldr	r1, [r3, #0]
 80091d2:	b151      	cbz	r1, 80091ea <_dtoa_r+0x5a>
 80091d4:	685a      	ldr	r2, [r3, #4]
 80091d6:	604a      	str	r2, [r1, #4]
 80091d8:	2301      	movs	r3, #1
 80091da:	4093      	lsls	r3, r2
 80091dc:	608b      	str	r3, [r1, #8]
 80091de:	4630      	mov	r0, r6
 80091e0:	f000 fdb0 	bl	8009d44 <_Bfree>
 80091e4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80091e6:	2200      	movs	r2, #0
 80091e8:	601a      	str	r2, [r3, #0]
 80091ea:	f1b9 0300 	subs.w	r3, r9, #0
 80091ee:	bfbb      	ittet	lt
 80091f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80091f4:	9303      	strlt	r3, [sp, #12]
 80091f6:	2300      	movge	r3, #0
 80091f8:	2201      	movlt	r2, #1
 80091fa:	bfac      	ite	ge
 80091fc:	6023      	strge	r3, [r4, #0]
 80091fe:	6022      	strlt	r2, [r4, #0]
 8009200:	4b9b      	ldr	r3, [pc, #620]	; (8009470 <_dtoa_r+0x2e0>)
 8009202:	9c03      	ldr	r4, [sp, #12]
 8009204:	43a3      	bics	r3, r4
 8009206:	d11c      	bne.n	8009242 <_dtoa_r+0xb2>
 8009208:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800920a:	f242 730f 	movw	r3, #9999	; 0x270f
 800920e:	6013      	str	r3, [r2, #0]
 8009210:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009214:	ea53 0308 	orrs.w	r3, r3, r8
 8009218:	f000 84fd 	beq.w	8009c16 <_dtoa_r+0xa86>
 800921c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800921e:	b963      	cbnz	r3, 800923a <_dtoa_r+0xaa>
 8009220:	4b94      	ldr	r3, [pc, #592]	; (8009474 <_dtoa_r+0x2e4>)
 8009222:	e01f      	b.n	8009264 <_dtoa_r+0xd4>
 8009224:	4b94      	ldr	r3, [pc, #592]	; (8009478 <_dtoa_r+0x2e8>)
 8009226:	9301      	str	r3, [sp, #4]
 8009228:	3308      	adds	r3, #8
 800922a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800922c:	6013      	str	r3, [r2, #0]
 800922e:	9801      	ldr	r0, [sp, #4]
 8009230:	b011      	add	sp, #68	; 0x44
 8009232:	ecbd 8b02 	vpop	{d8}
 8009236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800923a:	4b8e      	ldr	r3, [pc, #568]	; (8009474 <_dtoa_r+0x2e4>)
 800923c:	9301      	str	r3, [sp, #4]
 800923e:	3303      	adds	r3, #3
 8009240:	e7f3      	b.n	800922a <_dtoa_r+0x9a>
 8009242:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009246:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800924a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800924e:	d10b      	bne.n	8009268 <_dtoa_r+0xd8>
 8009250:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009252:	2301      	movs	r3, #1
 8009254:	6013      	str	r3, [r2, #0]
 8009256:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009258:	2b00      	cmp	r3, #0
 800925a:	f000 84d9 	beq.w	8009c10 <_dtoa_r+0xa80>
 800925e:	4887      	ldr	r0, [pc, #540]	; (800947c <_dtoa_r+0x2ec>)
 8009260:	6018      	str	r0, [r3, #0]
 8009262:	1e43      	subs	r3, r0, #1
 8009264:	9301      	str	r3, [sp, #4]
 8009266:	e7e2      	b.n	800922e <_dtoa_r+0x9e>
 8009268:	a90f      	add	r1, sp, #60	; 0x3c
 800926a:	aa0e      	add	r2, sp, #56	; 0x38
 800926c:	4630      	mov	r0, r6
 800926e:	eeb0 0b48 	vmov.f64	d0, d8
 8009272:	f001 f84f 	bl	800a314 <__d2b>
 8009276:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800927a:	4605      	mov	r5, r0
 800927c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800927e:	2900      	cmp	r1, #0
 8009280:	d046      	beq.n	8009310 <_dtoa_r+0x180>
 8009282:	ee18 4a90 	vmov	r4, s17
 8009286:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800928a:	ec53 2b18 	vmov	r2, r3, d8
 800928e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8009292:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009296:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800929a:	2400      	movs	r4, #0
 800929c:	ec43 2b16 	vmov	d6, r2, r3
 80092a0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80092a4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009450 <_dtoa_r+0x2c0>
 80092a8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80092ac:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8009458 <_dtoa_r+0x2c8>
 80092b0:	eea7 6b05 	vfma.f64	d6, d7, d5
 80092b4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009460 <_dtoa_r+0x2d0>
 80092b8:	ee07 1a90 	vmov	s15, r1
 80092bc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80092c0:	eeb0 7b46 	vmov.f64	d7, d6
 80092c4:	eea4 7b05 	vfma.f64	d7, d4, d5
 80092c8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80092cc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80092d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092d4:	ee16 ba90 	vmov	fp, s13
 80092d8:	940a      	str	r4, [sp, #40]	; 0x28
 80092da:	d508      	bpl.n	80092ee <_dtoa_r+0x15e>
 80092dc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80092e0:	eeb4 6b47 	vcmp.f64	d6, d7
 80092e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092e8:	bf18      	it	ne
 80092ea:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80092ee:	f1bb 0f16 	cmp.w	fp, #22
 80092f2:	d82f      	bhi.n	8009354 <_dtoa_r+0x1c4>
 80092f4:	4b62      	ldr	r3, [pc, #392]	; (8009480 <_dtoa_r+0x2f0>)
 80092f6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80092fa:	ed93 7b00 	vldr	d7, [r3]
 80092fe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009306:	d501      	bpl.n	800930c <_dtoa_r+0x17c>
 8009308:	f10b 3bff 	add.w	fp, fp, #4294967295
 800930c:	2300      	movs	r3, #0
 800930e:	e022      	b.n	8009356 <_dtoa_r+0x1c6>
 8009310:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009312:	4401      	add	r1, r0
 8009314:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009318:	2b20      	cmp	r3, #32
 800931a:	bfc1      	itttt	gt
 800931c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009320:	fa04 f303 	lslgt.w	r3, r4, r3
 8009324:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8009328:	fa28 f804 	lsrgt.w	r8, r8, r4
 800932c:	bfd6      	itet	le
 800932e:	f1c3 0320 	rsble	r3, r3, #32
 8009332:	ea43 0808 	orrgt.w	r8, r3, r8
 8009336:	fa08 f803 	lslle.w	r8, r8, r3
 800933a:	ee07 8a90 	vmov	s15, r8
 800933e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009342:	3901      	subs	r1, #1
 8009344:	ee17 4a90 	vmov	r4, s15
 8009348:	ec53 2b17 	vmov	r2, r3, d7
 800934c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009350:	2401      	movs	r4, #1
 8009352:	e7a3      	b.n	800929c <_dtoa_r+0x10c>
 8009354:	2301      	movs	r3, #1
 8009356:	930b      	str	r3, [sp, #44]	; 0x2c
 8009358:	1a43      	subs	r3, r0, r1
 800935a:	1e5a      	subs	r2, r3, #1
 800935c:	bf45      	ittet	mi
 800935e:	f1c3 0301 	rsbmi	r3, r3, #1
 8009362:	9304      	strmi	r3, [sp, #16]
 8009364:	2300      	movpl	r3, #0
 8009366:	2300      	movmi	r3, #0
 8009368:	9205      	str	r2, [sp, #20]
 800936a:	bf54      	ite	pl
 800936c:	9304      	strpl	r3, [sp, #16]
 800936e:	9305      	strmi	r3, [sp, #20]
 8009370:	f1bb 0f00 	cmp.w	fp, #0
 8009374:	db18      	blt.n	80093a8 <_dtoa_r+0x218>
 8009376:	9b05      	ldr	r3, [sp, #20]
 8009378:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800937c:	445b      	add	r3, fp
 800937e:	9305      	str	r3, [sp, #20]
 8009380:	2300      	movs	r3, #0
 8009382:	9a06      	ldr	r2, [sp, #24]
 8009384:	2a09      	cmp	r2, #9
 8009386:	d849      	bhi.n	800941c <_dtoa_r+0x28c>
 8009388:	2a05      	cmp	r2, #5
 800938a:	bfc4      	itt	gt
 800938c:	3a04      	subgt	r2, #4
 800938e:	9206      	strgt	r2, [sp, #24]
 8009390:	9a06      	ldr	r2, [sp, #24]
 8009392:	f1a2 0202 	sub.w	r2, r2, #2
 8009396:	bfcc      	ite	gt
 8009398:	2400      	movgt	r4, #0
 800939a:	2401      	movle	r4, #1
 800939c:	2a03      	cmp	r2, #3
 800939e:	d848      	bhi.n	8009432 <_dtoa_r+0x2a2>
 80093a0:	e8df f002 	tbb	[pc, r2]
 80093a4:	3a2c2e0b 	.word	0x3a2c2e0b
 80093a8:	9b04      	ldr	r3, [sp, #16]
 80093aa:	2200      	movs	r2, #0
 80093ac:	eba3 030b 	sub.w	r3, r3, fp
 80093b0:	9304      	str	r3, [sp, #16]
 80093b2:	9209      	str	r2, [sp, #36]	; 0x24
 80093b4:	f1cb 0300 	rsb	r3, fp, #0
 80093b8:	e7e3      	b.n	8009382 <_dtoa_r+0x1f2>
 80093ba:	2200      	movs	r2, #0
 80093bc:	9207      	str	r2, [sp, #28]
 80093be:	9a08      	ldr	r2, [sp, #32]
 80093c0:	2a00      	cmp	r2, #0
 80093c2:	dc39      	bgt.n	8009438 <_dtoa_r+0x2a8>
 80093c4:	f04f 0a01 	mov.w	sl, #1
 80093c8:	46d1      	mov	r9, sl
 80093ca:	4652      	mov	r2, sl
 80093cc:	f8cd a020 	str.w	sl, [sp, #32]
 80093d0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80093d2:	2100      	movs	r1, #0
 80093d4:	6079      	str	r1, [r7, #4]
 80093d6:	2004      	movs	r0, #4
 80093d8:	f100 0c14 	add.w	ip, r0, #20
 80093dc:	4594      	cmp	ip, r2
 80093de:	6879      	ldr	r1, [r7, #4]
 80093e0:	d92f      	bls.n	8009442 <_dtoa_r+0x2b2>
 80093e2:	4630      	mov	r0, r6
 80093e4:	930d      	str	r3, [sp, #52]	; 0x34
 80093e6:	f000 fc6d 	bl	8009cc4 <_Balloc>
 80093ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093ec:	9001      	str	r0, [sp, #4]
 80093ee:	4602      	mov	r2, r0
 80093f0:	2800      	cmp	r0, #0
 80093f2:	d149      	bne.n	8009488 <_dtoa_r+0x2f8>
 80093f4:	4b23      	ldr	r3, [pc, #140]	; (8009484 <_dtoa_r+0x2f4>)
 80093f6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80093fa:	e6e1      	b.n	80091c0 <_dtoa_r+0x30>
 80093fc:	2201      	movs	r2, #1
 80093fe:	e7dd      	b.n	80093bc <_dtoa_r+0x22c>
 8009400:	2200      	movs	r2, #0
 8009402:	9207      	str	r2, [sp, #28]
 8009404:	9a08      	ldr	r2, [sp, #32]
 8009406:	eb0b 0a02 	add.w	sl, fp, r2
 800940a:	f10a 0901 	add.w	r9, sl, #1
 800940e:	464a      	mov	r2, r9
 8009410:	2a01      	cmp	r2, #1
 8009412:	bfb8      	it	lt
 8009414:	2201      	movlt	r2, #1
 8009416:	e7db      	b.n	80093d0 <_dtoa_r+0x240>
 8009418:	2201      	movs	r2, #1
 800941a:	e7f2      	b.n	8009402 <_dtoa_r+0x272>
 800941c:	2401      	movs	r4, #1
 800941e:	2200      	movs	r2, #0
 8009420:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8009424:	f04f 3aff 	mov.w	sl, #4294967295
 8009428:	2100      	movs	r1, #0
 800942a:	46d1      	mov	r9, sl
 800942c:	2212      	movs	r2, #18
 800942e:	9108      	str	r1, [sp, #32]
 8009430:	e7ce      	b.n	80093d0 <_dtoa_r+0x240>
 8009432:	2201      	movs	r2, #1
 8009434:	9207      	str	r2, [sp, #28]
 8009436:	e7f5      	b.n	8009424 <_dtoa_r+0x294>
 8009438:	f8dd a020 	ldr.w	sl, [sp, #32]
 800943c:	46d1      	mov	r9, sl
 800943e:	4652      	mov	r2, sl
 8009440:	e7c6      	b.n	80093d0 <_dtoa_r+0x240>
 8009442:	3101      	adds	r1, #1
 8009444:	6079      	str	r1, [r7, #4]
 8009446:	0040      	lsls	r0, r0, #1
 8009448:	e7c6      	b.n	80093d8 <_dtoa_r+0x248>
 800944a:	bf00      	nop
 800944c:	f3af 8000 	nop.w
 8009450:	636f4361 	.word	0x636f4361
 8009454:	3fd287a7 	.word	0x3fd287a7
 8009458:	8b60c8b3 	.word	0x8b60c8b3
 800945c:	3fc68a28 	.word	0x3fc68a28
 8009460:	509f79fb 	.word	0x509f79fb
 8009464:	3fd34413 	.word	0x3fd34413
 8009468:	0800c4c0 	.word	0x0800c4c0
 800946c:	0800c57b 	.word	0x0800c57b
 8009470:	7ff00000 	.word	0x7ff00000
 8009474:	0800c577 	.word	0x0800c577
 8009478:	0800c56e 	.word	0x0800c56e
 800947c:	0800c49d 	.word	0x0800c49d
 8009480:	0800c670 	.word	0x0800c670
 8009484:	0800c5d6 	.word	0x0800c5d6
 8009488:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800948a:	9901      	ldr	r1, [sp, #4]
 800948c:	6011      	str	r1, [r2, #0]
 800948e:	f1b9 0f0e 	cmp.w	r9, #14
 8009492:	d86c      	bhi.n	800956e <_dtoa_r+0x3de>
 8009494:	2c00      	cmp	r4, #0
 8009496:	d06a      	beq.n	800956e <_dtoa_r+0x3de>
 8009498:	f1bb 0f00 	cmp.w	fp, #0
 800949c:	f340 80a0 	ble.w	80095e0 <_dtoa_r+0x450>
 80094a0:	49c1      	ldr	r1, [pc, #772]	; (80097a8 <_dtoa_r+0x618>)
 80094a2:	f00b 020f 	and.w	r2, fp, #15
 80094a6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80094aa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80094ae:	ed92 7b00 	vldr	d7, [r2]
 80094b2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80094b6:	f000 8087 	beq.w	80095c8 <_dtoa_r+0x438>
 80094ba:	4abc      	ldr	r2, [pc, #752]	; (80097ac <_dtoa_r+0x61c>)
 80094bc:	ed92 6b08 	vldr	d6, [r2, #32]
 80094c0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80094c4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80094c8:	f001 010f 	and.w	r1, r1, #15
 80094cc:	2203      	movs	r2, #3
 80094ce:	48b7      	ldr	r0, [pc, #732]	; (80097ac <_dtoa_r+0x61c>)
 80094d0:	2900      	cmp	r1, #0
 80094d2:	d17b      	bne.n	80095cc <_dtoa_r+0x43c>
 80094d4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80094d8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80094dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80094e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80094e2:	2900      	cmp	r1, #0
 80094e4:	f000 80a2 	beq.w	800962c <_dtoa_r+0x49c>
 80094e8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80094ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80094f0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80094f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094f8:	f140 8098 	bpl.w	800962c <_dtoa_r+0x49c>
 80094fc:	f1b9 0f00 	cmp.w	r9, #0
 8009500:	f000 8094 	beq.w	800962c <_dtoa_r+0x49c>
 8009504:	f1ba 0f00 	cmp.w	sl, #0
 8009508:	dd2f      	ble.n	800956a <_dtoa_r+0x3da>
 800950a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800950e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009512:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009516:	f10b 37ff 	add.w	r7, fp, #4294967295
 800951a:	3201      	adds	r2, #1
 800951c:	4650      	mov	r0, sl
 800951e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009522:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009526:	ee07 2a90 	vmov	s15, r2
 800952a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800952e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009532:	ee15 4a90 	vmov	r4, s11
 8009536:	ec52 1b15 	vmov	r1, r2, d5
 800953a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800953e:	2800      	cmp	r0, #0
 8009540:	d177      	bne.n	8009632 <_dtoa_r+0x4a2>
 8009542:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009546:	ee36 6b47 	vsub.f64	d6, d6, d7
 800954a:	ec42 1b17 	vmov	d7, r1, r2
 800954e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009556:	f300 8263 	bgt.w	8009a20 <_dtoa_r+0x890>
 800955a:	eeb1 7b47 	vneg.f64	d7, d7
 800955e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009566:	f100 8258 	bmi.w	8009a1a <_dtoa_r+0x88a>
 800956a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800956e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009570:	2a00      	cmp	r2, #0
 8009572:	f2c0 811d 	blt.w	80097b0 <_dtoa_r+0x620>
 8009576:	f1bb 0f0e 	cmp.w	fp, #14
 800957a:	f300 8119 	bgt.w	80097b0 <_dtoa_r+0x620>
 800957e:	4b8a      	ldr	r3, [pc, #552]	; (80097a8 <_dtoa_r+0x618>)
 8009580:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009584:	ed93 6b00 	vldr	d6, [r3]
 8009588:	9b08      	ldr	r3, [sp, #32]
 800958a:	2b00      	cmp	r3, #0
 800958c:	f280 80b7 	bge.w	80096fe <_dtoa_r+0x56e>
 8009590:	f1b9 0f00 	cmp.w	r9, #0
 8009594:	f300 80b3 	bgt.w	80096fe <_dtoa_r+0x56e>
 8009598:	f040 823f 	bne.w	8009a1a <_dtoa_r+0x88a>
 800959c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80095a0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80095a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80095a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80095ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095b0:	464c      	mov	r4, r9
 80095b2:	464f      	mov	r7, r9
 80095b4:	f280 8215 	bge.w	80099e2 <_dtoa_r+0x852>
 80095b8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80095bc:	2331      	movs	r3, #49	; 0x31
 80095be:	f808 3b01 	strb.w	r3, [r8], #1
 80095c2:	f10b 0b01 	add.w	fp, fp, #1
 80095c6:	e211      	b.n	80099ec <_dtoa_r+0x85c>
 80095c8:	2202      	movs	r2, #2
 80095ca:	e780      	b.n	80094ce <_dtoa_r+0x33e>
 80095cc:	07cc      	lsls	r4, r1, #31
 80095ce:	d504      	bpl.n	80095da <_dtoa_r+0x44a>
 80095d0:	ed90 6b00 	vldr	d6, [r0]
 80095d4:	3201      	adds	r2, #1
 80095d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80095da:	1049      	asrs	r1, r1, #1
 80095dc:	3008      	adds	r0, #8
 80095de:	e777      	b.n	80094d0 <_dtoa_r+0x340>
 80095e0:	d022      	beq.n	8009628 <_dtoa_r+0x498>
 80095e2:	f1cb 0100 	rsb	r1, fp, #0
 80095e6:	4a70      	ldr	r2, [pc, #448]	; (80097a8 <_dtoa_r+0x618>)
 80095e8:	f001 000f 	and.w	r0, r1, #15
 80095ec:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80095f0:	ed92 7b00 	vldr	d7, [r2]
 80095f4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80095f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80095fc:	486b      	ldr	r0, [pc, #428]	; (80097ac <_dtoa_r+0x61c>)
 80095fe:	1109      	asrs	r1, r1, #4
 8009600:	2400      	movs	r4, #0
 8009602:	2202      	movs	r2, #2
 8009604:	b929      	cbnz	r1, 8009612 <_dtoa_r+0x482>
 8009606:	2c00      	cmp	r4, #0
 8009608:	f43f af6a 	beq.w	80094e0 <_dtoa_r+0x350>
 800960c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009610:	e766      	b.n	80094e0 <_dtoa_r+0x350>
 8009612:	07cf      	lsls	r7, r1, #31
 8009614:	d505      	bpl.n	8009622 <_dtoa_r+0x492>
 8009616:	ed90 6b00 	vldr	d6, [r0]
 800961a:	3201      	adds	r2, #1
 800961c:	2401      	movs	r4, #1
 800961e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009622:	1049      	asrs	r1, r1, #1
 8009624:	3008      	adds	r0, #8
 8009626:	e7ed      	b.n	8009604 <_dtoa_r+0x474>
 8009628:	2202      	movs	r2, #2
 800962a:	e759      	b.n	80094e0 <_dtoa_r+0x350>
 800962c:	465f      	mov	r7, fp
 800962e:	4648      	mov	r0, r9
 8009630:	e775      	b.n	800951e <_dtoa_r+0x38e>
 8009632:	ec42 1b17 	vmov	d7, r1, r2
 8009636:	4a5c      	ldr	r2, [pc, #368]	; (80097a8 <_dtoa_r+0x618>)
 8009638:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800963c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009640:	9a01      	ldr	r2, [sp, #4]
 8009642:	1814      	adds	r4, r2, r0
 8009644:	9a07      	ldr	r2, [sp, #28]
 8009646:	b352      	cbz	r2, 800969e <_dtoa_r+0x50e>
 8009648:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800964c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009650:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009654:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009658:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800965c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009660:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009664:	ee14 2a90 	vmov	r2, s9
 8009668:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800966c:	3230      	adds	r2, #48	; 0x30
 800966e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009672:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800967a:	f808 2b01 	strb.w	r2, [r8], #1
 800967e:	d439      	bmi.n	80096f4 <_dtoa_r+0x564>
 8009680:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009684:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800968c:	d472      	bmi.n	8009774 <_dtoa_r+0x5e4>
 800968e:	45a0      	cmp	r8, r4
 8009690:	f43f af6b 	beq.w	800956a <_dtoa_r+0x3da>
 8009694:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009698:	ee26 6b03 	vmul.f64	d6, d6, d3
 800969c:	e7e0      	b.n	8009660 <_dtoa_r+0x4d0>
 800969e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80096a2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80096a6:	4621      	mov	r1, r4
 80096a8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80096ac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80096b0:	ee14 2a90 	vmov	r2, s9
 80096b4:	3230      	adds	r2, #48	; 0x30
 80096b6:	f808 2b01 	strb.w	r2, [r8], #1
 80096ba:	45a0      	cmp	r8, r4
 80096bc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80096c0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80096c4:	d118      	bne.n	80096f8 <_dtoa_r+0x568>
 80096c6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80096ca:	ee37 4b05 	vadd.f64	d4, d7, d5
 80096ce:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80096d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096d6:	dc4d      	bgt.n	8009774 <_dtoa_r+0x5e4>
 80096d8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80096dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80096e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096e4:	f57f af41 	bpl.w	800956a <_dtoa_r+0x3da>
 80096e8:	4688      	mov	r8, r1
 80096ea:	3901      	subs	r1, #1
 80096ec:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80096f0:	2b30      	cmp	r3, #48	; 0x30
 80096f2:	d0f9      	beq.n	80096e8 <_dtoa_r+0x558>
 80096f4:	46bb      	mov	fp, r7
 80096f6:	e02a      	b.n	800974e <_dtoa_r+0x5be>
 80096f8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80096fc:	e7d6      	b.n	80096ac <_dtoa_r+0x51c>
 80096fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009702:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009706:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800970a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800970e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009712:	ee15 3a10 	vmov	r3, s10
 8009716:	3330      	adds	r3, #48	; 0x30
 8009718:	f808 3b01 	strb.w	r3, [r8], #1
 800971c:	9b01      	ldr	r3, [sp, #4]
 800971e:	eba8 0303 	sub.w	r3, r8, r3
 8009722:	4599      	cmp	r9, r3
 8009724:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009728:	eea3 7b46 	vfms.f64	d7, d3, d6
 800972c:	d133      	bne.n	8009796 <_dtoa_r+0x606>
 800972e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009732:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800973a:	dc1a      	bgt.n	8009772 <_dtoa_r+0x5e2>
 800973c:	eeb4 7b46 	vcmp.f64	d7, d6
 8009740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009744:	d103      	bne.n	800974e <_dtoa_r+0x5be>
 8009746:	ee15 3a10 	vmov	r3, s10
 800974a:	07d9      	lsls	r1, r3, #31
 800974c:	d411      	bmi.n	8009772 <_dtoa_r+0x5e2>
 800974e:	4629      	mov	r1, r5
 8009750:	4630      	mov	r0, r6
 8009752:	f000 faf7 	bl	8009d44 <_Bfree>
 8009756:	2300      	movs	r3, #0
 8009758:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800975a:	f888 3000 	strb.w	r3, [r8]
 800975e:	f10b 0301 	add.w	r3, fp, #1
 8009762:	6013      	str	r3, [r2, #0]
 8009764:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009766:	2b00      	cmp	r3, #0
 8009768:	f43f ad61 	beq.w	800922e <_dtoa_r+0x9e>
 800976c:	f8c3 8000 	str.w	r8, [r3]
 8009770:	e55d      	b.n	800922e <_dtoa_r+0x9e>
 8009772:	465f      	mov	r7, fp
 8009774:	4643      	mov	r3, r8
 8009776:	4698      	mov	r8, r3
 8009778:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800977c:	2a39      	cmp	r2, #57	; 0x39
 800977e:	d106      	bne.n	800978e <_dtoa_r+0x5fe>
 8009780:	9a01      	ldr	r2, [sp, #4]
 8009782:	429a      	cmp	r2, r3
 8009784:	d1f7      	bne.n	8009776 <_dtoa_r+0x5e6>
 8009786:	9901      	ldr	r1, [sp, #4]
 8009788:	2230      	movs	r2, #48	; 0x30
 800978a:	3701      	adds	r7, #1
 800978c:	700a      	strb	r2, [r1, #0]
 800978e:	781a      	ldrb	r2, [r3, #0]
 8009790:	3201      	adds	r2, #1
 8009792:	701a      	strb	r2, [r3, #0]
 8009794:	e7ae      	b.n	80096f4 <_dtoa_r+0x564>
 8009796:	ee27 7b04 	vmul.f64	d7, d7, d4
 800979a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800979e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097a2:	d1b2      	bne.n	800970a <_dtoa_r+0x57a>
 80097a4:	e7d3      	b.n	800974e <_dtoa_r+0x5be>
 80097a6:	bf00      	nop
 80097a8:	0800c670 	.word	0x0800c670
 80097ac:	0800c648 	.word	0x0800c648
 80097b0:	9907      	ldr	r1, [sp, #28]
 80097b2:	2900      	cmp	r1, #0
 80097b4:	f000 80d0 	beq.w	8009958 <_dtoa_r+0x7c8>
 80097b8:	9906      	ldr	r1, [sp, #24]
 80097ba:	2901      	cmp	r1, #1
 80097bc:	f300 80b4 	bgt.w	8009928 <_dtoa_r+0x798>
 80097c0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80097c2:	2900      	cmp	r1, #0
 80097c4:	f000 80ac 	beq.w	8009920 <_dtoa_r+0x790>
 80097c8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80097cc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80097d0:	461c      	mov	r4, r3
 80097d2:	930a      	str	r3, [sp, #40]	; 0x28
 80097d4:	9b04      	ldr	r3, [sp, #16]
 80097d6:	4413      	add	r3, r2
 80097d8:	9304      	str	r3, [sp, #16]
 80097da:	9b05      	ldr	r3, [sp, #20]
 80097dc:	2101      	movs	r1, #1
 80097de:	4413      	add	r3, r2
 80097e0:	4630      	mov	r0, r6
 80097e2:	9305      	str	r3, [sp, #20]
 80097e4:	f000 fb66 	bl	8009eb4 <__i2b>
 80097e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097ea:	4607      	mov	r7, r0
 80097ec:	f1b8 0f00 	cmp.w	r8, #0
 80097f0:	dd0d      	ble.n	800980e <_dtoa_r+0x67e>
 80097f2:	9a05      	ldr	r2, [sp, #20]
 80097f4:	2a00      	cmp	r2, #0
 80097f6:	dd0a      	ble.n	800980e <_dtoa_r+0x67e>
 80097f8:	4542      	cmp	r2, r8
 80097fa:	9904      	ldr	r1, [sp, #16]
 80097fc:	bfa8      	it	ge
 80097fe:	4642      	movge	r2, r8
 8009800:	1a89      	subs	r1, r1, r2
 8009802:	9104      	str	r1, [sp, #16]
 8009804:	9905      	ldr	r1, [sp, #20]
 8009806:	eba8 0802 	sub.w	r8, r8, r2
 800980a:	1a8a      	subs	r2, r1, r2
 800980c:	9205      	str	r2, [sp, #20]
 800980e:	b303      	cbz	r3, 8009852 <_dtoa_r+0x6c2>
 8009810:	9a07      	ldr	r2, [sp, #28]
 8009812:	2a00      	cmp	r2, #0
 8009814:	f000 80a5 	beq.w	8009962 <_dtoa_r+0x7d2>
 8009818:	2c00      	cmp	r4, #0
 800981a:	dd13      	ble.n	8009844 <_dtoa_r+0x6b4>
 800981c:	4639      	mov	r1, r7
 800981e:	4622      	mov	r2, r4
 8009820:	4630      	mov	r0, r6
 8009822:	930d      	str	r3, [sp, #52]	; 0x34
 8009824:	f000 fc06 	bl	800a034 <__pow5mult>
 8009828:	462a      	mov	r2, r5
 800982a:	4601      	mov	r1, r0
 800982c:	4607      	mov	r7, r0
 800982e:	4630      	mov	r0, r6
 8009830:	f000 fb56 	bl	8009ee0 <__multiply>
 8009834:	4629      	mov	r1, r5
 8009836:	900a      	str	r0, [sp, #40]	; 0x28
 8009838:	4630      	mov	r0, r6
 800983a:	f000 fa83 	bl	8009d44 <_Bfree>
 800983e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009840:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009842:	4615      	mov	r5, r2
 8009844:	1b1a      	subs	r2, r3, r4
 8009846:	d004      	beq.n	8009852 <_dtoa_r+0x6c2>
 8009848:	4629      	mov	r1, r5
 800984a:	4630      	mov	r0, r6
 800984c:	f000 fbf2 	bl	800a034 <__pow5mult>
 8009850:	4605      	mov	r5, r0
 8009852:	2101      	movs	r1, #1
 8009854:	4630      	mov	r0, r6
 8009856:	f000 fb2d 	bl	8009eb4 <__i2b>
 800985a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800985c:	2b00      	cmp	r3, #0
 800985e:	4604      	mov	r4, r0
 8009860:	f340 8081 	ble.w	8009966 <_dtoa_r+0x7d6>
 8009864:	461a      	mov	r2, r3
 8009866:	4601      	mov	r1, r0
 8009868:	4630      	mov	r0, r6
 800986a:	f000 fbe3 	bl	800a034 <__pow5mult>
 800986e:	9b06      	ldr	r3, [sp, #24]
 8009870:	2b01      	cmp	r3, #1
 8009872:	4604      	mov	r4, r0
 8009874:	dd7a      	ble.n	800996c <_dtoa_r+0x7dc>
 8009876:	2300      	movs	r3, #0
 8009878:	930a      	str	r3, [sp, #40]	; 0x28
 800987a:	6922      	ldr	r2, [r4, #16]
 800987c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009880:	6910      	ldr	r0, [r2, #16]
 8009882:	f000 fac7 	bl	8009e14 <__hi0bits>
 8009886:	f1c0 0020 	rsb	r0, r0, #32
 800988a:	9b05      	ldr	r3, [sp, #20]
 800988c:	4418      	add	r0, r3
 800988e:	f010 001f 	ands.w	r0, r0, #31
 8009892:	f000 808c 	beq.w	80099ae <_dtoa_r+0x81e>
 8009896:	f1c0 0220 	rsb	r2, r0, #32
 800989a:	2a04      	cmp	r2, #4
 800989c:	f340 8085 	ble.w	80099aa <_dtoa_r+0x81a>
 80098a0:	f1c0 001c 	rsb	r0, r0, #28
 80098a4:	9b04      	ldr	r3, [sp, #16]
 80098a6:	4403      	add	r3, r0
 80098a8:	9304      	str	r3, [sp, #16]
 80098aa:	9b05      	ldr	r3, [sp, #20]
 80098ac:	4403      	add	r3, r0
 80098ae:	4480      	add	r8, r0
 80098b0:	9305      	str	r3, [sp, #20]
 80098b2:	9b04      	ldr	r3, [sp, #16]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	dd05      	ble.n	80098c4 <_dtoa_r+0x734>
 80098b8:	4629      	mov	r1, r5
 80098ba:	461a      	mov	r2, r3
 80098bc:	4630      	mov	r0, r6
 80098be:	f000 fc13 	bl	800a0e8 <__lshift>
 80098c2:	4605      	mov	r5, r0
 80098c4:	9b05      	ldr	r3, [sp, #20]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	dd05      	ble.n	80098d6 <_dtoa_r+0x746>
 80098ca:	4621      	mov	r1, r4
 80098cc:	461a      	mov	r2, r3
 80098ce:	4630      	mov	r0, r6
 80098d0:	f000 fc0a 	bl	800a0e8 <__lshift>
 80098d4:	4604      	mov	r4, r0
 80098d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d06a      	beq.n	80099b2 <_dtoa_r+0x822>
 80098dc:	4621      	mov	r1, r4
 80098de:	4628      	mov	r0, r5
 80098e0:	f000 fc72 	bl	800a1c8 <__mcmp>
 80098e4:	2800      	cmp	r0, #0
 80098e6:	da64      	bge.n	80099b2 <_dtoa_r+0x822>
 80098e8:	2300      	movs	r3, #0
 80098ea:	4629      	mov	r1, r5
 80098ec:	220a      	movs	r2, #10
 80098ee:	4630      	mov	r0, r6
 80098f0:	f000 fa4a 	bl	8009d88 <__multadd>
 80098f4:	9b07      	ldr	r3, [sp, #28]
 80098f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80098fa:	4605      	mov	r5, r0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	f000 8191 	beq.w	8009c24 <_dtoa_r+0xa94>
 8009902:	4639      	mov	r1, r7
 8009904:	2300      	movs	r3, #0
 8009906:	220a      	movs	r2, #10
 8009908:	4630      	mov	r0, r6
 800990a:	f000 fa3d 	bl	8009d88 <__multadd>
 800990e:	f1ba 0f00 	cmp.w	sl, #0
 8009912:	4607      	mov	r7, r0
 8009914:	f300 808d 	bgt.w	8009a32 <_dtoa_r+0x8a2>
 8009918:	9b06      	ldr	r3, [sp, #24]
 800991a:	2b02      	cmp	r3, #2
 800991c:	dc50      	bgt.n	80099c0 <_dtoa_r+0x830>
 800991e:	e088      	b.n	8009a32 <_dtoa_r+0x8a2>
 8009920:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009922:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009926:	e751      	b.n	80097cc <_dtoa_r+0x63c>
 8009928:	f109 34ff 	add.w	r4, r9, #4294967295
 800992c:	42a3      	cmp	r3, r4
 800992e:	bfbf      	itttt	lt
 8009930:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8009932:	1ae3      	sublt	r3, r4, r3
 8009934:	18d2      	addlt	r2, r2, r3
 8009936:	9209      	strlt	r2, [sp, #36]	; 0x24
 8009938:	bfb6      	itet	lt
 800993a:	4623      	movlt	r3, r4
 800993c:	1b1c      	subge	r4, r3, r4
 800993e:	2400      	movlt	r4, #0
 8009940:	f1b9 0f00 	cmp.w	r9, #0
 8009944:	bfb5      	itete	lt
 8009946:	9a04      	ldrlt	r2, [sp, #16]
 8009948:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800994c:	eba2 0809 	sublt.w	r8, r2, r9
 8009950:	464a      	movge	r2, r9
 8009952:	bfb8      	it	lt
 8009954:	2200      	movlt	r2, #0
 8009956:	e73c      	b.n	80097d2 <_dtoa_r+0x642>
 8009958:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800995c:	9f07      	ldr	r7, [sp, #28]
 800995e:	461c      	mov	r4, r3
 8009960:	e744      	b.n	80097ec <_dtoa_r+0x65c>
 8009962:	461a      	mov	r2, r3
 8009964:	e770      	b.n	8009848 <_dtoa_r+0x6b8>
 8009966:	9b06      	ldr	r3, [sp, #24]
 8009968:	2b01      	cmp	r3, #1
 800996a:	dc18      	bgt.n	800999e <_dtoa_r+0x80e>
 800996c:	9b02      	ldr	r3, [sp, #8]
 800996e:	b9b3      	cbnz	r3, 800999e <_dtoa_r+0x80e>
 8009970:	9b03      	ldr	r3, [sp, #12]
 8009972:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009976:	b9a2      	cbnz	r2, 80099a2 <_dtoa_r+0x812>
 8009978:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800997c:	0d12      	lsrs	r2, r2, #20
 800997e:	0512      	lsls	r2, r2, #20
 8009980:	b18a      	cbz	r2, 80099a6 <_dtoa_r+0x816>
 8009982:	9b04      	ldr	r3, [sp, #16]
 8009984:	3301      	adds	r3, #1
 8009986:	9304      	str	r3, [sp, #16]
 8009988:	9b05      	ldr	r3, [sp, #20]
 800998a:	3301      	adds	r3, #1
 800998c:	9305      	str	r3, [sp, #20]
 800998e:	2301      	movs	r3, #1
 8009990:	930a      	str	r3, [sp, #40]	; 0x28
 8009992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009994:	2b00      	cmp	r3, #0
 8009996:	f47f af70 	bne.w	800987a <_dtoa_r+0x6ea>
 800999a:	2001      	movs	r0, #1
 800999c:	e775      	b.n	800988a <_dtoa_r+0x6fa>
 800999e:	2300      	movs	r3, #0
 80099a0:	e7f6      	b.n	8009990 <_dtoa_r+0x800>
 80099a2:	9b02      	ldr	r3, [sp, #8]
 80099a4:	e7f4      	b.n	8009990 <_dtoa_r+0x800>
 80099a6:	920a      	str	r2, [sp, #40]	; 0x28
 80099a8:	e7f3      	b.n	8009992 <_dtoa_r+0x802>
 80099aa:	d082      	beq.n	80098b2 <_dtoa_r+0x722>
 80099ac:	4610      	mov	r0, r2
 80099ae:	301c      	adds	r0, #28
 80099b0:	e778      	b.n	80098a4 <_dtoa_r+0x714>
 80099b2:	f1b9 0f00 	cmp.w	r9, #0
 80099b6:	dc37      	bgt.n	8009a28 <_dtoa_r+0x898>
 80099b8:	9b06      	ldr	r3, [sp, #24]
 80099ba:	2b02      	cmp	r3, #2
 80099bc:	dd34      	ble.n	8009a28 <_dtoa_r+0x898>
 80099be:	46ca      	mov	sl, r9
 80099c0:	f1ba 0f00 	cmp.w	sl, #0
 80099c4:	d10d      	bne.n	80099e2 <_dtoa_r+0x852>
 80099c6:	4621      	mov	r1, r4
 80099c8:	4653      	mov	r3, sl
 80099ca:	2205      	movs	r2, #5
 80099cc:	4630      	mov	r0, r6
 80099ce:	f000 f9db 	bl	8009d88 <__multadd>
 80099d2:	4601      	mov	r1, r0
 80099d4:	4604      	mov	r4, r0
 80099d6:	4628      	mov	r0, r5
 80099d8:	f000 fbf6 	bl	800a1c8 <__mcmp>
 80099dc:	2800      	cmp	r0, #0
 80099de:	f73f adeb 	bgt.w	80095b8 <_dtoa_r+0x428>
 80099e2:	9b08      	ldr	r3, [sp, #32]
 80099e4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80099e8:	ea6f 0b03 	mvn.w	fp, r3
 80099ec:	f04f 0900 	mov.w	r9, #0
 80099f0:	4621      	mov	r1, r4
 80099f2:	4630      	mov	r0, r6
 80099f4:	f000 f9a6 	bl	8009d44 <_Bfree>
 80099f8:	2f00      	cmp	r7, #0
 80099fa:	f43f aea8 	beq.w	800974e <_dtoa_r+0x5be>
 80099fe:	f1b9 0f00 	cmp.w	r9, #0
 8009a02:	d005      	beq.n	8009a10 <_dtoa_r+0x880>
 8009a04:	45b9      	cmp	r9, r7
 8009a06:	d003      	beq.n	8009a10 <_dtoa_r+0x880>
 8009a08:	4649      	mov	r1, r9
 8009a0a:	4630      	mov	r0, r6
 8009a0c:	f000 f99a 	bl	8009d44 <_Bfree>
 8009a10:	4639      	mov	r1, r7
 8009a12:	4630      	mov	r0, r6
 8009a14:	f000 f996 	bl	8009d44 <_Bfree>
 8009a18:	e699      	b.n	800974e <_dtoa_r+0x5be>
 8009a1a:	2400      	movs	r4, #0
 8009a1c:	4627      	mov	r7, r4
 8009a1e:	e7e0      	b.n	80099e2 <_dtoa_r+0x852>
 8009a20:	46bb      	mov	fp, r7
 8009a22:	4604      	mov	r4, r0
 8009a24:	4607      	mov	r7, r0
 8009a26:	e5c7      	b.n	80095b8 <_dtoa_r+0x428>
 8009a28:	9b07      	ldr	r3, [sp, #28]
 8009a2a:	46ca      	mov	sl, r9
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	f000 8100 	beq.w	8009c32 <_dtoa_r+0xaa2>
 8009a32:	f1b8 0f00 	cmp.w	r8, #0
 8009a36:	dd05      	ble.n	8009a44 <_dtoa_r+0x8b4>
 8009a38:	4639      	mov	r1, r7
 8009a3a:	4642      	mov	r2, r8
 8009a3c:	4630      	mov	r0, r6
 8009a3e:	f000 fb53 	bl	800a0e8 <__lshift>
 8009a42:	4607      	mov	r7, r0
 8009a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d05d      	beq.n	8009b06 <_dtoa_r+0x976>
 8009a4a:	6879      	ldr	r1, [r7, #4]
 8009a4c:	4630      	mov	r0, r6
 8009a4e:	f000 f939 	bl	8009cc4 <_Balloc>
 8009a52:	4680      	mov	r8, r0
 8009a54:	b928      	cbnz	r0, 8009a62 <_dtoa_r+0x8d2>
 8009a56:	4b82      	ldr	r3, [pc, #520]	; (8009c60 <_dtoa_r+0xad0>)
 8009a58:	4602      	mov	r2, r0
 8009a5a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009a5e:	f7ff bbaf 	b.w	80091c0 <_dtoa_r+0x30>
 8009a62:	693a      	ldr	r2, [r7, #16]
 8009a64:	3202      	adds	r2, #2
 8009a66:	0092      	lsls	r2, r2, #2
 8009a68:	f107 010c 	add.w	r1, r7, #12
 8009a6c:	300c      	adds	r0, #12
 8009a6e:	f000 f91b 	bl	8009ca8 <memcpy>
 8009a72:	2201      	movs	r2, #1
 8009a74:	4641      	mov	r1, r8
 8009a76:	4630      	mov	r0, r6
 8009a78:	f000 fb36 	bl	800a0e8 <__lshift>
 8009a7c:	9b01      	ldr	r3, [sp, #4]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	9304      	str	r3, [sp, #16]
 8009a82:	9b01      	ldr	r3, [sp, #4]
 8009a84:	4453      	add	r3, sl
 8009a86:	9308      	str	r3, [sp, #32]
 8009a88:	9b02      	ldr	r3, [sp, #8]
 8009a8a:	f003 0301 	and.w	r3, r3, #1
 8009a8e:	46b9      	mov	r9, r7
 8009a90:	9307      	str	r3, [sp, #28]
 8009a92:	4607      	mov	r7, r0
 8009a94:	9b04      	ldr	r3, [sp, #16]
 8009a96:	4621      	mov	r1, r4
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	4628      	mov	r0, r5
 8009a9c:	9302      	str	r3, [sp, #8]
 8009a9e:	f7ff fae9 	bl	8009074 <quorem>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	3330      	adds	r3, #48	; 0x30
 8009aa6:	9005      	str	r0, [sp, #20]
 8009aa8:	4649      	mov	r1, r9
 8009aaa:	4628      	mov	r0, r5
 8009aac:	9309      	str	r3, [sp, #36]	; 0x24
 8009aae:	f000 fb8b 	bl	800a1c8 <__mcmp>
 8009ab2:	463a      	mov	r2, r7
 8009ab4:	4682      	mov	sl, r0
 8009ab6:	4621      	mov	r1, r4
 8009ab8:	4630      	mov	r0, r6
 8009aba:	f000 fba1 	bl	800a200 <__mdiff>
 8009abe:	68c2      	ldr	r2, [r0, #12]
 8009ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ac2:	4680      	mov	r8, r0
 8009ac4:	bb0a      	cbnz	r2, 8009b0a <_dtoa_r+0x97a>
 8009ac6:	4601      	mov	r1, r0
 8009ac8:	4628      	mov	r0, r5
 8009aca:	f000 fb7d 	bl	800a1c8 <__mcmp>
 8009ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	4641      	mov	r1, r8
 8009ad4:	4630      	mov	r0, r6
 8009ad6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8009ada:	f000 f933 	bl	8009d44 <_Bfree>
 8009ade:	9b06      	ldr	r3, [sp, #24]
 8009ae0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ae2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009ae6:	ea43 0102 	orr.w	r1, r3, r2
 8009aea:	9b07      	ldr	r3, [sp, #28]
 8009aec:	430b      	orrs	r3, r1
 8009aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009af0:	d10d      	bne.n	8009b0e <_dtoa_r+0x97e>
 8009af2:	2b39      	cmp	r3, #57	; 0x39
 8009af4:	d029      	beq.n	8009b4a <_dtoa_r+0x9ba>
 8009af6:	f1ba 0f00 	cmp.w	sl, #0
 8009afa:	dd01      	ble.n	8009b00 <_dtoa_r+0x970>
 8009afc:	9b05      	ldr	r3, [sp, #20]
 8009afe:	3331      	adds	r3, #49	; 0x31
 8009b00:	9a02      	ldr	r2, [sp, #8]
 8009b02:	7013      	strb	r3, [r2, #0]
 8009b04:	e774      	b.n	80099f0 <_dtoa_r+0x860>
 8009b06:	4638      	mov	r0, r7
 8009b08:	e7b8      	b.n	8009a7c <_dtoa_r+0x8ec>
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	e7e1      	b.n	8009ad2 <_dtoa_r+0x942>
 8009b0e:	f1ba 0f00 	cmp.w	sl, #0
 8009b12:	db06      	blt.n	8009b22 <_dtoa_r+0x992>
 8009b14:	9906      	ldr	r1, [sp, #24]
 8009b16:	ea41 0a0a 	orr.w	sl, r1, sl
 8009b1a:	9907      	ldr	r1, [sp, #28]
 8009b1c:	ea5a 0101 	orrs.w	r1, sl, r1
 8009b20:	d120      	bne.n	8009b64 <_dtoa_r+0x9d4>
 8009b22:	2a00      	cmp	r2, #0
 8009b24:	ddec      	ble.n	8009b00 <_dtoa_r+0x970>
 8009b26:	4629      	mov	r1, r5
 8009b28:	2201      	movs	r2, #1
 8009b2a:	4630      	mov	r0, r6
 8009b2c:	9304      	str	r3, [sp, #16]
 8009b2e:	f000 fadb 	bl	800a0e8 <__lshift>
 8009b32:	4621      	mov	r1, r4
 8009b34:	4605      	mov	r5, r0
 8009b36:	f000 fb47 	bl	800a1c8 <__mcmp>
 8009b3a:	2800      	cmp	r0, #0
 8009b3c:	9b04      	ldr	r3, [sp, #16]
 8009b3e:	dc02      	bgt.n	8009b46 <_dtoa_r+0x9b6>
 8009b40:	d1de      	bne.n	8009b00 <_dtoa_r+0x970>
 8009b42:	07da      	lsls	r2, r3, #31
 8009b44:	d5dc      	bpl.n	8009b00 <_dtoa_r+0x970>
 8009b46:	2b39      	cmp	r3, #57	; 0x39
 8009b48:	d1d8      	bne.n	8009afc <_dtoa_r+0x96c>
 8009b4a:	9a02      	ldr	r2, [sp, #8]
 8009b4c:	2339      	movs	r3, #57	; 0x39
 8009b4e:	7013      	strb	r3, [r2, #0]
 8009b50:	4643      	mov	r3, r8
 8009b52:	4698      	mov	r8, r3
 8009b54:	3b01      	subs	r3, #1
 8009b56:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009b5a:	2a39      	cmp	r2, #57	; 0x39
 8009b5c:	d051      	beq.n	8009c02 <_dtoa_r+0xa72>
 8009b5e:	3201      	adds	r2, #1
 8009b60:	701a      	strb	r2, [r3, #0]
 8009b62:	e745      	b.n	80099f0 <_dtoa_r+0x860>
 8009b64:	2a00      	cmp	r2, #0
 8009b66:	dd03      	ble.n	8009b70 <_dtoa_r+0x9e0>
 8009b68:	2b39      	cmp	r3, #57	; 0x39
 8009b6a:	d0ee      	beq.n	8009b4a <_dtoa_r+0x9ba>
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	e7c7      	b.n	8009b00 <_dtoa_r+0x970>
 8009b70:	9a04      	ldr	r2, [sp, #16]
 8009b72:	9908      	ldr	r1, [sp, #32]
 8009b74:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009b78:	428a      	cmp	r2, r1
 8009b7a:	d02b      	beq.n	8009bd4 <_dtoa_r+0xa44>
 8009b7c:	4629      	mov	r1, r5
 8009b7e:	2300      	movs	r3, #0
 8009b80:	220a      	movs	r2, #10
 8009b82:	4630      	mov	r0, r6
 8009b84:	f000 f900 	bl	8009d88 <__multadd>
 8009b88:	45b9      	cmp	r9, r7
 8009b8a:	4605      	mov	r5, r0
 8009b8c:	f04f 0300 	mov.w	r3, #0
 8009b90:	f04f 020a 	mov.w	r2, #10
 8009b94:	4649      	mov	r1, r9
 8009b96:	4630      	mov	r0, r6
 8009b98:	d107      	bne.n	8009baa <_dtoa_r+0xa1a>
 8009b9a:	f000 f8f5 	bl	8009d88 <__multadd>
 8009b9e:	4681      	mov	r9, r0
 8009ba0:	4607      	mov	r7, r0
 8009ba2:	9b04      	ldr	r3, [sp, #16]
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	9304      	str	r3, [sp, #16]
 8009ba8:	e774      	b.n	8009a94 <_dtoa_r+0x904>
 8009baa:	f000 f8ed 	bl	8009d88 <__multadd>
 8009bae:	4639      	mov	r1, r7
 8009bb0:	4681      	mov	r9, r0
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	220a      	movs	r2, #10
 8009bb6:	4630      	mov	r0, r6
 8009bb8:	f000 f8e6 	bl	8009d88 <__multadd>
 8009bbc:	4607      	mov	r7, r0
 8009bbe:	e7f0      	b.n	8009ba2 <_dtoa_r+0xa12>
 8009bc0:	f1ba 0f00 	cmp.w	sl, #0
 8009bc4:	9a01      	ldr	r2, [sp, #4]
 8009bc6:	bfcc      	ite	gt
 8009bc8:	46d0      	movgt	r8, sl
 8009bca:	f04f 0801 	movle.w	r8, #1
 8009bce:	4490      	add	r8, r2
 8009bd0:	f04f 0900 	mov.w	r9, #0
 8009bd4:	4629      	mov	r1, r5
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	4630      	mov	r0, r6
 8009bda:	9302      	str	r3, [sp, #8]
 8009bdc:	f000 fa84 	bl	800a0e8 <__lshift>
 8009be0:	4621      	mov	r1, r4
 8009be2:	4605      	mov	r5, r0
 8009be4:	f000 faf0 	bl	800a1c8 <__mcmp>
 8009be8:	2800      	cmp	r0, #0
 8009bea:	dcb1      	bgt.n	8009b50 <_dtoa_r+0x9c0>
 8009bec:	d102      	bne.n	8009bf4 <_dtoa_r+0xa64>
 8009bee:	9b02      	ldr	r3, [sp, #8]
 8009bf0:	07db      	lsls	r3, r3, #31
 8009bf2:	d4ad      	bmi.n	8009b50 <_dtoa_r+0x9c0>
 8009bf4:	4643      	mov	r3, r8
 8009bf6:	4698      	mov	r8, r3
 8009bf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bfc:	2a30      	cmp	r2, #48	; 0x30
 8009bfe:	d0fa      	beq.n	8009bf6 <_dtoa_r+0xa66>
 8009c00:	e6f6      	b.n	80099f0 <_dtoa_r+0x860>
 8009c02:	9a01      	ldr	r2, [sp, #4]
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d1a4      	bne.n	8009b52 <_dtoa_r+0x9c2>
 8009c08:	f10b 0b01 	add.w	fp, fp, #1
 8009c0c:	2331      	movs	r3, #49	; 0x31
 8009c0e:	e778      	b.n	8009b02 <_dtoa_r+0x972>
 8009c10:	4b14      	ldr	r3, [pc, #80]	; (8009c64 <_dtoa_r+0xad4>)
 8009c12:	f7ff bb27 	b.w	8009264 <_dtoa_r+0xd4>
 8009c16:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	f47f ab03 	bne.w	8009224 <_dtoa_r+0x94>
 8009c1e:	4b12      	ldr	r3, [pc, #72]	; (8009c68 <_dtoa_r+0xad8>)
 8009c20:	f7ff bb20 	b.w	8009264 <_dtoa_r+0xd4>
 8009c24:	f1ba 0f00 	cmp.w	sl, #0
 8009c28:	dc03      	bgt.n	8009c32 <_dtoa_r+0xaa2>
 8009c2a:	9b06      	ldr	r3, [sp, #24]
 8009c2c:	2b02      	cmp	r3, #2
 8009c2e:	f73f aec7 	bgt.w	80099c0 <_dtoa_r+0x830>
 8009c32:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009c36:	4621      	mov	r1, r4
 8009c38:	4628      	mov	r0, r5
 8009c3a:	f7ff fa1b 	bl	8009074 <quorem>
 8009c3e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009c42:	f808 3b01 	strb.w	r3, [r8], #1
 8009c46:	9a01      	ldr	r2, [sp, #4]
 8009c48:	eba8 0202 	sub.w	r2, r8, r2
 8009c4c:	4592      	cmp	sl, r2
 8009c4e:	ddb7      	ble.n	8009bc0 <_dtoa_r+0xa30>
 8009c50:	4629      	mov	r1, r5
 8009c52:	2300      	movs	r3, #0
 8009c54:	220a      	movs	r2, #10
 8009c56:	4630      	mov	r0, r6
 8009c58:	f000 f896 	bl	8009d88 <__multadd>
 8009c5c:	4605      	mov	r5, r0
 8009c5e:	e7ea      	b.n	8009c36 <_dtoa_r+0xaa6>
 8009c60:	0800c5d6 	.word	0x0800c5d6
 8009c64:	0800c49c 	.word	0x0800c49c
 8009c68:	0800c56e 	.word	0x0800c56e

08009c6c <fiprintf>:
 8009c6c:	b40e      	push	{r1, r2, r3}
 8009c6e:	b503      	push	{r0, r1, lr}
 8009c70:	4601      	mov	r1, r0
 8009c72:	ab03      	add	r3, sp, #12
 8009c74:	4805      	ldr	r0, [pc, #20]	; (8009c8c <fiprintf+0x20>)
 8009c76:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c7a:	6800      	ldr	r0, [r0, #0]
 8009c7c:	9301      	str	r3, [sp, #4]
 8009c7e:	f000 fe21 	bl	800a8c4 <_vfiprintf_r>
 8009c82:	b002      	add	sp, #8
 8009c84:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c88:	b003      	add	sp, #12
 8009c8a:	4770      	bx	lr
 8009c8c:	20000060 	.word	0x20000060

08009c90 <_localeconv_r>:
 8009c90:	4800      	ldr	r0, [pc, #0]	; (8009c94 <_localeconv_r+0x4>)
 8009c92:	4770      	bx	lr
 8009c94:	200001b4 	.word	0x200001b4

08009c98 <malloc>:
 8009c98:	4b02      	ldr	r3, [pc, #8]	; (8009ca4 <malloc+0xc>)
 8009c9a:	4601      	mov	r1, r0
 8009c9c:	6818      	ldr	r0, [r3, #0]
 8009c9e:	f000 bc17 	b.w	800a4d0 <_malloc_r>
 8009ca2:	bf00      	nop
 8009ca4:	20000060 	.word	0x20000060

08009ca8 <memcpy>:
 8009ca8:	440a      	add	r2, r1
 8009caa:	4291      	cmp	r1, r2
 8009cac:	f100 33ff 	add.w	r3, r0, #4294967295
 8009cb0:	d100      	bne.n	8009cb4 <memcpy+0xc>
 8009cb2:	4770      	bx	lr
 8009cb4:	b510      	push	{r4, lr}
 8009cb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cbe:	4291      	cmp	r1, r2
 8009cc0:	d1f9      	bne.n	8009cb6 <memcpy+0xe>
 8009cc2:	bd10      	pop	{r4, pc}

08009cc4 <_Balloc>:
 8009cc4:	b570      	push	{r4, r5, r6, lr}
 8009cc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009cc8:	4604      	mov	r4, r0
 8009cca:	460d      	mov	r5, r1
 8009ccc:	b976      	cbnz	r6, 8009cec <_Balloc+0x28>
 8009cce:	2010      	movs	r0, #16
 8009cd0:	f7ff ffe2 	bl	8009c98 <malloc>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	6260      	str	r0, [r4, #36]	; 0x24
 8009cd8:	b920      	cbnz	r0, 8009ce4 <_Balloc+0x20>
 8009cda:	4b18      	ldr	r3, [pc, #96]	; (8009d3c <_Balloc+0x78>)
 8009cdc:	4818      	ldr	r0, [pc, #96]	; (8009d40 <_Balloc+0x7c>)
 8009cde:	2166      	movs	r1, #102	; 0x66
 8009ce0:	f7ff f9aa 	bl	8009038 <__assert_func>
 8009ce4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ce8:	6006      	str	r6, [r0, #0]
 8009cea:	60c6      	str	r6, [r0, #12]
 8009cec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009cee:	68f3      	ldr	r3, [r6, #12]
 8009cf0:	b183      	cbz	r3, 8009d14 <_Balloc+0x50>
 8009cf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009cfa:	b9b8      	cbnz	r0, 8009d2c <_Balloc+0x68>
 8009cfc:	2101      	movs	r1, #1
 8009cfe:	fa01 f605 	lsl.w	r6, r1, r5
 8009d02:	1d72      	adds	r2, r6, #5
 8009d04:	0092      	lsls	r2, r2, #2
 8009d06:	4620      	mov	r0, r4
 8009d08:	f000 fb60 	bl	800a3cc <_calloc_r>
 8009d0c:	b160      	cbz	r0, 8009d28 <_Balloc+0x64>
 8009d0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d12:	e00e      	b.n	8009d32 <_Balloc+0x6e>
 8009d14:	2221      	movs	r2, #33	; 0x21
 8009d16:	2104      	movs	r1, #4
 8009d18:	4620      	mov	r0, r4
 8009d1a:	f000 fb57 	bl	800a3cc <_calloc_r>
 8009d1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d20:	60f0      	str	r0, [r6, #12]
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d1e4      	bne.n	8009cf2 <_Balloc+0x2e>
 8009d28:	2000      	movs	r0, #0
 8009d2a:	bd70      	pop	{r4, r5, r6, pc}
 8009d2c:	6802      	ldr	r2, [r0, #0]
 8009d2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d32:	2300      	movs	r3, #0
 8009d34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d38:	e7f7      	b.n	8009d2a <_Balloc+0x66>
 8009d3a:	bf00      	nop
 8009d3c:	0800c4c0 	.word	0x0800c4c0
 8009d40:	0800c5e7 	.word	0x0800c5e7

08009d44 <_Bfree>:
 8009d44:	b570      	push	{r4, r5, r6, lr}
 8009d46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d48:	4605      	mov	r5, r0
 8009d4a:	460c      	mov	r4, r1
 8009d4c:	b976      	cbnz	r6, 8009d6c <_Bfree+0x28>
 8009d4e:	2010      	movs	r0, #16
 8009d50:	f7ff ffa2 	bl	8009c98 <malloc>
 8009d54:	4602      	mov	r2, r0
 8009d56:	6268      	str	r0, [r5, #36]	; 0x24
 8009d58:	b920      	cbnz	r0, 8009d64 <_Bfree+0x20>
 8009d5a:	4b09      	ldr	r3, [pc, #36]	; (8009d80 <_Bfree+0x3c>)
 8009d5c:	4809      	ldr	r0, [pc, #36]	; (8009d84 <_Bfree+0x40>)
 8009d5e:	218a      	movs	r1, #138	; 0x8a
 8009d60:	f7ff f96a 	bl	8009038 <__assert_func>
 8009d64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d68:	6006      	str	r6, [r0, #0]
 8009d6a:	60c6      	str	r6, [r0, #12]
 8009d6c:	b13c      	cbz	r4, 8009d7e <_Bfree+0x3a>
 8009d6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009d70:	6862      	ldr	r2, [r4, #4]
 8009d72:	68db      	ldr	r3, [r3, #12]
 8009d74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d78:	6021      	str	r1, [r4, #0]
 8009d7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d7e:	bd70      	pop	{r4, r5, r6, pc}
 8009d80:	0800c4c0 	.word	0x0800c4c0
 8009d84:	0800c5e7 	.word	0x0800c5e7

08009d88 <__multadd>:
 8009d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d8c:	690d      	ldr	r5, [r1, #16]
 8009d8e:	4607      	mov	r7, r0
 8009d90:	460c      	mov	r4, r1
 8009d92:	461e      	mov	r6, r3
 8009d94:	f101 0c14 	add.w	ip, r1, #20
 8009d98:	2000      	movs	r0, #0
 8009d9a:	f8dc 3000 	ldr.w	r3, [ip]
 8009d9e:	b299      	uxth	r1, r3
 8009da0:	fb02 6101 	mla	r1, r2, r1, r6
 8009da4:	0c1e      	lsrs	r6, r3, #16
 8009da6:	0c0b      	lsrs	r3, r1, #16
 8009da8:	fb02 3306 	mla	r3, r2, r6, r3
 8009dac:	b289      	uxth	r1, r1
 8009dae:	3001      	adds	r0, #1
 8009db0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009db4:	4285      	cmp	r5, r0
 8009db6:	f84c 1b04 	str.w	r1, [ip], #4
 8009dba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009dbe:	dcec      	bgt.n	8009d9a <__multadd+0x12>
 8009dc0:	b30e      	cbz	r6, 8009e06 <__multadd+0x7e>
 8009dc2:	68a3      	ldr	r3, [r4, #8]
 8009dc4:	42ab      	cmp	r3, r5
 8009dc6:	dc19      	bgt.n	8009dfc <__multadd+0x74>
 8009dc8:	6861      	ldr	r1, [r4, #4]
 8009dca:	4638      	mov	r0, r7
 8009dcc:	3101      	adds	r1, #1
 8009dce:	f7ff ff79 	bl	8009cc4 <_Balloc>
 8009dd2:	4680      	mov	r8, r0
 8009dd4:	b928      	cbnz	r0, 8009de2 <__multadd+0x5a>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	4b0c      	ldr	r3, [pc, #48]	; (8009e0c <__multadd+0x84>)
 8009dda:	480d      	ldr	r0, [pc, #52]	; (8009e10 <__multadd+0x88>)
 8009ddc:	21b5      	movs	r1, #181	; 0xb5
 8009dde:	f7ff f92b 	bl	8009038 <__assert_func>
 8009de2:	6922      	ldr	r2, [r4, #16]
 8009de4:	3202      	adds	r2, #2
 8009de6:	f104 010c 	add.w	r1, r4, #12
 8009dea:	0092      	lsls	r2, r2, #2
 8009dec:	300c      	adds	r0, #12
 8009dee:	f7ff ff5b 	bl	8009ca8 <memcpy>
 8009df2:	4621      	mov	r1, r4
 8009df4:	4638      	mov	r0, r7
 8009df6:	f7ff ffa5 	bl	8009d44 <_Bfree>
 8009dfa:	4644      	mov	r4, r8
 8009dfc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009e00:	3501      	adds	r5, #1
 8009e02:	615e      	str	r6, [r3, #20]
 8009e04:	6125      	str	r5, [r4, #16]
 8009e06:	4620      	mov	r0, r4
 8009e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e0c:	0800c5d6 	.word	0x0800c5d6
 8009e10:	0800c5e7 	.word	0x0800c5e7

08009e14 <__hi0bits>:
 8009e14:	0c03      	lsrs	r3, r0, #16
 8009e16:	041b      	lsls	r3, r3, #16
 8009e18:	b9d3      	cbnz	r3, 8009e50 <__hi0bits+0x3c>
 8009e1a:	0400      	lsls	r0, r0, #16
 8009e1c:	2310      	movs	r3, #16
 8009e1e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009e22:	bf04      	itt	eq
 8009e24:	0200      	lsleq	r0, r0, #8
 8009e26:	3308      	addeq	r3, #8
 8009e28:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009e2c:	bf04      	itt	eq
 8009e2e:	0100      	lsleq	r0, r0, #4
 8009e30:	3304      	addeq	r3, #4
 8009e32:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009e36:	bf04      	itt	eq
 8009e38:	0080      	lsleq	r0, r0, #2
 8009e3a:	3302      	addeq	r3, #2
 8009e3c:	2800      	cmp	r0, #0
 8009e3e:	db05      	blt.n	8009e4c <__hi0bits+0x38>
 8009e40:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009e44:	f103 0301 	add.w	r3, r3, #1
 8009e48:	bf08      	it	eq
 8009e4a:	2320      	moveq	r3, #32
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	4770      	bx	lr
 8009e50:	2300      	movs	r3, #0
 8009e52:	e7e4      	b.n	8009e1e <__hi0bits+0xa>

08009e54 <__lo0bits>:
 8009e54:	6803      	ldr	r3, [r0, #0]
 8009e56:	f013 0207 	ands.w	r2, r3, #7
 8009e5a:	4601      	mov	r1, r0
 8009e5c:	d00b      	beq.n	8009e76 <__lo0bits+0x22>
 8009e5e:	07da      	lsls	r2, r3, #31
 8009e60:	d423      	bmi.n	8009eaa <__lo0bits+0x56>
 8009e62:	0798      	lsls	r0, r3, #30
 8009e64:	bf49      	itett	mi
 8009e66:	085b      	lsrmi	r3, r3, #1
 8009e68:	089b      	lsrpl	r3, r3, #2
 8009e6a:	2001      	movmi	r0, #1
 8009e6c:	600b      	strmi	r3, [r1, #0]
 8009e6e:	bf5c      	itt	pl
 8009e70:	600b      	strpl	r3, [r1, #0]
 8009e72:	2002      	movpl	r0, #2
 8009e74:	4770      	bx	lr
 8009e76:	b298      	uxth	r0, r3
 8009e78:	b9a8      	cbnz	r0, 8009ea6 <__lo0bits+0x52>
 8009e7a:	0c1b      	lsrs	r3, r3, #16
 8009e7c:	2010      	movs	r0, #16
 8009e7e:	b2da      	uxtb	r2, r3
 8009e80:	b90a      	cbnz	r2, 8009e86 <__lo0bits+0x32>
 8009e82:	3008      	adds	r0, #8
 8009e84:	0a1b      	lsrs	r3, r3, #8
 8009e86:	071a      	lsls	r2, r3, #28
 8009e88:	bf04      	itt	eq
 8009e8a:	091b      	lsreq	r3, r3, #4
 8009e8c:	3004      	addeq	r0, #4
 8009e8e:	079a      	lsls	r2, r3, #30
 8009e90:	bf04      	itt	eq
 8009e92:	089b      	lsreq	r3, r3, #2
 8009e94:	3002      	addeq	r0, #2
 8009e96:	07da      	lsls	r2, r3, #31
 8009e98:	d403      	bmi.n	8009ea2 <__lo0bits+0x4e>
 8009e9a:	085b      	lsrs	r3, r3, #1
 8009e9c:	f100 0001 	add.w	r0, r0, #1
 8009ea0:	d005      	beq.n	8009eae <__lo0bits+0x5a>
 8009ea2:	600b      	str	r3, [r1, #0]
 8009ea4:	4770      	bx	lr
 8009ea6:	4610      	mov	r0, r2
 8009ea8:	e7e9      	b.n	8009e7e <__lo0bits+0x2a>
 8009eaa:	2000      	movs	r0, #0
 8009eac:	4770      	bx	lr
 8009eae:	2020      	movs	r0, #32
 8009eb0:	4770      	bx	lr
	...

08009eb4 <__i2b>:
 8009eb4:	b510      	push	{r4, lr}
 8009eb6:	460c      	mov	r4, r1
 8009eb8:	2101      	movs	r1, #1
 8009eba:	f7ff ff03 	bl	8009cc4 <_Balloc>
 8009ebe:	4602      	mov	r2, r0
 8009ec0:	b928      	cbnz	r0, 8009ece <__i2b+0x1a>
 8009ec2:	4b05      	ldr	r3, [pc, #20]	; (8009ed8 <__i2b+0x24>)
 8009ec4:	4805      	ldr	r0, [pc, #20]	; (8009edc <__i2b+0x28>)
 8009ec6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009eca:	f7ff f8b5 	bl	8009038 <__assert_func>
 8009ece:	2301      	movs	r3, #1
 8009ed0:	6144      	str	r4, [r0, #20]
 8009ed2:	6103      	str	r3, [r0, #16]
 8009ed4:	bd10      	pop	{r4, pc}
 8009ed6:	bf00      	nop
 8009ed8:	0800c5d6 	.word	0x0800c5d6
 8009edc:	0800c5e7 	.word	0x0800c5e7

08009ee0 <__multiply>:
 8009ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee4:	4691      	mov	r9, r2
 8009ee6:	690a      	ldr	r2, [r1, #16]
 8009ee8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	bfb8      	it	lt
 8009ef0:	460b      	movlt	r3, r1
 8009ef2:	460c      	mov	r4, r1
 8009ef4:	bfbc      	itt	lt
 8009ef6:	464c      	movlt	r4, r9
 8009ef8:	4699      	movlt	r9, r3
 8009efa:	6927      	ldr	r7, [r4, #16]
 8009efc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009f00:	68a3      	ldr	r3, [r4, #8]
 8009f02:	6861      	ldr	r1, [r4, #4]
 8009f04:	eb07 060a 	add.w	r6, r7, sl
 8009f08:	42b3      	cmp	r3, r6
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	bfb8      	it	lt
 8009f0e:	3101      	addlt	r1, #1
 8009f10:	f7ff fed8 	bl	8009cc4 <_Balloc>
 8009f14:	b930      	cbnz	r0, 8009f24 <__multiply+0x44>
 8009f16:	4602      	mov	r2, r0
 8009f18:	4b44      	ldr	r3, [pc, #272]	; (800a02c <__multiply+0x14c>)
 8009f1a:	4845      	ldr	r0, [pc, #276]	; (800a030 <__multiply+0x150>)
 8009f1c:	f240 115d 	movw	r1, #349	; 0x15d
 8009f20:	f7ff f88a 	bl	8009038 <__assert_func>
 8009f24:	f100 0514 	add.w	r5, r0, #20
 8009f28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009f2c:	462b      	mov	r3, r5
 8009f2e:	2200      	movs	r2, #0
 8009f30:	4543      	cmp	r3, r8
 8009f32:	d321      	bcc.n	8009f78 <__multiply+0x98>
 8009f34:	f104 0314 	add.w	r3, r4, #20
 8009f38:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009f3c:	f109 0314 	add.w	r3, r9, #20
 8009f40:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009f44:	9202      	str	r2, [sp, #8]
 8009f46:	1b3a      	subs	r2, r7, r4
 8009f48:	3a15      	subs	r2, #21
 8009f4a:	f022 0203 	bic.w	r2, r2, #3
 8009f4e:	3204      	adds	r2, #4
 8009f50:	f104 0115 	add.w	r1, r4, #21
 8009f54:	428f      	cmp	r7, r1
 8009f56:	bf38      	it	cc
 8009f58:	2204      	movcc	r2, #4
 8009f5a:	9201      	str	r2, [sp, #4]
 8009f5c:	9a02      	ldr	r2, [sp, #8]
 8009f5e:	9303      	str	r3, [sp, #12]
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d80c      	bhi.n	8009f7e <__multiply+0x9e>
 8009f64:	2e00      	cmp	r6, #0
 8009f66:	dd03      	ble.n	8009f70 <__multiply+0x90>
 8009f68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d05a      	beq.n	800a026 <__multiply+0x146>
 8009f70:	6106      	str	r6, [r0, #16]
 8009f72:	b005      	add	sp, #20
 8009f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f78:	f843 2b04 	str.w	r2, [r3], #4
 8009f7c:	e7d8      	b.n	8009f30 <__multiply+0x50>
 8009f7e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009f82:	f1ba 0f00 	cmp.w	sl, #0
 8009f86:	d024      	beq.n	8009fd2 <__multiply+0xf2>
 8009f88:	f104 0e14 	add.w	lr, r4, #20
 8009f8c:	46a9      	mov	r9, r5
 8009f8e:	f04f 0c00 	mov.w	ip, #0
 8009f92:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009f96:	f8d9 1000 	ldr.w	r1, [r9]
 8009f9a:	fa1f fb82 	uxth.w	fp, r2
 8009f9e:	b289      	uxth	r1, r1
 8009fa0:	fb0a 110b 	mla	r1, sl, fp, r1
 8009fa4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009fa8:	f8d9 2000 	ldr.w	r2, [r9]
 8009fac:	4461      	add	r1, ip
 8009fae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009fb2:	fb0a c20b 	mla	r2, sl, fp, ip
 8009fb6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009fba:	b289      	uxth	r1, r1
 8009fbc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009fc0:	4577      	cmp	r7, lr
 8009fc2:	f849 1b04 	str.w	r1, [r9], #4
 8009fc6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009fca:	d8e2      	bhi.n	8009f92 <__multiply+0xb2>
 8009fcc:	9a01      	ldr	r2, [sp, #4]
 8009fce:	f845 c002 	str.w	ip, [r5, r2]
 8009fd2:	9a03      	ldr	r2, [sp, #12]
 8009fd4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009fd8:	3304      	adds	r3, #4
 8009fda:	f1b9 0f00 	cmp.w	r9, #0
 8009fde:	d020      	beq.n	800a022 <__multiply+0x142>
 8009fe0:	6829      	ldr	r1, [r5, #0]
 8009fe2:	f104 0c14 	add.w	ip, r4, #20
 8009fe6:	46ae      	mov	lr, r5
 8009fe8:	f04f 0a00 	mov.w	sl, #0
 8009fec:	f8bc b000 	ldrh.w	fp, [ip]
 8009ff0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009ff4:	fb09 220b 	mla	r2, r9, fp, r2
 8009ff8:	4492      	add	sl, r2
 8009ffa:	b289      	uxth	r1, r1
 8009ffc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a000:	f84e 1b04 	str.w	r1, [lr], #4
 800a004:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a008:	f8be 1000 	ldrh.w	r1, [lr]
 800a00c:	0c12      	lsrs	r2, r2, #16
 800a00e:	fb09 1102 	mla	r1, r9, r2, r1
 800a012:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a016:	4567      	cmp	r7, ip
 800a018:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a01c:	d8e6      	bhi.n	8009fec <__multiply+0x10c>
 800a01e:	9a01      	ldr	r2, [sp, #4]
 800a020:	50a9      	str	r1, [r5, r2]
 800a022:	3504      	adds	r5, #4
 800a024:	e79a      	b.n	8009f5c <__multiply+0x7c>
 800a026:	3e01      	subs	r6, #1
 800a028:	e79c      	b.n	8009f64 <__multiply+0x84>
 800a02a:	bf00      	nop
 800a02c:	0800c5d6 	.word	0x0800c5d6
 800a030:	0800c5e7 	.word	0x0800c5e7

0800a034 <__pow5mult>:
 800a034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a038:	4615      	mov	r5, r2
 800a03a:	f012 0203 	ands.w	r2, r2, #3
 800a03e:	4606      	mov	r6, r0
 800a040:	460f      	mov	r7, r1
 800a042:	d007      	beq.n	800a054 <__pow5mult+0x20>
 800a044:	4c25      	ldr	r4, [pc, #148]	; (800a0dc <__pow5mult+0xa8>)
 800a046:	3a01      	subs	r2, #1
 800a048:	2300      	movs	r3, #0
 800a04a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a04e:	f7ff fe9b 	bl	8009d88 <__multadd>
 800a052:	4607      	mov	r7, r0
 800a054:	10ad      	asrs	r5, r5, #2
 800a056:	d03d      	beq.n	800a0d4 <__pow5mult+0xa0>
 800a058:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a05a:	b97c      	cbnz	r4, 800a07c <__pow5mult+0x48>
 800a05c:	2010      	movs	r0, #16
 800a05e:	f7ff fe1b 	bl	8009c98 <malloc>
 800a062:	4602      	mov	r2, r0
 800a064:	6270      	str	r0, [r6, #36]	; 0x24
 800a066:	b928      	cbnz	r0, 800a074 <__pow5mult+0x40>
 800a068:	4b1d      	ldr	r3, [pc, #116]	; (800a0e0 <__pow5mult+0xac>)
 800a06a:	481e      	ldr	r0, [pc, #120]	; (800a0e4 <__pow5mult+0xb0>)
 800a06c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a070:	f7fe ffe2 	bl	8009038 <__assert_func>
 800a074:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a078:	6004      	str	r4, [r0, #0]
 800a07a:	60c4      	str	r4, [r0, #12]
 800a07c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a080:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a084:	b94c      	cbnz	r4, 800a09a <__pow5mult+0x66>
 800a086:	f240 2171 	movw	r1, #625	; 0x271
 800a08a:	4630      	mov	r0, r6
 800a08c:	f7ff ff12 	bl	8009eb4 <__i2b>
 800a090:	2300      	movs	r3, #0
 800a092:	f8c8 0008 	str.w	r0, [r8, #8]
 800a096:	4604      	mov	r4, r0
 800a098:	6003      	str	r3, [r0, #0]
 800a09a:	f04f 0900 	mov.w	r9, #0
 800a09e:	07eb      	lsls	r3, r5, #31
 800a0a0:	d50a      	bpl.n	800a0b8 <__pow5mult+0x84>
 800a0a2:	4639      	mov	r1, r7
 800a0a4:	4622      	mov	r2, r4
 800a0a6:	4630      	mov	r0, r6
 800a0a8:	f7ff ff1a 	bl	8009ee0 <__multiply>
 800a0ac:	4639      	mov	r1, r7
 800a0ae:	4680      	mov	r8, r0
 800a0b0:	4630      	mov	r0, r6
 800a0b2:	f7ff fe47 	bl	8009d44 <_Bfree>
 800a0b6:	4647      	mov	r7, r8
 800a0b8:	106d      	asrs	r5, r5, #1
 800a0ba:	d00b      	beq.n	800a0d4 <__pow5mult+0xa0>
 800a0bc:	6820      	ldr	r0, [r4, #0]
 800a0be:	b938      	cbnz	r0, 800a0d0 <__pow5mult+0x9c>
 800a0c0:	4622      	mov	r2, r4
 800a0c2:	4621      	mov	r1, r4
 800a0c4:	4630      	mov	r0, r6
 800a0c6:	f7ff ff0b 	bl	8009ee0 <__multiply>
 800a0ca:	6020      	str	r0, [r4, #0]
 800a0cc:	f8c0 9000 	str.w	r9, [r0]
 800a0d0:	4604      	mov	r4, r0
 800a0d2:	e7e4      	b.n	800a09e <__pow5mult+0x6a>
 800a0d4:	4638      	mov	r0, r7
 800a0d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0da:	bf00      	nop
 800a0dc:	0800c738 	.word	0x0800c738
 800a0e0:	0800c4c0 	.word	0x0800c4c0
 800a0e4:	0800c5e7 	.word	0x0800c5e7

0800a0e8 <__lshift>:
 800a0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0ec:	460c      	mov	r4, r1
 800a0ee:	6849      	ldr	r1, [r1, #4]
 800a0f0:	6923      	ldr	r3, [r4, #16]
 800a0f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a0f6:	68a3      	ldr	r3, [r4, #8]
 800a0f8:	4607      	mov	r7, r0
 800a0fa:	4691      	mov	r9, r2
 800a0fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a100:	f108 0601 	add.w	r6, r8, #1
 800a104:	42b3      	cmp	r3, r6
 800a106:	db0b      	blt.n	800a120 <__lshift+0x38>
 800a108:	4638      	mov	r0, r7
 800a10a:	f7ff fddb 	bl	8009cc4 <_Balloc>
 800a10e:	4605      	mov	r5, r0
 800a110:	b948      	cbnz	r0, 800a126 <__lshift+0x3e>
 800a112:	4602      	mov	r2, r0
 800a114:	4b2a      	ldr	r3, [pc, #168]	; (800a1c0 <__lshift+0xd8>)
 800a116:	482b      	ldr	r0, [pc, #172]	; (800a1c4 <__lshift+0xdc>)
 800a118:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a11c:	f7fe ff8c 	bl	8009038 <__assert_func>
 800a120:	3101      	adds	r1, #1
 800a122:	005b      	lsls	r3, r3, #1
 800a124:	e7ee      	b.n	800a104 <__lshift+0x1c>
 800a126:	2300      	movs	r3, #0
 800a128:	f100 0114 	add.w	r1, r0, #20
 800a12c:	f100 0210 	add.w	r2, r0, #16
 800a130:	4618      	mov	r0, r3
 800a132:	4553      	cmp	r3, sl
 800a134:	db37      	blt.n	800a1a6 <__lshift+0xbe>
 800a136:	6920      	ldr	r0, [r4, #16]
 800a138:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a13c:	f104 0314 	add.w	r3, r4, #20
 800a140:	f019 091f 	ands.w	r9, r9, #31
 800a144:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a148:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a14c:	d02f      	beq.n	800a1ae <__lshift+0xc6>
 800a14e:	f1c9 0e20 	rsb	lr, r9, #32
 800a152:	468a      	mov	sl, r1
 800a154:	f04f 0c00 	mov.w	ip, #0
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	fa02 f209 	lsl.w	r2, r2, r9
 800a15e:	ea42 020c 	orr.w	r2, r2, ip
 800a162:	f84a 2b04 	str.w	r2, [sl], #4
 800a166:	f853 2b04 	ldr.w	r2, [r3], #4
 800a16a:	4298      	cmp	r0, r3
 800a16c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a170:	d8f2      	bhi.n	800a158 <__lshift+0x70>
 800a172:	1b03      	subs	r3, r0, r4
 800a174:	3b15      	subs	r3, #21
 800a176:	f023 0303 	bic.w	r3, r3, #3
 800a17a:	3304      	adds	r3, #4
 800a17c:	f104 0215 	add.w	r2, r4, #21
 800a180:	4290      	cmp	r0, r2
 800a182:	bf38      	it	cc
 800a184:	2304      	movcc	r3, #4
 800a186:	f841 c003 	str.w	ip, [r1, r3]
 800a18a:	f1bc 0f00 	cmp.w	ip, #0
 800a18e:	d001      	beq.n	800a194 <__lshift+0xac>
 800a190:	f108 0602 	add.w	r6, r8, #2
 800a194:	3e01      	subs	r6, #1
 800a196:	4638      	mov	r0, r7
 800a198:	612e      	str	r6, [r5, #16]
 800a19a:	4621      	mov	r1, r4
 800a19c:	f7ff fdd2 	bl	8009d44 <_Bfree>
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	e7c1      	b.n	800a132 <__lshift+0x4a>
 800a1ae:	3904      	subs	r1, #4
 800a1b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a1b8:	4298      	cmp	r0, r3
 800a1ba:	d8f9      	bhi.n	800a1b0 <__lshift+0xc8>
 800a1bc:	e7ea      	b.n	800a194 <__lshift+0xac>
 800a1be:	bf00      	nop
 800a1c0:	0800c5d6 	.word	0x0800c5d6
 800a1c4:	0800c5e7 	.word	0x0800c5e7

0800a1c8 <__mcmp>:
 800a1c8:	b530      	push	{r4, r5, lr}
 800a1ca:	6902      	ldr	r2, [r0, #16]
 800a1cc:	690c      	ldr	r4, [r1, #16]
 800a1ce:	1b12      	subs	r2, r2, r4
 800a1d0:	d10e      	bne.n	800a1f0 <__mcmp+0x28>
 800a1d2:	f100 0314 	add.w	r3, r0, #20
 800a1d6:	3114      	adds	r1, #20
 800a1d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a1dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a1e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a1e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a1e8:	42a5      	cmp	r5, r4
 800a1ea:	d003      	beq.n	800a1f4 <__mcmp+0x2c>
 800a1ec:	d305      	bcc.n	800a1fa <__mcmp+0x32>
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	4610      	mov	r0, r2
 800a1f2:	bd30      	pop	{r4, r5, pc}
 800a1f4:	4283      	cmp	r3, r0
 800a1f6:	d3f3      	bcc.n	800a1e0 <__mcmp+0x18>
 800a1f8:	e7fa      	b.n	800a1f0 <__mcmp+0x28>
 800a1fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a1fe:	e7f7      	b.n	800a1f0 <__mcmp+0x28>

0800a200 <__mdiff>:
 800a200:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a204:	460c      	mov	r4, r1
 800a206:	4606      	mov	r6, r0
 800a208:	4611      	mov	r1, r2
 800a20a:	4620      	mov	r0, r4
 800a20c:	4690      	mov	r8, r2
 800a20e:	f7ff ffdb 	bl	800a1c8 <__mcmp>
 800a212:	1e05      	subs	r5, r0, #0
 800a214:	d110      	bne.n	800a238 <__mdiff+0x38>
 800a216:	4629      	mov	r1, r5
 800a218:	4630      	mov	r0, r6
 800a21a:	f7ff fd53 	bl	8009cc4 <_Balloc>
 800a21e:	b930      	cbnz	r0, 800a22e <__mdiff+0x2e>
 800a220:	4b3a      	ldr	r3, [pc, #232]	; (800a30c <__mdiff+0x10c>)
 800a222:	4602      	mov	r2, r0
 800a224:	f240 2132 	movw	r1, #562	; 0x232
 800a228:	4839      	ldr	r0, [pc, #228]	; (800a310 <__mdiff+0x110>)
 800a22a:	f7fe ff05 	bl	8009038 <__assert_func>
 800a22e:	2301      	movs	r3, #1
 800a230:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a234:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a238:	bfa4      	itt	ge
 800a23a:	4643      	movge	r3, r8
 800a23c:	46a0      	movge	r8, r4
 800a23e:	4630      	mov	r0, r6
 800a240:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a244:	bfa6      	itte	ge
 800a246:	461c      	movge	r4, r3
 800a248:	2500      	movge	r5, #0
 800a24a:	2501      	movlt	r5, #1
 800a24c:	f7ff fd3a 	bl	8009cc4 <_Balloc>
 800a250:	b920      	cbnz	r0, 800a25c <__mdiff+0x5c>
 800a252:	4b2e      	ldr	r3, [pc, #184]	; (800a30c <__mdiff+0x10c>)
 800a254:	4602      	mov	r2, r0
 800a256:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a25a:	e7e5      	b.n	800a228 <__mdiff+0x28>
 800a25c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a260:	6926      	ldr	r6, [r4, #16]
 800a262:	60c5      	str	r5, [r0, #12]
 800a264:	f104 0914 	add.w	r9, r4, #20
 800a268:	f108 0514 	add.w	r5, r8, #20
 800a26c:	f100 0e14 	add.w	lr, r0, #20
 800a270:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a274:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a278:	f108 0210 	add.w	r2, r8, #16
 800a27c:	46f2      	mov	sl, lr
 800a27e:	2100      	movs	r1, #0
 800a280:	f859 3b04 	ldr.w	r3, [r9], #4
 800a284:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a288:	fa1f f883 	uxth.w	r8, r3
 800a28c:	fa11 f18b 	uxtah	r1, r1, fp
 800a290:	0c1b      	lsrs	r3, r3, #16
 800a292:	eba1 0808 	sub.w	r8, r1, r8
 800a296:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a29a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a29e:	fa1f f888 	uxth.w	r8, r8
 800a2a2:	1419      	asrs	r1, r3, #16
 800a2a4:	454e      	cmp	r6, r9
 800a2a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a2aa:	f84a 3b04 	str.w	r3, [sl], #4
 800a2ae:	d8e7      	bhi.n	800a280 <__mdiff+0x80>
 800a2b0:	1b33      	subs	r3, r6, r4
 800a2b2:	3b15      	subs	r3, #21
 800a2b4:	f023 0303 	bic.w	r3, r3, #3
 800a2b8:	3304      	adds	r3, #4
 800a2ba:	3415      	adds	r4, #21
 800a2bc:	42a6      	cmp	r6, r4
 800a2be:	bf38      	it	cc
 800a2c0:	2304      	movcc	r3, #4
 800a2c2:	441d      	add	r5, r3
 800a2c4:	4473      	add	r3, lr
 800a2c6:	469e      	mov	lr, r3
 800a2c8:	462e      	mov	r6, r5
 800a2ca:	4566      	cmp	r6, ip
 800a2cc:	d30e      	bcc.n	800a2ec <__mdiff+0xec>
 800a2ce:	f10c 0203 	add.w	r2, ip, #3
 800a2d2:	1b52      	subs	r2, r2, r5
 800a2d4:	f022 0203 	bic.w	r2, r2, #3
 800a2d8:	3d03      	subs	r5, #3
 800a2da:	45ac      	cmp	ip, r5
 800a2dc:	bf38      	it	cc
 800a2de:	2200      	movcc	r2, #0
 800a2e0:	441a      	add	r2, r3
 800a2e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a2e6:	b17b      	cbz	r3, 800a308 <__mdiff+0x108>
 800a2e8:	6107      	str	r7, [r0, #16]
 800a2ea:	e7a3      	b.n	800a234 <__mdiff+0x34>
 800a2ec:	f856 8b04 	ldr.w	r8, [r6], #4
 800a2f0:	fa11 f288 	uxtah	r2, r1, r8
 800a2f4:	1414      	asrs	r4, r2, #16
 800a2f6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a2fa:	b292      	uxth	r2, r2
 800a2fc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a300:	f84e 2b04 	str.w	r2, [lr], #4
 800a304:	1421      	asrs	r1, r4, #16
 800a306:	e7e0      	b.n	800a2ca <__mdiff+0xca>
 800a308:	3f01      	subs	r7, #1
 800a30a:	e7ea      	b.n	800a2e2 <__mdiff+0xe2>
 800a30c:	0800c5d6 	.word	0x0800c5d6
 800a310:	0800c5e7 	.word	0x0800c5e7

0800a314 <__d2b>:
 800a314:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a318:	4689      	mov	r9, r1
 800a31a:	2101      	movs	r1, #1
 800a31c:	ec57 6b10 	vmov	r6, r7, d0
 800a320:	4690      	mov	r8, r2
 800a322:	f7ff fccf 	bl	8009cc4 <_Balloc>
 800a326:	4604      	mov	r4, r0
 800a328:	b930      	cbnz	r0, 800a338 <__d2b+0x24>
 800a32a:	4602      	mov	r2, r0
 800a32c:	4b25      	ldr	r3, [pc, #148]	; (800a3c4 <__d2b+0xb0>)
 800a32e:	4826      	ldr	r0, [pc, #152]	; (800a3c8 <__d2b+0xb4>)
 800a330:	f240 310a 	movw	r1, #778	; 0x30a
 800a334:	f7fe fe80 	bl	8009038 <__assert_func>
 800a338:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a33c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a340:	bb35      	cbnz	r5, 800a390 <__d2b+0x7c>
 800a342:	2e00      	cmp	r6, #0
 800a344:	9301      	str	r3, [sp, #4]
 800a346:	d028      	beq.n	800a39a <__d2b+0x86>
 800a348:	4668      	mov	r0, sp
 800a34a:	9600      	str	r6, [sp, #0]
 800a34c:	f7ff fd82 	bl	8009e54 <__lo0bits>
 800a350:	9900      	ldr	r1, [sp, #0]
 800a352:	b300      	cbz	r0, 800a396 <__d2b+0x82>
 800a354:	9a01      	ldr	r2, [sp, #4]
 800a356:	f1c0 0320 	rsb	r3, r0, #32
 800a35a:	fa02 f303 	lsl.w	r3, r2, r3
 800a35e:	430b      	orrs	r3, r1
 800a360:	40c2      	lsrs	r2, r0
 800a362:	6163      	str	r3, [r4, #20]
 800a364:	9201      	str	r2, [sp, #4]
 800a366:	9b01      	ldr	r3, [sp, #4]
 800a368:	61a3      	str	r3, [r4, #24]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	bf14      	ite	ne
 800a36e:	2202      	movne	r2, #2
 800a370:	2201      	moveq	r2, #1
 800a372:	6122      	str	r2, [r4, #16]
 800a374:	b1d5      	cbz	r5, 800a3ac <__d2b+0x98>
 800a376:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a37a:	4405      	add	r5, r0
 800a37c:	f8c9 5000 	str.w	r5, [r9]
 800a380:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a384:	f8c8 0000 	str.w	r0, [r8]
 800a388:	4620      	mov	r0, r4
 800a38a:	b003      	add	sp, #12
 800a38c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a390:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a394:	e7d5      	b.n	800a342 <__d2b+0x2e>
 800a396:	6161      	str	r1, [r4, #20]
 800a398:	e7e5      	b.n	800a366 <__d2b+0x52>
 800a39a:	a801      	add	r0, sp, #4
 800a39c:	f7ff fd5a 	bl	8009e54 <__lo0bits>
 800a3a0:	9b01      	ldr	r3, [sp, #4]
 800a3a2:	6163      	str	r3, [r4, #20]
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	6122      	str	r2, [r4, #16]
 800a3a8:	3020      	adds	r0, #32
 800a3aa:	e7e3      	b.n	800a374 <__d2b+0x60>
 800a3ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a3b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a3b4:	f8c9 0000 	str.w	r0, [r9]
 800a3b8:	6918      	ldr	r0, [r3, #16]
 800a3ba:	f7ff fd2b 	bl	8009e14 <__hi0bits>
 800a3be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a3c2:	e7df      	b.n	800a384 <__d2b+0x70>
 800a3c4:	0800c5d6 	.word	0x0800c5d6
 800a3c8:	0800c5e7 	.word	0x0800c5e7

0800a3cc <_calloc_r>:
 800a3cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3ce:	fba1 2402 	umull	r2, r4, r1, r2
 800a3d2:	b94c      	cbnz	r4, 800a3e8 <_calloc_r+0x1c>
 800a3d4:	4611      	mov	r1, r2
 800a3d6:	9201      	str	r2, [sp, #4]
 800a3d8:	f000 f87a 	bl	800a4d0 <_malloc_r>
 800a3dc:	9a01      	ldr	r2, [sp, #4]
 800a3de:	4605      	mov	r5, r0
 800a3e0:	b930      	cbnz	r0, 800a3f0 <_calloc_r+0x24>
 800a3e2:	4628      	mov	r0, r5
 800a3e4:	b003      	add	sp, #12
 800a3e6:	bd30      	pop	{r4, r5, pc}
 800a3e8:	220c      	movs	r2, #12
 800a3ea:	6002      	str	r2, [r0, #0]
 800a3ec:	2500      	movs	r5, #0
 800a3ee:	e7f8      	b.n	800a3e2 <_calloc_r+0x16>
 800a3f0:	4621      	mov	r1, r4
 800a3f2:	f7fd ffe1 	bl	80083b8 <memset>
 800a3f6:	e7f4      	b.n	800a3e2 <_calloc_r+0x16>

0800a3f8 <_free_r>:
 800a3f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3fa:	2900      	cmp	r1, #0
 800a3fc:	d044      	beq.n	800a488 <_free_r+0x90>
 800a3fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a402:	9001      	str	r0, [sp, #4]
 800a404:	2b00      	cmp	r3, #0
 800a406:	f1a1 0404 	sub.w	r4, r1, #4
 800a40a:	bfb8      	it	lt
 800a40c:	18e4      	addlt	r4, r4, r3
 800a40e:	f000 fead 	bl	800b16c <__malloc_lock>
 800a412:	4a1e      	ldr	r2, [pc, #120]	; (800a48c <_free_r+0x94>)
 800a414:	9801      	ldr	r0, [sp, #4]
 800a416:	6813      	ldr	r3, [r2, #0]
 800a418:	b933      	cbnz	r3, 800a428 <_free_r+0x30>
 800a41a:	6063      	str	r3, [r4, #4]
 800a41c:	6014      	str	r4, [r2, #0]
 800a41e:	b003      	add	sp, #12
 800a420:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a424:	f000 bea8 	b.w	800b178 <__malloc_unlock>
 800a428:	42a3      	cmp	r3, r4
 800a42a:	d908      	bls.n	800a43e <_free_r+0x46>
 800a42c:	6825      	ldr	r5, [r4, #0]
 800a42e:	1961      	adds	r1, r4, r5
 800a430:	428b      	cmp	r3, r1
 800a432:	bf01      	itttt	eq
 800a434:	6819      	ldreq	r1, [r3, #0]
 800a436:	685b      	ldreq	r3, [r3, #4]
 800a438:	1949      	addeq	r1, r1, r5
 800a43a:	6021      	streq	r1, [r4, #0]
 800a43c:	e7ed      	b.n	800a41a <_free_r+0x22>
 800a43e:	461a      	mov	r2, r3
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	b10b      	cbz	r3, 800a448 <_free_r+0x50>
 800a444:	42a3      	cmp	r3, r4
 800a446:	d9fa      	bls.n	800a43e <_free_r+0x46>
 800a448:	6811      	ldr	r1, [r2, #0]
 800a44a:	1855      	adds	r5, r2, r1
 800a44c:	42a5      	cmp	r5, r4
 800a44e:	d10b      	bne.n	800a468 <_free_r+0x70>
 800a450:	6824      	ldr	r4, [r4, #0]
 800a452:	4421      	add	r1, r4
 800a454:	1854      	adds	r4, r2, r1
 800a456:	42a3      	cmp	r3, r4
 800a458:	6011      	str	r1, [r2, #0]
 800a45a:	d1e0      	bne.n	800a41e <_free_r+0x26>
 800a45c:	681c      	ldr	r4, [r3, #0]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	6053      	str	r3, [r2, #4]
 800a462:	4421      	add	r1, r4
 800a464:	6011      	str	r1, [r2, #0]
 800a466:	e7da      	b.n	800a41e <_free_r+0x26>
 800a468:	d902      	bls.n	800a470 <_free_r+0x78>
 800a46a:	230c      	movs	r3, #12
 800a46c:	6003      	str	r3, [r0, #0]
 800a46e:	e7d6      	b.n	800a41e <_free_r+0x26>
 800a470:	6825      	ldr	r5, [r4, #0]
 800a472:	1961      	adds	r1, r4, r5
 800a474:	428b      	cmp	r3, r1
 800a476:	bf04      	itt	eq
 800a478:	6819      	ldreq	r1, [r3, #0]
 800a47a:	685b      	ldreq	r3, [r3, #4]
 800a47c:	6063      	str	r3, [r4, #4]
 800a47e:	bf04      	itt	eq
 800a480:	1949      	addeq	r1, r1, r5
 800a482:	6021      	streq	r1, [r4, #0]
 800a484:	6054      	str	r4, [r2, #4]
 800a486:	e7ca      	b.n	800a41e <_free_r+0x26>
 800a488:	b003      	add	sp, #12
 800a48a:	bd30      	pop	{r4, r5, pc}
 800a48c:	200005a8 	.word	0x200005a8

0800a490 <sbrk_aligned>:
 800a490:	b570      	push	{r4, r5, r6, lr}
 800a492:	4e0e      	ldr	r6, [pc, #56]	; (800a4cc <sbrk_aligned+0x3c>)
 800a494:	460c      	mov	r4, r1
 800a496:	6831      	ldr	r1, [r6, #0]
 800a498:	4605      	mov	r5, r0
 800a49a:	b911      	cbnz	r1, 800a4a2 <sbrk_aligned+0x12>
 800a49c:	f000 fb42 	bl	800ab24 <_sbrk_r>
 800a4a0:	6030      	str	r0, [r6, #0]
 800a4a2:	4621      	mov	r1, r4
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	f000 fb3d 	bl	800ab24 <_sbrk_r>
 800a4aa:	1c43      	adds	r3, r0, #1
 800a4ac:	d00a      	beq.n	800a4c4 <sbrk_aligned+0x34>
 800a4ae:	1cc4      	adds	r4, r0, #3
 800a4b0:	f024 0403 	bic.w	r4, r4, #3
 800a4b4:	42a0      	cmp	r0, r4
 800a4b6:	d007      	beq.n	800a4c8 <sbrk_aligned+0x38>
 800a4b8:	1a21      	subs	r1, r4, r0
 800a4ba:	4628      	mov	r0, r5
 800a4bc:	f000 fb32 	bl	800ab24 <_sbrk_r>
 800a4c0:	3001      	adds	r0, #1
 800a4c2:	d101      	bne.n	800a4c8 <sbrk_aligned+0x38>
 800a4c4:	f04f 34ff 	mov.w	r4, #4294967295
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	bd70      	pop	{r4, r5, r6, pc}
 800a4cc:	200005ac 	.word	0x200005ac

0800a4d0 <_malloc_r>:
 800a4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4d4:	1ccd      	adds	r5, r1, #3
 800a4d6:	f025 0503 	bic.w	r5, r5, #3
 800a4da:	3508      	adds	r5, #8
 800a4dc:	2d0c      	cmp	r5, #12
 800a4de:	bf38      	it	cc
 800a4e0:	250c      	movcc	r5, #12
 800a4e2:	2d00      	cmp	r5, #0
 800a4e4:	4607      	mov	r7, r0
 800a4e6:	db01      	blt.n	800a4ec <_malloc_r+0x1c>
 800a4e8:	42a9      	cmp	r1, r5
 800a4ea:	d905      	bls.n	800a4f8 <_malloc_r+0x28>
 800a4ec:	230c      	movs	r3, #12
 800a4ee:	603b      	str	r3, [r7, #0]
 800a4f0:	2600      	movs	r6, #0
 800a4f2:	4630      	mov	r0, r6
 800a4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4f8:	4e2e      	ldr	r6, [pc, #184]	; (800a5b4 <_malloc_r+0xe4>)
 800a4fa:	f000 fe37 	bl	800b16c <__malloc_lock>
 800a4fe:	6833      	ldr	r3, [r6, #0]
 800a500:	461c      	mov	r4, r3
 800a502:	bb34      	cbnz	r4, 800a552 <_malloc_r+0x82>
 800a504:	4629      	mov	r1, r5
 800a506:	4638      	mov	r0, r7
 800a508:	f7ff ffc2 	bl	800a490 <sbrk_aligned>
 800a50c:	1c43      	adds	r3, r0, #1
 800a50e:	4604      	mov	r4, r0
 800a510:	d14d      	bne.n	800a5ae <_malloc_r+0xde>
 800a512:	6834      	ldr	r4, [r6, #0]
 800a514:	4626      	mov	r6, r4
 800a516:	2e00      	cmp	r6, #0
 800a518:	d140      	bne.n	800a59c <_malloc_r+0xcc>
 800a51a:	6823      	ldr	r3, [r4, #0]
 800a51c:	4631      	mov	r1, r6
 800a51e:	4638      	mov	r0, r7
 800a520:	eb04 0803 	add.w	r8, r4, r3
 800a524:	f000 fafe 	bl	800ab24 <_sbrk_r>
 800a528:	4580      	cmp	r8, r0
 800a52a:	d13a      	bne.n	800a5a2 <_malloc_r+0xd2>
 800a52c:	6821      	ldr	r1, [r4, #0]
 800a52e:	3503      	adds	r5, #3
 800a530:	1a6d      	subs	r5, r5, r1
 800a532:	f025 0503 	bic.w	r5, r5, #3
 800a536:	3508      	adds	r5, #8
 800a538:	2d0c      	cmp	r5, #12
 800a53a:	bf38      	it	cc
 800a53c:	250c      	movcc	r5, #12
 800a53e:	4629      	mov	r1, r5
 800a540:	4638      	mov	r0, r7
 800a542:	f7ff ffa5 	bl	800a490 <sbrk_aligned>
 800a546:	3001      	adds	r0, #1
 800a548:	d02b      	beq.n	800a5a2 <_malloc_r+0xd2>
 800a54a:	6823      	ldr	r3, [r4, #0]
 800a54c:	442b      	add	r3, r5
 800a54e:	6023      	str	r3, [r4, #0]
 800a550:	e00e      	b.n	800a570 <_malloc_r+0xa0>
 800a552:	6822      	ldr	r2, [r4, #0]
 800a554:	1b52      	subs	r2, r2, r5
 800a556:	d41e      	bmi.n	800a596 <_malloc_r+0xc6>
 800a558:	2a0b      	cmp	r2, #11
 800a55a:	d916      	bls.n	800a58a <_malloc_r+0xba>
 800a55c:	1961      	adds	r1, r4, r5
 800a55e:	42a3      	cmp	r3, r4
 800a560:	6025      	str	r5, [r4, #0]
 800a562:	bf18      	it	ne
 800a564:	6059      	strne	r1, [r3, #4]
 800a566:	6863      	ldr	r3, [r4, #4]
 800a568:	bf08      	it	eq
 800a56a:	6031      	streq	r1, [r6, #0]
 800a56c:	5162      	str	r2, [r4, r5]
 800a56e:	604b      	str	r3, [r1, #4]
 800a570:	4638      	mov	r0, r7
 800a572:	f104 060b 	add.w	r6, r4, #11
 800a576:	f000 fdff 	bl	800b178 <__malloc_unlock>
 800a57a:	f026 0607 	bic.w	r6, r6, #7
 800a57e:	1d23      	adds	r3, r4, #4
 800a580:	1af2      	subs	r2, r6, r3
 800a582:	d0b6      	beq.n	800a4f2 <_malloc_r+0x22>
 800a584:	1b9b      	subs	r3, r3, r6
 800a586:	50a3      	str	r3, [r4, r2]
 800a588:	e7b3      	b.n	800a4f2 <_malloc_r+0x22>
 800a58a:	6862      	ldr	r2, [r4, #4]
 800a58c:	42a3      	cmp	r3, r4
 800a58e:	bf0c      	ite	eq
 800a590:	6032      	streq	r2, [r6, #0]
 800a592:	605a      	strne	r2, [r3, #4]
 800a594:	e7ec      	b.n	800a570 <_malloc_r+0xa0>
 800a596:	4623      	mov	r3, r4
 800a598:	6864      	ldr	r4, [r4, #4]
 800a59a:	e7b2      	b.n	800a502 <_malloc_r+0x32>
 800a59c:	4634      	mov	r4, r6
 800a59e:	6876      	ldr	r6, [r6, #4]
 800a5a0:	e7b9      	b.n	800a516 <_malloc_r+0x46>
 800a5a2:	230c      	movs	r3, #12
 800a5a4:	603b      	str	r3, [r7, #0]
 800a5a6:	4638      	mov	r0, r7
 800a5a8:	f000 fde6 	bl	800b178 <__malloc_unlock>
 800a5ac:	e7a1      	b.n	800a4f2 <_malloc_r+0x22>
 800a5ae:	6025      	str	r5, [r4, #0]
 800a5b0:	e7de      	b.n	800a570 <_malloc_r+0xa0>
 800a5b2:	bf00      	nop
 800a5b4:	200005a8 	.word	0x200005a8

0800a5b8 <__ssputs_r>:
 800a5b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5bc:	688e      	ldr	r6, [r1, #8]
 800a5be:	429e      	cmp	r6, r3
 800a5c0:	4682      	mov	sl, r0
 800a5c2:	460c      	mov	r4, r1
 800a5c4:	4690      	mov	r8, r2
 800a5c6:	461f      	mov	r7, r3
 800a5c8:	d838      	bhi.n	800a63c <__ssputs_r+0x84>
 800a5ca:	898a      	ldrh	r2, [r1, #12]
 800a5cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a5d0:	d032      	beq.n	800a638 <__ssputs_r+0x80>
 800a5d2:	6825      	ldr	r5, [r4, #0]
 800a5d4:	6909      	ldr	r1, [r1, #16]
 800a5d6:	eba5 0901 	sub.w	r9, r5, r1
 800a5da:	6965      	ldr	r5, [r4, #20]
 800a5dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a5e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	444b      	add	r3, r9
 800a5e8:	106d      	asrs	r5, r5, #1
 800a5ea:	429d      	cmp	r5, r3
 800a5ec:	bf38      	it	cc
 800a5ee:	461d      	movcc	r5, r3
 800a5f0:	0553      	lsls	r3, r2, #21
 800a5f2:	d531      	bpl.n	800a658 <__ssputs_r+0xa0>
 800a5f4:	4629      	mov	r1, r5
 800a5f6:	f7ff ff6b 	bl	800a4d0 <_malloc_r>
 800a5fa:	4606      	mov	r6, r0
 800a5fc:	b950      	cbnz	r0, 800a614 <__ssputs_r+0x5c>
 800a5fe:	230c      	movs	r3, #12
 800a600:	f8ca 3000 	str.w	r3, [sl]
 800a604:	89a3      	ldrh	r3, [r4, #12]
 800a606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a60a:	81a3      	strh	r3, [r4, #12]
 800a60c:	f04f 30ff 	mov.w	r0, #4294967295
 800a610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a614:	6921      	ldr	r1, [r4, #16]
 800a616:	464a      	mov	r2, r9
 800a618:	f7ff fb46 	bl	8009ca8 <memcpy>
 800a61c:	89a3      	ldrh	r3, [r4, #12]
 800a61e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a626:	81a3      	strh	r3, [r4, #12]
 800a628:	6126      	str	r6, [r4, #16]
 800a62a:	6165      	str	r5, [r4, #20]
 800a62c:	444e      	add	r6, r9
 800a62e:	eba5 0509 	sub.w	r5, r5, r9
 800a632:	6026      	str	r6, [r4, #0]
 800a634:	60a5      	str	r5, [r4, #8]
 800a636:	463e      	mov	r6, r7
 800a638:	42be      	cmp	r6, r7
 800a63a:	d900      	bls.n	800a63e <__ssputs_r+0x86>
 800a63c:	463e      	mov	r6, r7
 800a63e:	6820      	ldr	r0, [r4, #0]
 800a640:	4632      	mov	r2, r6
 800a642:	4641      	mov	r1, r8
 800a644:	f000 fd78 	bl	800b138 <memmove>
 800a648:	68a3      	ldr	r3, [r4, #8]
 800a64a:	1b9b      	subs	r3, r3, r6
 800a64c:	60a3      	str	r3, [r4, #8]
 800a64e:	6823      	ldr	r3, [r4, #0]
 800a650:	4433      	add	r3, r6
 800a652:	6023      	str	r3, [r4, #0]
 800a654:	2000      	movs	r0, #0
 800a656:	e7db      	b.n	800a610 <__ssputs_r+0x58>
 800a658:	462a      	mov	r2, r5
 800a65a:	f000 fd93 	bl	800b184 <_realloc_r>
 800a65e:	4606      	mov	r6, r0
 800a660:	2800      	cmp	r0, #0
 800a662:	d1e1      	bne.n	800a628 <__ssputs_r+0x70>
 800a664:	6921      	ldr	r1, [r4, #16]
 800a666:	4650      	mov	r0, sl
 800a668:	f7ff fec6 	bl	800a3f8 <_free_r>
 800a66c:	e7c7      	b.n	800a5fe <__ssputs_r+0x46>
	...

0800a670 <_svfiprintf_r>:
 800a670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a674:	4698      	mov	r8, r3
 800a676:	898b      	ldrh	r3, [r1, #12]
 800a678:	061b      	lsls	r3, r3, #24
 800a67a:	b09d      	sub	sp, #116	; 0x74
 800a67c:	4607      	mov	r7, r0
 800a67e:	460d      	mov	r5, r1
 800a680:	4614      	mov	r4, r2
 800a682:	d50e      	bpl.n	800a6a2 <_svfiprintf_r+0x32>
 800a684:	690b      	ldr	r3, [r1, #16]
 800a686:	b963      	cbnz	r3, 800a6a2 <_svfiprintf_r+0x32>
 800a688:	2140      	movs	r1, #64	; 0x40
 800a68a:	f7ff ff21 	bl	800a4d0 <_malloc_r>
 800a68e:	6028      	str	r0, [r5, #0]
 800a690:	6128      	str	r0, [r5, #16]
 800a692:	b920      	cbnz	r0, 800a69e <_svfiprintf_r+0x2e>
 800a694:	230c      	movs	r3, #12
 800a696:	603b      	str	r3, [r7, #0]
 800a698:	f04f 30ff 	mov.w	r0, #4294967295
 800a69c:	e0d1      	b.n	800a842 <_svfiprintf_r+0x1d2>
 800a69e:	2340      	movs	r3, #64	; 0x40
 800a6a0:	616b      	str	r3, [r5, #20]
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a6a6:	2320      	movs	r3, #32
 800a6a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6b0:	2330      	movs	r3, #48	; 0x30
 800a6b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a85c <_svfiprintf_r+0x1ec>
 800a6b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6ba:	f04f 0901 	mov.w	r9, #1
 800a6be:	4623      	mov	r3, r4
 800a6c0:	469a      	mov	sl, r3
 800a6c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6c6:	b10a      	cbz	r2, 800a6cc <_svfiprintf_r+0x5c>
 800a6c8:	2a25      	cmp	r2, #37	; 0x25
 800a6ca:	d1f9      	bne.n	800a6c0 <_svfiprintf_r+0x50>
 800a6cc:	ebba 0b04 	subs.w	fp, sl, r4
 800a6d0:	d00b      	beq.n	800a6ea <_svfiprintf_r+0x7a>
 800a6d2:	465b      	mov	r3, fp
 800a6d4:	4622      	mov	r2, r4
 800a6d6:	4629      	mov	r1, r5
 800a6d8:	4638      	mov	r0, r7
 800a6da:	f7ff ff6d 	bl	800a5b8 <__ssputs_r>
 800a6de:	3001      	adds	r0, #1
 800a6e0:	f000 80aa 	beq.w	800a838 <_svfiprintf_r+0x1c8>
 800a6e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6e6:	445a      	add	r2, fp
 800a6e8:	9209      	str	r2, [sp, #36]	; 0x24
 800a6ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	f000 80a2 	beq.w	800a838 <_svfiprintf_r+0x1c8>
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a6fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6fe:	f10a 0a01 	add.w	sl, sl, #1
 800a702:	9304      	str	r3, [sp, #16]
 800a704:	9307      	str	r3, [sp, #28]
 800a706:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a70a:	931a      	str	r3, [sp, #104]	; 0x68
 800a70c:	4654      	mov	r4, sl
 800a70e:	2205      	movs	r2, #5
 800a710:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a714:	4851      	ldr	r0, [pc, #324]	; (800a85c <_svfiprintf_r+0x1ec>)
 800a716:	f7f5 fd9b 	bl	8000250 <memchr>
 800a71a:	9a04      	ldr	r2, [sp, #16]
 800a71c:	b9d8      	cbnz	r0, 800a756 <_svfiprintf_r+0xe6>
 800a71e:	06d0      	lsls	r0, r2, #27
 800a720:	bf44      	itt	mi
 800a722:	2320      	movmi	r3, #32
 800a724:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a728:	0711      	lsls	r1, r2, #28
 800a72a:	bf44      	itt	mi
 800a72c:	232b      	movmi	r3, #43	; 0x2b
 800a72e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a732:	f89a 3000 	ldrb.w	r3, [sl]
 800a736:	2b2a      	cmp	r3, #42	; 0x2a
 800a738:	d015      	beq.n	800a766 <_svfiprintf_r+0xf6>
 800a73a:	9a07      	ldr	r2, [sp, #28]
 800a73c:	4654      	mov	r4, sl
 800a73e:	2000      	movs	r0, #0
 800a740:	f04f 0c0a 	mov.w	ip, #10
 800a744:	4621      	mov	r1, r4
 800a746:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a74a:	3b30      	subs	r3, #48	; 0x30
 800a74c:	2b09      	cmp	r3, #9
 800a74e:	d94e      	bls.n	800a7ee <_svfiprintf_r+0x17e>
 800a750:	b1b0      	cbz	r0, 800a780 <_svfiprintf_r+0x110>
 800a752:	9207      	str	r2, [sp, #28]
 800a754:	e014      	b.n	800a780 <_svfiprintf_r+0x110>
 800a756:	eba0 0308 	sub.w	r3, r0, r8
 800a75a:	fa09 f303 	lsl.w	r3, r9, r3
 800a75e:	4313      	orrs	r3, r2
 800a760:	9304      	str	r3, [sp, #16]
 800a762:	46a2      	mov	sl, r4
 800a764:	e7d2      	b.n	800a70c <_svfiprintf_r+0x9c>
 800a766:	9b03      	ldr	r3, [sp, #12]
 800a768:	1d19      	adds	r1, r3, #4
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	9103      	str	r1, [sp, #12]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	bfbb      	ittet	lt
 800a772:	425b      	neglt	r3, r3
 800a774:	f042 0202 	orrlt.w	r2, r2, #2
 800a778:	9307      	strge	r3, [sp, #28]
 800a77a:	9307      	strlt	r3, [sp, #28]
 800a77c:	bfb8      	it	lt
 800a77e:	9204      	strlt	r2, [sp, #16]
 800a780:	7823      	ldrb	r3, [r4, #0]
 800a782:	2b2e      	cmp	r3, #46	; 0x2e
 800a784:	d10c      	bne.n	800a7a0 <_svfiprintf_r+0x130>
 800a786:	7863      	ldrb	r3, [r4, #1]
 800a788:	2b2a      	cmp	r3, #42	; 0x2a
 800a78a:	d135      	bne.n	800a7f8 <_svfiprintf_r+0x188>
 800a78c:	9b03      	ldr	r3, [sp, #12]
 800a78e:	1d1a      	adds	r2, r3, #4
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	9203      	str	r2, [sp, #12]
 800a794:	2b00      	cmp	r3, #0
 800a796:	bfb8      	it	lt
 800a798:	f04f 33ff 	movlt.w	r3, #4294967295
 800a79c:	3402      	adds	r4, #2
 800a79e:	9305      	str	r3, [sp, #20]
 800a7a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a86c <_svfiprintf_r+0x1fc>
 800a7a4:	7821      	ldrb	r1, [r4, #0]
 800a7a6:	2203      	movs	r2, #3
 800a7a8:	4650      	mov	r0, sl
 800a7aa:	f7f5 fd51 	bl	8000250 <memchr>
 800a7ae:	b140      	cbz	r0, 800a7c2 <_svfiprintf_r+0x152>
 800a7b0:	2340      	movs	r3, #64	; 0x40
 800a7b2:	eba0 000a 	sub.w	r0, r0, sl
 800a7b6:	fa03 f000 	lsl.w	r0, r3, r0
 800a7ba:	9b04      	ldr	r3, [sp, #16]
 800a7bc:	4303      	orrs	r3, r0
 800a7be:	3401      	adds	r4, #1
 800a7c0:	9304      	str	r3, [sp, #16]
 800a7c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7c6:	4826      	ldr	r0, [pc, #152]	; (800a860 <_svfiprintf_r+0x1f0>)
 800a7c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7cc:	2206      	movs	r2, #6
 800a7ce:	f7f5 fd3f 	bl	8000250 <memchr>
 800a7d2:	2800      	cmp	r0, #0
 800a7d4:	d038      	beq.n	800a848 <_svfiprintf_r+0x1d8>
 800a7d6:	4b23      	ldr	r3, [pc, #140]	; (800a864 <_svfiprintf_r+0x1f4>)
 800a7d8:	bb1b      	cbnz	r3, 800a822 <_svfiprintf_r+0x1b2>
 800a7da:	9b03      	ldr	r3, [sp, #12]
 800a7dc:	3307      	adds	r3, #7
 800a7de:	f023 0307 	bic.w	r3, r3, #7
 800a7e2:	3308      	adds	r3, #8
 800a7e4:	9303      	str	r3, [sp, #12]
 800a7e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7e8:	4433      	add	r3, r6
 800a7ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a7ec:	e767      	b.n	800a6be <_svfiprintf_r+0x4e>
 800a7ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7f2:	460c      	mov	r4, r1
 800a7f4:	2001      	movs	r0, #1
 800a7f6:	e7a5      	b.n	800a744 <_svfiprintf_r+0xd4>
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	3401      	adds	r4, #1
 800a7fc:	9305      	str	r3, [sp, #20]
 800a7fe:	4619      	mov	r1, r3
 800a800:	f04f 0c0a 	mov.w	ip, #10
 800a804:	4620      	mov	r0, r4
 800a806:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a80a:	3a30      	subs	r2, #48	; 0x30
 800a80c:	2a09      	cmp	r2, #9
 800a80e:	d903      	bls.n	800a818 <_svfiprintf_r+0x1a8>
 800a810:	2b00      	cmp	r3, #0
 800a812:	d0c5      	beq.n	800a7a0 <_svfiprintf_r+0x130>
 800a814:	9105      	str	r1, [sp, #20]
 800a816:	e7c3      	b.n	800a7a0 <_svfiprintf_r+0x130>
 800a818:	fb0c 2101 	mla	r1, ip, r1, r2
 800a81c:	4604      	mov	r4, r0
 800a81e:	2301      	movs	r3, #1
 800a820:	e7f0      	b.n	800a804 <_svfiprintf_r+0x194>
 800a822:	ab03      	add	r3, sp, #12
 800a824:	9300      	str	r3, [sp, #0]
 800a826:	462a      	mov	r2, r5
 800a828:	4b0f      	ldr	r3, [pc, #60]	; (800a868 <_svfiprintf_r+0x1f8>)
 800a82a:	a904      	add	r1, sp, #16
 800a82c:	4638      	mov	r0, r7
 800a82e:	f7fd fe5b 	bl	80084e8 <_printf_float>
 800a832:	1c42      	adds	r2, r0, #1
 800a834:	4606      	mov	r6, r0
 800a836:	d1d6      	bne.n	800a7e6 <_svfiprintf_r+0x176>
 800a838:	89ab      	ldrh	r3, [r5, #12]
 800a83a:	065b      	lsls	r3, r3, #25
 800a83c:	f53f af2c 	bmi.w	800a698 <_svfiprintf_r+0x28>
 800a840:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a842:	b01d      	add	sp, #116	; 0x74
 800a844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a848:	ab03      	add	r3, sp, #12
 800a84a:	9300      	str	r3, [sp, #0]
 800a84c:	462a      	mov	r2, r5
 800a84e:	4b06      	ldr	r3, [pc, #24]	; (800a868 <_svfiprintf_r+0x1f8>)
 800a850:	a904      	add	r1, sp, #16
 800a852:	4638      	mov	r0, r7
 800a854:	f7fe f8d4 	bl	8008a00 <_printf_i>
 800a858:	e7eb      	b.n	800a832 <_svfiprintf_r+0x1c2>
 800a85a:	bf00      	nop
 800a85c:	0800c744 	.word	0x0800c744
 800a860:	0800c74e 	.word	0x0800c74e
 800a864:	080084e9 	.word	0x080084e9
 800a868:	0800a5b9 	.word	0x0800a5b9
 800a86c:	0800c74a 	.word	0x0800c74a

0800a870 <__sfputc_r>:
 800a870:	6893      	ldr	r3, [r2, #8]
 800a872:	3b01      	subs	r3, #1
 800a874:	2b00      	cmp	r3, #0
 800a876:	b410      	push	{r4}
 800a878:	6093      	str	r3, [r2, #8]
 800a87a:	da08      	bge.n	800a88e <__sfputc_r+0x1e>
 800a87c:	6994      	ldr	r4, [r2, #24]
 800a87e:	42a3      	cmp	r3, r4
 800a880:	db01      	blt.n	800a886 <__sfputc_r+0x16>
 800a882:	290a      	cmp	r1, #10
 800a884:	d103      	bne.n	800a88e <__sfputc_r+0x1e>
 800a886:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a88a:	f000 b95b 	b.w	800ab44 <__swbuf_r>
 800a88e:	6813      	ldr	r3, [r2, #0]
 800a890:	1c58      	adds	r0, r3, #1
 800a892:	6010      	str	r0, [r2, #0]
 800a894:	7019      	strb	r1, [r3, #0]
 800a896:	4608      	mov	r0, r1
 800a898:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a89c:	4770      	bx	lr

0800a89e <__sfputs_r>:
 800a89e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8a0:	4606      	mov	r6, r0
 800a8a2:	460f      	mov	r7, r1
 800a8a4:	4614      	mov	r4, r2
 800a8a6:	18d5      	adds	r5, r2, r3
 800a8a8:	42ac      	cmp	r4, r5
 800a8aa:	d101      	bne.n	800a8b0 <__sfputs_r+0x12>
 800a8ac:	2000      	movs	r0, #0
 800a8ae:	e007      	b.n	800a8c0 <__sfputs_r+0x22>
 800a8b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8b4:	463a      	mov	r2, r7
 800a8b6:	4630      	mov	r0, r6
 800a8b8:	f7ff ffda 	bl	800a870 <__sfputc_r>
 800a8bc:	1c43      	adds	r3, r0, #1
 800a8be:	d1f3      	bne.n	800a8a8 <__sfputs_r+0xa>
 800a8c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a8c4 <_vfiprintf_r>:
 800a8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c8:	460d      	mov	r5, r1
 800a8ca:	b09d      	sub	sp, #116	; 0x74
 800a8cc:	4614      	mov	r4, r2
 800a8ce:	4698      	mov	r8, r3
 800a8d0:	4606      	mov	r6, r0
 800a8d2:	b118      	cbz	r0, 800a8dc <_vfiprintf_r+0x18>
 800a8d4:	6983      	ldr	r3, [r0, #24]
 800a8d6:	b90b      	cbnz	r3, 800a8dc <_vfiprintf_r+0x18>
 800a8d8:	f000 fb16 	bl	800af08 <__sinit>
 800a8dc:	4b89      	ldr	r3, [pc, #548]	; (800ab04 <_vfiprintf_r+0x240>)
 800a8de:	429d      	cmp	r5, r3
 800a8e0:	d11b      	bne.n	800a91a <_vfiprintf_r+0x56>
 800a8e2:	6875      	ldr	r5, [r6, #4]
 800a8e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8e6:	07d9      	lsls	r1, r3, #31
 800a8e8:	d405      	bmi.n	800a8f6 <_vfiprintf_r+0x32>
 800a8ea:	89ab      	ldrh	r3, [r5, #12]
 800a8ec:	059a      	lsls	r2, r3, #22
 800a8ee:	d402      	bmi.n	800a8f6 <_vfiprintf_r+0x32>
 800a8f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8f2:	f000 fba7 	bl	800b044 <__retarget_lock_acquire_recursive>
 800a8f6:	89ab      	ldrh	r3, [r5, #12]
 800a8f8:	071b      	lsls	r3, r3, #28
 800a8fa:	d501      	bpl.n	800a900 <_vfiprintf_r+0x3c>
 800a8fc:	692b      	ldr	r3, [r5, #16]
 800a8fe:	b9eb      	cbnz	r3, 800a93c <_vfiprintf_r+0x78>
 800a900:	4629      	mov	r1, r5
 800a902:	4630      	mov	r0, r6
 800a904:	f000 f970 	bl	800abe8 <__swsetup_r>
 800a908:	b1c0      	cbz	r0, 800a93c <_vfiprintf_r+0x78>
 800a90a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a90c:	07dc      	lsls	r4, r3, #31
 800a90e:	d50e      	bpl.n	800a92e <_vfiprintf_r+0x6a>
 800a910:	f04f 30ff 	mov.w	r0, #4294967295
 800a914:	b01d      	add	sp, #116	; 0x74
 800a916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a91a:	4b7b      	ldr	r3, [pc, #492]	; (800ab08 <_vfiprintf_r+0x244>)
 800a91c:	429d      	cmp	r5, r3
 800a91e:	d101      	bne.n	800a924 <_vfiprintf_r+0x60>
 800a920:	68b5      	ldr	r5, [r6, #8]
 800a922:	e7df      	b.n	800a8e4 <_vfiprintf_r+0x20>
 800a924:	4b79      	ldr	r3, [pc, #484]	; (800ab0c <_vfiprintf_r+0x248>)
 800a926:	429d      	cmp	r5, r3
 800a928:	bf08      	it	eq
 800a92a:	68f5      	ldreq	r5, [r6, #12]
 800a92c:	e7da      	b.n	800a8e4 <_vfiprintf_r+0x20>
 800a92e:	89ab      	ldrh	r3, [r5, #12]
 800a930:	0598      	lsls	r0, r3, #22
 800a932:	d4ed      	bmi.n	800a910 <_vfiprintf_r+0x4c>
 800a934:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a936:	f000 fb86 	bl	800b046 <__retarget_lock_release_recursive>
 800a93a:	e7e9      	b.n	800a910 <_vfiprintf_r+0x4c>
 800a93c:	2300      	movs	r3, #0
 800a93e:	9309      	str	r3, [sp, #36]	; 0x24
 800a940:	2320      	movs	r3, #32
 800a942:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a946:	f8cd 800c 	str.w	r8, [sp, #12]
 800a94a:	2330      	movs	r3, #48	; 0x30
 800a94c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ab10 <_vfiprintf_r+0x24c>
 800a950:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a954:	f04f 0901 	mov.w	r9, #1
 800a958:	4623      	mov	r3, r4
 800a95a:	469a      	mov	sl, r3
 800a95c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a960:	b10a      	cbz	r2, 800a966 <_vfiprintf_r+0xa2>
 800a962:	2a25      	cmp	r2, #37	; 0x25
 800a964:	d1f9      	bne.n	800a95a <_vfiprintf_r+0x96>
 800a966:	ebba 0b04 	subs.w	fp, sl, r4
 800a96a:	d00b      	beq.n	800a984 <_vfiprintf_r+0xc0>
 800a96c:	465b      	mov	r3, fp
 800a96e:	4622      	mov	r2, r4
 800a970:	4629      	mov	r1, r5
 800a972:	4630      	mov	r0, r6
 800a974:	f7ff ff93 	bl	800a89e <__sfputs_r>
 800a978:	3001      	adds	r0, #1
 800a97a:	f000 80aa 	beq.w	800aad2 <_vfiprintf_r+0x20e>
 800a97e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a980:	445a      	add	r2, fp
 800a982:	9209      	str	r2, [sp, #36]	; 0x24
 800a984:	f89a 3000 	ldrb.w	r3, [sl]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	f000 80a2 	beq.w	800aad2 <_vfiprintf_r+0x20e>
 800a98e:	2300      	movs	r3, #0
 800a990:	f04f 32ff 	mov.w	r2, #4294967295
 800a994:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a998:	f10a 0a01 	add.w	sl, sl, #1
 800a99c:	9304      	str	r3, [sp, #16]
 800a99e:	9307      	str	r3, [sp, #28]
 800a9a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9a4:	931a      	str	r3, [sp, #104]	; 0x68
 800a9a6:	4654      	mov	r4, sl
 800a9a8:	2205      	movs	r2, #5
 800a9aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9ae:	4858      	ldr	r0, [pc, #352]	; (800ab10 <_vfiprintf_r+0x24c>)
 800a9b0:	f7f5 fc4e 	bl	8000250 <memchr>
 800a9b4:	9a04      	ldr	r2, [sp, #16]
 800a9b6:	b9d8      	cbnz	r0, 800a9f0 <_vfiprintf_r+0x12c>
 800a9b8:	06d1      	lsls	r1, r2, #27
 800a9ba:	bf44      	itt	mi
 800a9bc:	2320      	movmi	r3, #32
 800a9be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9c2:	0713      	lsls	r3, r2, #28
 800a9c4:	bf44      	itt	mi
 800a9c6:	232b      	movmi	r3, #43	; 0x2b
 800a9c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9cc:	f89a 3000 	ldrb.w	r3, [sl]
 800a9d0:	2b2a      	cmp	r3, #42	; 0x2a
 800a9d2:	d015      	beq.n	800aa00 <_vfiprintf_r+0x13c>
 800a9d4:	9a07      	ldr	r2, [sp, #28]
 800a9d6:	4654      	mov	r4, sl
 800a9d8:	2000      	movs	r0, #0
 800a9da:	f04f 0c0a 	mov.w	ip, #10
 800a9de:	4621      	mov	r1, r4
 800a9e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9e4:	3b30      	subs	r3, #48	; 0x30
 800a9e6:	2b09      	cmp	r3, #9
 800a9e8:	d94e      	bls.n	800aa88 <_vfiprintf_r+0x1c4>
 800a9ea:	b1b0      	cbz	r0, 800aa1a <_vfiprintf_r+0x156>
 800a9ec:	9207      	str	r2, [sp, #28]
 800a9ee:	e014      	b.n	800aa1a <_vfiprintf_r+0x156>
 800a9f0:	eba0 0308 	sub.w	r3, r0, r8
 800a9f4:	fa09 f303 	lsl.w	r3, r9, r3
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	9304      	str	r3, [sp, #16]
 800a9fc:	46a2      	mov	sl, r4
 800a9fe:	e7d2      	b.n	800a9a6 <_vfiprintf_r+0xe2>
 800aa00:	9b03      	ldr	r3, [sp, #12]
 800aa02:	1d19      	adds	r1, r3, #4
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	9103      	str	r1, [sp, #12]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	bfbb      	ittet	lt
 800aa0c:	425b      	neglt	r3, r3
 800aa0e:	f042 0202 	orrlt.w	r2, r2, #2
 800aa12:	9307      	strge	r3, [sp, #28]
 800aa14:	9307      	strlt	r3, [sp, #28]
 800aa16:	bfb8      	it	lt
 800aa18:	9204      	strlt	r2, [sp, #16]
 800aa1a:	7823      	ldrb	r3, [r4, #0]
 800aa1c:	2b2e      	cmp	r3, #46	; 0x2e
 800aa1e:	d10c      	bne.n	800aa3a <_vfiprintf_r+0x176>
 800aa20:	7863      	ldrb	r3, [r4, #1]
 800aa22:	2b2a      	cmp	r3, #42	; 0x2a
 800aa24:	d135      	bne.n	800aa92 <_vfiprintf_r+0x1ce>
 800aa26:	9b03      	ldr	r3, [sp, #12]
 800aa28:	1d1a      	adds	r2, r3, #4
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	9203      	str	r2, [sp, #12]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	bfb8      	it	lt
 800aa32:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa36:	3402      	adds	r4, #2
 800aa38:	9305      	str	r3, [sp, #20]
 800aa3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ab20 <_vfiprintf_r+0x25c>
 800aa3e:	7821      	ldrb	r1, [r4, #0]
 800aa40:	2203      	movs	r2, #3
 800aa42:	4650      	mov	r0, sl
 800aa44:	f7f5 fc04 	bl	8000250 <memchr>
 800aa48:	b140      	cbz	r0, 800aa5c <_vfiprintf_r+0x198>
 800aa4a:	2340      	movs	r3, #64	; 0x40
 800aa4c:	eba0 000a 	sub.w	r0, r0, sl
 800aa50:	fa03 f000 	lsl.w	r0, r3, r0
 800aa54:	9b04      	ldr	r3, [sp, #16]
 800aa56:	4303      	orrs	r3, r0
 800aa58:	3401      	adds	r4, #1
 800aa5a:	9304      	str	r3, [sp, #16]
 800aa5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa60:	482c      	ldr	r0, [pc, #176]	; (800ab14 <_vfiprintf_r+0x250>)
 800aa62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa66:	2206      	movs	r2, #6
 800aa68:	f7f5 fbf2 	bl	8000250 <memchr>
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	d03f      	beq.n	800aaf0 <_vfiprintf_r+0x22c>
 800aa70:	4b29      	ldr	r3, [pc, #164]	; (800ab18 <_vfiprintf_r+0x254>)
 800aa72:	bb1b      	cbnz	r3, 800aabc <_vfiprintf_r+0x1f8>
 800aa74:	9b03      	ldr	r3, [sp, #12]
 800aa76:	3307      	adds	r3, #7
 800aa78:	f023 0307 	bic.w	r3, r3, #7
 800aa7c:	3308      	adds	r3, #8
 800aa7e:	9303      	str	r3, [sp, #12]
 800aa80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa82:	443b      	add	r3, r7
 800aa84:	9309      	str	r3, [sp, #36]	; 0x24
 800aa86:	e767      	b.n	800a958 <_vfiprintf_r+0x94>
 800aa88:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa8c:	460c      	mov	r4, r1
 800aa8e:	2001      	movs	r0, #1
 800aa90:	e7a5      	b.n	800a9de <_vfiprintf_r+0x11a>
 800aa92:	2300      	movs	r3, #0
 800aa94:	3401      	adds	r4, #1
 800aa96:	9305      	str	r3, [sp, #20]
 800aa98:	4619      	mov	r1, r3
 800aa9a:	f04f 0c0a 	mov.w	ip, #10
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aaa4:	3a30      	subs	r2, #48	; 0x30
 800aaa6:	2a09      	cmp	r2, #9
 800aaa8:	d903      	bls.n	800aab2 <_vfiprintf_r+0x1ee>
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d0c5      	beq.n	800aa3a <_vfiprintf_r+0x176>
 800aaae:	9105      	str	r1, [sp, #20]
 800aab0:	e7c3      	b.n	800aa3a <_vfiprintf_r+0x176>
 800aab2:	fb0c 2101 	mla	r1, ip, r1, r2
 800aab6:	4604      	mov	r4, r0
 800aab8:	2301      	movs	r3, #1
 800aaba:	e7f0      	b.n	800aa9e <_vfiprintf_r+0x1da>
 800aabc:	ab03      	add	r3, sp, #12
 800aabe:	9300      	str	r3, [sp, #0]
 800aac0:	462a      	mov	r2, r5
 800aac2:	4b16      	ldr	r3, [pc, #88]	; (800ab1c <_vfiprintf_r+0x258>)
 800aac4:	a904      	add	r1, sp, #16
 800aac6:	4630      	mov	r0, r6
 800aac8:	f7fd fd0e 	bl	80084e8 <_printf_float>
 800aacc:	4607      	mov	r7, r0
 800aace:	1c78      	adds	r0, r7, #1
 800aad0:	d1d6      	bne.n	800aa80 <_vfiprintf_r+0x1bc>
 800aad2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aad4:	07d9      	lsls	r1, r3, #31
 800aad6:	d405      	bmi.n	800aae4 <_vfiprintf_r+0x220>
 800aad8:	89ab      	ldrh	r3, [r5, #12]
 800aada:	059a      	lsls	r2, r3, #22
 800aadc:	d402      	bmi.n	800aae4 <_vfiprintf_r+0x220>
 800aade:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aae0:	f000 fab1 	bl	800b046 <__retarget_lock_release_recursive>
 800aae4:	89ab      	ldrh	r3, [r5, #12]
 800aae6:	065b      	lsls	r3, r3, #25
 800aae8:	f53f af12 	bmi.w	800a910 <_vfiprintf_r+0x4c>
 800aaec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aaee:	e711      	b.n	800a914 <_vfiprintf_r+0x50>
 800aaf0:	ab03      	add	r3, sp, #12
 800aaf2:	9300      	str	r3, [sp, #0]
 800aaf4:	462a      	mov	r2, r5
 800aaf6:	4b09      	ldr	r3, [pc, #36]	; (800ab1c <_vfiprintf_r+0x258>)
 800aaf8:	a904      	add	r1, sp, #16
 800aafa:	4630      	mov	r0, r6
 800aafc:	f7fd ff80 	bl	8008a00 <_printf_i>
 800ab00:	e7e4      	b.n	800aacc <_vfiprintf_r+0x208>
 800ab02:	bf00      	nop
 800ab04:	0800c778 	.word	0x0800c778
 800ab08:	0800c798 	.word	0x0800c798
 800ab0c:	0800c758 	.word	0x0800c758
 800ab10:	0800c744 	.word	0x0800c744
 800ab14:	0800c74e 	.word	0x0800c74e
 800ab18:	080084e9 	.word	0x080084e9
 800ab1c:	0800a89f 	.word	0x0800a89f
 800ab20:	0800c74a 	.word	0x0800c74a

0800ab24 <_sbrk_r>:
 800ab24:	b538      	push	{r3, r4, r5, lr}
 800ab26:	4d06      	ldr	r5, [pc, #24]	; (800ab40 <_sbrk_r+0x1c>)
 800ab28:	2300      	movs	r3, #0
 800ab2a:	4604      	mov	r4, r0
 800ab2c:	4608      	mov	r0, r1
 800ab2e:	602b      	str	r3, [r5, #0]
 800ab30:	f7f8 fbfa 	bl	8003328 <_sbrk>
 800ab34:	1c43      	adds	r3, r0, #1
 800ab36:	d102      	bne.n	800ab3e <_sbrk_r+0x1a>
 800ab38:	682b      	ldr	r3, [r5, #0]
 800ab3a:	b103      	cbz	r3, 800ab3e <_sbrk_r+0x1a>
 800ab3c:	6023      	str	r3, [r4, #0]
 800ab3e:	bd38      	pop	{r3, r4, r5, pc}
 800ab40:	200005b4 	.word	0x200005b4

0800ab44 <__swbuf_r>:
 800ab44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab46:	460e      	mov	r6, r1
 800ab48:	4614      	mov	r4, r2
 800ab4a:	4605      	mov	r5, r0
 800ab4c:	b118      	cbz	r0, 800ab56 <__swbuf_r+0x12>
 800ab4e:	6983      	ldr	r3, [r0, #24]
 800ab50:	b90b      	cbnz	r3, 800ab56 <__swbuf_r+0x12>
 800ab52:	f000 f9d9 	bl	800af08 <__sinit>
 800ab56:	4b21      	ldr	r3, [pc, #132]	; (800abdc <__swbuf_r+0x98>)
 800ab58:	429c      	cmp	r4, r3
 800ab5a:	d12b      	bne.n	800abb4 <__swbuf_r+0x70>
 800ab5c:	686c      	ldr	r4, [r5, #4]
 800ab5e:	69a3      	ldr	r3, [r4, #24]
 800ab60:	60a3      	str	r3, [r4, #8]
 800ab62:	89a3      	ldrh	r3, [r4, #12]
 800ab64:	071a      	lsls	r2, r3, #28
 800ab66:	d52f      	bpl.n	800abc8 <__swbuf_r+0x84>
 800ab68:	6923      	ldr	r3, [r4, #16]
 800ab6a:	b36b      	cbz	r3, 800abc8 <__swbuf_r+0x84>
 800ab6c:	6923      	ldr	r3, [r4, #16]
 800ab6e:	6820      	ldr	r0, [r4, #0]
 800ab70:	1ac0      	subs	r0, r0, r3
 800ab72:	6963      	ldr	r3, [r4, #20]
 800ab74:	b2f6      	uxtb	r6, r6
 800ab76:	4283      	cmp	r3, r0
 800ab78:	4637      	mov	r7, r6
 800ab7a:	dc04      	bgt.n	800ab86 <__swbuf_r+0x42>
 800ab7c:	4621      	mov	r1, r4
 800ab7e:	4628      	mov	r0, r5
 800ab80:	f000 f92e 	bl	800ade0 <_fflush_r>
 800ab84:	bb30      	cbnz	r0, 800abd4 <__swbuf_r+0x90>
 800ab86:	68a3      	ldr	r3, [r4, #8]
 800ab88:	3b01      	subs	r3, #1
 800ab8a:	60a3      	str	r3, [r4, #8]
 800ab8c:	6823      	ldr	r3, [r4, #0]
 800ab8e:	1c5a      	adds	r2, r3, #1
 800ab90:	6022      	str	r2, [r4, #0]
 800ab92:	701e      	strb	r6, [r3, #0]
 800ab94:	6963      	ldr	r3, [r4, #20]
 800ab96:	3001      	adds	r0, #1
 800ab98:	4283      	cmp	r3, r0
 800ab9a:	d004      	beq.n	800aba6 <__swbuf_r+0x62>
 800ab9c:	89a3      	ldrh	r3, [r4, #12]
 800ab9e:	07db      	lsls	r3, r3, #31
 800aba0:	d506      	bpl.n	800abb0 <__swbuf_r+0x6c>
 800aba2:	2e0a      	cmp	r6, #10
 800aba4:	d104      	bne.n	800abb0 <__swbuf_r+0x6c>
 800aba6:	4621      	mov	r1, r4
 800aba8:	4628      	mov	r0, r5
 800abaa:	f000 f919 	bl	800ade0 <_fflush_r>
 800abae:	b988      	cbnz	r0, 800abd4 <__swbuf_r+0x90>
 800abb0:	4638      	mov	r0, r7
 800abb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abb4:	4b0a      	ldr	r3, [pc, #40]	; (800abe0 <__swbuf_r+0x9c>)
 800abb6:	429c      	cmp	r4, r3
 800abb8:	d101      	bne.n	800abbe <__swbuf_r+0x7a>
 800abba:	68ac      	ldr	r4, [r5, #8]
 800abbc:	e7cf      	b.n	800ab5e <__swbuf_r+0x1a>
 800abbe:	4b09      	ldr	r3, [pc, #36]	; (800abe4 <__swbuf_r+0xa0>)
 800abc0:	429c      	cmp	r4, r3
 800abc2:	bf08      	it	eq
 800abc4:	68ec      	ldreq	r4, [r5, #12]
 800abc6:	e7ca      	b.n	800ab5e <__swbuf_r+0x1a>
 800abc8:	4621      	mov	r1, r4
 800abca:	4628      	mov	r0, r5
 800abcc:	f000 f80c 	bl	800abe8 <__swsetup_r>
 800abd0:	2800      	cmp	r0, #0
 800abd2:	d0cb      	beq.n	800ab6c <__swbuf_r+0x28>
 800abd4:	f04f 37ff 	mov.w	r7, #4294967295
 800abd8:	e7ea      	b.n	800abb0 <__swbuf_r+0x6c>
 800abda:	bf00      	nop
 800abdc:	0800c778 	.word	0x0800c778
 800abe0:	0800c798 	.word	0x0800c798
 800abe4:	0800c758 	.word	0x0800c758

0800abe8 <__swsetup_r>:
 800abe8:	4b32      	ldr	r3, [pc, #200]	; (800acb4 <__swsetup_r+0xcc>)
 800abea:	b570      	push	{r4, r5, r6, lr}
 800abec:	681d      	ldr	r5, [r3, #0]
 800abee:	4606      	mov	r6, r0
 800abf0:	460c      	mov	r4, r1
 800abf2:	b125      	cbz	r5, 800abfe <__swsetup_r+0x16>
 800abf4:	69ab      	ldr	r3, [r5, #24]
 800abf6:	b913      	cbnz	r3, 800abfe <__swsetup_r+0x16>
 800abf8:	4628      	mov	r0, r5
 800abfa:	f000 f985 	bl	800af08 <__sinit>
 800abfe:	4b2e      	ldr	r3, [pc, #184]	; (800acb8 <__swsetup_r+0xd0>)
 800ac00:	429c      	cmp	r4, r3
 800ac02:	d10f      	bne.n	800ac24 <__swsetup_r+0x3c>
 800ac04:	686c      	ldr	r4, [r5, #4]
 800ac06:	89a3      	ldrh	r3, [r4, #12]
 800ac08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac0c:	0719      	lsls	r1, r3, #28
 800ac0e:	d42c      	bmi.n	800ac6a <__swsetup_r+0x82>
 800ac10:	06dd      	lsls	r5, r3, #27
 800ac12:	d411      	bmi.n	800ac38 <__swsetup_r+0x50>
 800ac14:	2309      	movs	r3, #9
 800ac16:	6033      	str	r3, [r6, #0]
 800ac18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ac1c:	81a3      	strh	r3, [r4, #12]
 800ac1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac22:	e03e      	b.n	800aca2 <__swsetup_r+0xba>
 800ac24:	4b25      	ldr	r3, [pc, #148]	; (800acbc <__swsetup_r+0xd4>)
 800ac26:	429c      	cmp	r4, r3
 800ac28:	d101      	bne.n	800ac2e <__swsetup_r+0x46>
 800ac2a:	68ac      	ldr	r4, [r5, #8]
 800ac2c:	e7eb      	b.n	800ac06 <__swsetup_r+0x1e>
 800ac2e:	4b24      	ldr	r3, [pc, #144]	; (800acc0 <__swsetup_r+0xd8>)
 800ac30:	429c      	cmp	r4, r3
 800ac32:	bf08      	it	eq
 800ac34:	68ec      	ldreq	r4, [r5, #12]
 800ac36:	e7e6      	b.n	800ac06 <__swsetup_r+0x1e>
 800ac38:	0758      	lsls	r0, r3, #29
 800ac3a:	d512      	bpl.n	800ac62 <__swsetup_r+0x7a>
 800ac3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac3e:	b141      	cbz	r1, 800ac52 <__swsetup_r+0x6a>
 800ac40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac44:	4299      	cmp	r1, r3
 800ac46:	d002      	beq.n	800ac4e <__swsetup_r+0x66>
 800ac48:	4630      	mov	r0, r6
 800ac4a:	f7ff fbd5 	bl	800a3f8 <_free_r>
 800ac4e:	2300      	movs	r3, #0
 800ac50:	6363      	str	r3, [r4, #52]	; 0x34
 800ac52:	89a3      	ldrh	r3, [r4, #12]
 800ac54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac58:	81a3      	strh	r3, [r4, #12]
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	6063      	str	r3, [r4, #4]
 800ac5e:	6923      	ldr	r3, [r4, #16]
 800ac60:	6023      	str	r3, [r4, #0]
 800ac62:	89a3      	ldrh	r3, [r4, #12]
 800ac64:	f043 0308 	orr.w	r3, r3, #8
 800ac68:	81a3      	strh	r3, [r4, #12]
 800ac6a:	6923      	ldr	r3, [r4, #16]
 800ac6c:	b94b      	cbnz	r3, 800ac82 <__swsetup_r+0x9a>
 800ac6e:	89a3      	ldrh	r3, [r4, #12]
 800ac70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac78:	d003      	beq.n	800ac82 <__swsetup_r+0x9a>
 800ac7a:	4621      	mov	r1, r4
 800ac7c:	4630      	mov	r0, r6
 800ac7e:	f000 fa09 	bl	800b094 <__smakebuf_r>
 800ac82:	89a0      	ldrh	r0, [r4, #12]
 800ac84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac88:	f010 0301 	ands.w	r3, r0, #1
 800ac8c:	d00a      	beq.n	800aca4 <__swsetup_r+0xbc>
 800ac8e:	2300      	movs	r3, #0
 800ac90:	60a3      	str	r3, [r4, #8]
 800ac92:	6963      	ldr	r3, [r4, #20]
 800ac94:	425b      	negs	r3, r3
 800ac96:	61a3      	str	r3, [r4, #24]
 800ac98:	6923      	ldr	r3, [r4, #16]
 800ac9a:	b943      	cbnz	r3, 800acae <__swsetup_r+0xc6>
 800ac9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aca0:	d1ba      	bne.n	800ac18 <__swsetup_r+0x30>
 800aca2:	bd70      	pop	{r4, r5, r6, pc}
 800aca4:	0781      	lsls	r1, r0, #30
 800aca6:	bf58      	it	pl
 800aca8:	6963      	ldrpl	r3, [r4, #20]
 800acaa:	60a3      	str	r3, [r4, #8]
 800acac:	e7f4      	b.n	800ac98 <__swsetup_r+0xb0>
 800acae:	2000      	movs	r0, #0
 800acb0:	e7f7      	b.n	800aca2 <__swsetup_r+0xba>
 800acb2:	bf00      	nop
 800acb4:	20000060 	.word	0x20000060
 800acb8:	0800c778 	.word	0x0800c778
 800acbc:	0800c798 	.word	0x0800c798
 800acc0:	0800c758 	.word	0x0800c758

0800acc4 <abort>:
 800acc4:	b508      	push	{r3, lr}
 800acc6:	2006      	movs	r0, #6
 800acc8:	f000 fab4 	bl	800b234 <raise>
 800accc:	2001      	movs	r0, #1
 800acce:	f7f8 fab3 	bl	8003238 <_exit>
	...

0800acd4 <__sflush_r>:
 800acd4:	898a      	ldrh	r2, [r1, #12]
 800acd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acda:	4605      	mov	r5, r0
 800acdc:	0710      	lsls	r0, r2, #28
 800acde:	460c      	mov	r4, r1
 800ace0:	d458      	bmi.n	800ad94 <__sflush_r+0xc0>
 800ace2:	684b      	ldr	r3, [r1, #4]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	dc05      	bgt.n	800acf4 <__sflush_r+0x20>
 800ace8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800acea:	2b00      	cmp	r3, #0
 800acec:	dc02      	bgt.n	800acf4 <__sflush_r+0x20>
 800acee:	2000      	movs	r0, #0
 800acf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acf6:	2e00      	cmp	r6, #0
 800acf8:	d0f9      	beq.n	800acee <__sflush_r+0x1a>
 800acfa:	2300      	movs	r3, #0
 800acfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad00:	682f      	ldr	r7, [r5, #0]
 800ad02:	602b      	str	r3, [r5, #0]
 800ad04:	d032      	beq.n	800ad6c <__sflush_r+0x98>
 800ad06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad08:	89a3      	ldrh	r3, [r4, #12]
 800ad0a:	075a      	lsls	r2, r3, #29
 800ad0c:	d505      	bpl.n	800ad1a <__sflush_r+0x46>
 800ad0e:	6863      	ldr	r3, [r4, #4]
 800ad10:	1ac0      	subs	r0, r0, r3
 800ad12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad14:	b10b      	cbz	r3, 800ad1a <__sflush_r+0x46>
 800ad16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad18:	1ac0      	subs	r0, r0, r3
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad20:	6a21      	ldr	r1, [r4, #32]
 800ad22:	4628      	mov	r0, r5
 800ad24:	47b0      	blx	r6
 800ad26:	1c43      	adds	r3, r0, #1
 800ad28:	89a3      	ldrh	r3, [r4, #12]
 800ad2a:	d106      	bne.n	800ad3a <__sflush_r+0x66>
 800ad2c:	6829      	ldr	r1, [r5, #0]
 800ad2e:	291d      	cmp	r1, #29
 800ad30:	d82c      	bhi.n	800ad8c <__sflush_r+0xb8>
 800ad32:	4a2a      	ldr	r2, [pc, #168]	; (800addc <__sflush_r+0x108>)
 800ad34:	40ca      	lsrs	r2, r1
 800ad36:	07d6      	lsls	r6, r2, #31
 800ad38:	d528      	bpl.n	800ad8c <__sflush_r+0xb8>
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	6062      	str	r2, [r4, #4]
 800ad3e:	04d9      	lsls	r1, r3, #19
 800ad40:	6922      	ldr	r2, [r4, #16]
 800ad42:	6022      	str	r2, [r4, #0]
 800ad44:	d504      	bpl.n	800ad50 <__sflush_r+0x7c>
 800ad46:	1c42      	adds	r2, r0, #1
 800ad48:	d101      	bne.n	800ad4e <__sflush_r+0x7a>
 800ad4a:	682b      	ldr	r3, [r5, #0]
 800ad4c:	b903      	cbnz	r3, 800ad50 <__sflush_r+0x7c>
 800ad4e:	6560      	str	r0, [r4, #84]	; 0x54
 800ad50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad52:	602f      	str	r7, [r5, #0]
 800ad54:	2900      	cmp	r1, #0
 800ad56:	d0ca      	beq.n	800acee <__sflush_r+0x1a>
 800ad58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad5c:	4299      	cmp	r1, r3
 800ad5e:	d002      	beq.n	800ad66 <__sflush_r+0x92>
 800ad60:	4628      	mov	r0, r5
 800ad62:	f7ff fb49 	bl	800a3f8 <_free_r>
 800ad66:	2000      	movs	r0, #0
 800ad68:	6360      	str	r0, [r4, #52]	; 0x34
 800ad6a:	e7c1      	b.n	800acf0 <__sflush_r+0x1c>
 800ad6c:	6a21      	ldr	r1, [r4, #32]
 800ad6e:	2301      	movs	r3, #1
 800ad70:	4628      	mov	r0, r5
 800ad72:	47b0      	blx	r6
 800ad74:	1c41      	adds	r1, r0, #1
 800ad76:	d1c7      	bne.n	800ad08 <__sflush_r+0x34>
 800ad78:	682b      	ldr	r3, [r5, #0]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d0c4      	beq.n	800ad08 <__sflush_r+0x34>
 800ad7e:	2b1d      	cmp	r3, #29
 800ad80:	d001      	beq.n	800ad86 <__sflush_r+0xb2>
 800ad82:	2b16      	cmp	r3, #22
 800ad84:	d101      	bne.n	800ad8a <__sflush_r+0xb6>
 800ad86:	602f      	str	r7, [r5, #0]
 800ad88:	e7b1      	b.n	800acee <__sflush_r+0x1a>
 800ad8a:	89a3      	ldrh	r3, [r4, #12]
 800ad8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad90:	81a3      	strh	r3, [r4, #12]
 800ad92:	e7ad      	b.n	800acf0 <__sflush_r+0x1c>
 800ad94:	690f      	ldr	r7, [r1, #16]
 800ad96:	2f00      	cmp	r7, #0
 800ad98:	d0a9      	beq.n	800acee <__sflush_r+0x1a>
 800ad9a:	0793      	lsls	r3, r2, #30
 800ad9c:	680e      	ldr	r6, [r1, #0]
 800ad9e:	bf08      	it	eq
 800ada0:	694b      	ldreq	r3, [r1, #20]
 800ada2:	600f      	str	r7, [r1, #0]
 800ada4:	bf18      	it	ne
 800ada6:	2300      	movne	r3, #0
 800ada8:	eba6 0807 	sub.w	r8, r6, r7
 800adac:	608b      	str	r3, [r1, #8]
 800adae:	f1b8 0f00 	cmp.w	r8, #0
 800adb2:	dd9c      	ble.n	800acee <__sflush_r+0x1a>
 800adb4:	6a21      	ldr	r1, [r4, #32]
 800adb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800adb8:	4643      	mov	r3, r8
 800adba:	463a      	mov	r2, r7
 800adbc:	4628      	mov	r0, r5
 800adbe:	47b0      	blx	r6
 800adc0:	2800      	cmp	r0, #0
 800adc2:	dc06      	bgt.n	800add2 <__sflush_r+0xfe>
 800adc4:	89a3      	ldrh	r3, [r4, #12]
 800adc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adca:	81a3      	strh	r3, [r4, #12]
 800adcc:	f04f 30ff 	mov.w	r0, #4294967295
 800add0:	e78e      	b.n	800acf0 <__sflush_r+0x1c>
 800add2:	4407      	add	r7, r0
 800add4:	eba8 0800 	sub.w	r8, r8, r0
 800add8:	e7e9      	b.n	800adae <__sflush_r+0xda>
 800adda:	bf00      	nop
 800addc:	20400001 	.word	0x20400001

0800ade0 <_fflush_r>:
 800ade0:	b538      	push	{r3, r4, r5, lr}
 800ade2:	690b      	ldr	r3, [r1, #16]
 800ade4:	4605      	mov	r5, r0
 800ade6:	460c      	mov	r4, r1
 800ade8:	b913      	cbnz	r3, 800adf0 <_fflush_r+0x10>
 800adea:	2500      	movs	r5, #0
 800adec:	4628      	mov	r0, r5
 800adee:	bd38      	pop	{r3, r4, r5, pc}
 800adf0:	b118      	cbz	r0, 800adfa <_fflush_r+0x1a>
 800adf2:	6983      	ldr	r3, [r0, #24]
 800adf4:	b90b      	cbnz	r3, 800adfa <_fflush_r+0x1a>
 800adf6:	f000 f887 	bl	800af08 <__sinit>
 800adfa:	4b14      	ldr	r3, [pc, #80]	; (800ae4c <_fflush_r+0x6c>)
 800adfc:	429c      	cmp	r4, r3
 800adfe:	d11b      	bne.n	800ae38 <_fflush_r+0x58>
 800ae00:	686c      	ldr	r4, [r5, #4]
 800ae02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d0ef      	beq.n	800adea <_fflush_r+0xa>
 800ae0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae0c:	07d0      	lsls	r0, r2, #31
 800ae0e:	d404      	bmi.n	800ae1a <_fflush_r+0x3a>
 800ae10:	0599      	lsls	r1, r3, #22
 800ae12:	d402      	bmi.n	800ae1a <_fflush_r+0x3a>
 800ae14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae16:	f000 f915 	bl	800b044 <__retarget_lock_acquire_recursive>
 800ae1a:	4628      	mov	r0, r5
 800ae1c:	4621      	mov	r1, r4
 800ae1e:	f7ff ff59 	bl	800acd4 <__sflush_r>
 800ae22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae24:	07da      	lsls	r2, r3, #31
 800ae26:	4605      	mov	r5, r0
 800ae28:	d4e0      	bmi.n	800adec <_fflush_r+0xc>
 800ae2a:	89a3      	ldrh	r3, [r4, #12]
 800ae2c:	059b      	lsls	r3, r3, #22
 800ae2e:	d4dd      	bmi.n	800adec <_fflush_r+0xc>
 800ae30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae32:	f000 f908 	bl	800b046 <__retarget_lock_release_recursive>
 800ae36:	e7d9      	b.n	800adec <_fflush_r+0xc>
 800ae38:	4b05      	ldr	r3, [pc, #20]	; (800ae50 <_fflush_r+0x70>)
 800ae3a:	429c      	cmp	r4, r3
 800ae3c:	d101      	bne.n	800ae42 <_fflush_r+0x62>
 800ae3e:	68ac      	ldr	r4, [r5, #8]
 800ae40:	e7df      	b.n	800ae02 <_fflush_r+0x22>
 800ae42:	4b04      	ldr	r3, [pc, #16]	; (800ae54 <_fflush_r+0x74>)
 800ae44:	429c      	cmp	r4, r3
 800ae46:	bf08      	it	eq
 800ae48:	68ec      	ldreq	r4, [r5, #12]
 800ae4a:	e7da      	b.n	800ae02 <_fflush_r+0x22>
 800ae4c:	0800c778 	.word	0x0800c778
 800ae50:	0800c798 	.word	0x0800c798
 800ae54:	0800c758 	.word	0x0800c758

0800ae58 <std>:
 800ae58:	2300      	movs	r3, #0
 800ae5a:	b510      	push	{r4, lr}
 800ae5c:	4604      	mov	r4, r0
 800ae5e:	e9c0 3300 	strd	r3, r3, [r0]
 800ae62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae66:	6083      	str	r3, [r0, #8]
 800ae68:	8181      	strh	r1, [r0, #12]
 800ae6a:	6643      	str	r3, [r0, #100]	; 0x64
 800ae6c:	81c2      	strh	r2, [r0, #14]
 800ae6e:	6183      	str	r3, [r0, #24]
 800ae70:	4619      	mov	r1, r3
 800ae72:	2208      	movs	r2, #8
 800ae74:	305c      	adds	r0, #92	; 0x5c
 800ae76:	f7fd fa9f 	bl	80083b8 <memset>
 800ae7a:	4b05      	ldr	r3, [pc, #20]	; (800ae90 <std+0x38>)
 800ae7c:	6263      	str	r3, [r4, #36]	; 0x24
 800ae7e:	4b05      	ldr	r3, [pc, #20]	; (800ae94 <std+0x3c>)
 800ae80:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae82:	4b05      	ldr	r3, [pc, #20]	; (800ae98 <std+0x40>)
 800ae84:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae86:	4b05      	ldr	r3, [pc, #20]	; (800ae9c <std+0x44>)
 800ae88:	6224      	str	r4, [r4, #32]
 800ae8a:	6323      	str	r3, [r4, #48]	; 0x30
 800ae8c:	bd10      	pop	{r4, pc}
 800ae8e:	bf00      	nop
 800ae90:	0800b26d 	.word	0x0800b26d
 800ae94:	0800b28f 	.word	0x0800b28f
 800ae98:	0800b2c7 	.word	0x0800b2c7
 800ae9c:	0800b2eb 	.word	0x0800b2eb

0800aea0 <_cleanup_r>:
 800aea0:	4901      	ldr	r1, [pc, #4]	; (800aea8 <_cleanup_r+0x8>)
 800aea2:	f000 b8af 	b.w	800b004 <_fwalk_reent>
 800aea6:	bf00      	nop
 800aea8:	0800ade1 	.word	0x0800ade1

0800aeac <__sfmoreglue>:
 800aeac:	b570      	push	{r4, r5, r6, lr}
 800aeae:	2268      	movs	r2, #104	; 0x68
 800aeb0:	1e4d      	subs	r5, r1, #1
 800aeb2:	4355      	muls	r5, r2
 800aeb4:	460e      	mov	r6, r1
 800aeb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aeba:	f7ff fb09 	bl	800a4d0 <_malloc_r>
 800aebe:	4604      	mov	r4, r0
 800aec0:	b140      	cbz	r0, 800aed4 <__sfmoreglue+0x28>
 800aec2:	2100      	movs	r1, #0
 800aec4:	e9c0 1600 	strd	r1, r6, [r0]
 800aec8:	300c      	adds	r0, #12
 800aeca:	60a0      	str	r0, [r4, #8]
 800aecc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aed0:	f7fd fa72 	bl	80083b8 <memset>
 800aed4:	4620      	mov	r0, r4
 800aed6:	bd70      	pop	{r4, r5, r6, pc}

0800aed8 <__sfp_lock_acquire>:
 800aed8:	4801      	ldr	r0, [pc, #4]	; (800aee0 <__sfp_lock_acquire+0x8>)
 800aeda:	f000 b8b3 	b.w	800b044 <__retarget_lock_acquire_recursive>
 800aede:	bf00      	nop
 800aee0:	200005b1 	.word	0x200005b1

0800aee4 <__sfp_lock_release>:
 800aee4:	4801      	ldr	r0, [pc, #4]	; (800aeec <__sfp_lock_release+0x8>)
 800aee6:	f000 b8ae 	b.w	800b046 <__retarget_lock_release_recursive>
 800aeea:	bf00      	nop
 800aeec:	200005b1 	.word	0x200005b1

0800aef0 <__sinit_lock_acquire>:
 800aef0:	4801      	ldr	r0, [pc, #4]	; (800aef8 <__sinit_lock_acquire+0x8>)
 800aef2:	f000 b8a7 	b.w	800b044 <__retarget_lock_acquire_recursive>
 800aef6:	bf00      	nop
 800aef8:	200005b2 	.word	0x200005b2

0800aefc <__sinit_lock_release>:
 800aefc:	4801      	ldr	r0, [pc, #4]	; (800af04 <__sinit_lock_release+0x8>)
 800aefe:	f000 b8a2 	b.w	800b046 <__retarget_lock_release_recursive>
 800af02:	bf00      	nop
 800af04:	200005b2 	.word	0x200005b2

0800af08 <__sinit>:
 800af08:	b510      	push	{r4, lr}
 800af0a:	4604      	mov	r4, r0
 800af0c:	f7ff fff0 	bl	800aef0 <__sinit_lock_acquire>
 800af10:	69a3      	ldr	r3, [r4, #24]
 800af12:	b11b      	cbz	r3, 800af1c <__sinit+0x14>
 800af14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af18:	f7ff bff0 	b.w	800aefc <__sinit_lock_release>
 800af1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800af20:	6523      	str	r3, [r4, #80]	; 0x50
 800af22:	4b13      	ldr	r3, [pc, #76]	; (800af70 <__sinit+0x68>)
 800af24:	4a13      	ldr	r2, [pc, #76]	; (800af74 <__sinit+0x6c>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	62a2      	str	r2, [r4, #40]	; 0x28
 800af2a:	42a3      	cmp	r3, r4
 800af2c:	bf04      	itt	eq
 800af2e:	2301      	moveq	r3, #1
 800af30:	61a3      	streq	r3, [r4, #24]
 800af32:	4620      	mov	r0, r4
 800af34:	f000 f820 	bl	800af78 <__sfp>
 800af38:	6060      	str	r0, [r4, #4]
 800af3a:	4620      	mov	r0, r4
 800af3c:	f000 f81c 	bl	800af78 <__sfp>
 800af40:	60a0      	str	r0, [r4, #8]
 800af42:	4620      	mov	r0, r4
 800af44:	f000 f818 	bl	800af78 <__sfp>
 800af48:	2200      	movs	r2, #0
 800af4a:	60e0      	str	r0, [r4, #12]
 800af4c:	2104      	movs	r1, #4
 800af4e:	6860      	ldr	r0, [r4, #4]
 800af50:	f7ff ff82 	bl	800ae58 <std>
 800af54:	68a0      	ldr	r0, [r4, #8]
 800af56:	2201      	movs	r2, #1
 800af58:	2109      	movs	r1, #9
 800af5a:	f7ff ff7d 	bl	800ae58 <std>
 800af5e:	68e0      	ldr	r0, [r4, #12]
 800af60:	2202      	movs	r2, #2
 800af62:	2112      	movs	r1, #18
 800af64:	f7ff ff78 	bl	800ae58 <std>
 800af68:	2301      	movs	r3, #1
 800af6a:	61a3      	str	r3, [r4, #24]
 800af6c:	e7d2      	b.n	800af14 <__sinit+0xc>
 800af6e:	bf00      	nop
 800af70:	0800c488 	.word	0x0800c488
 800af74:	0800aea1 	.word	0x0800aea1

0800af78 <__sfp>:
 800af78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af7a:	4607      	mov	r7, r0
 800af7c:	f7ff ffac 	bl	800aed8 <__sfp_lock_acquire>
 800af80:	4b1e      	ldr	r3, [pc, #120]	; (800affc <__sfp+0x84>)
 800af82:	681e      	ldr	r6, [r3, #0]
 800af84:	69b3      	ldr	r3, [r6, #24]
 800af86:	b913      	cbnz	r3, 800af8e <__sfp+0x16>
 800af88:	4630      	mov	r0, r6
 800af8a:	f7ff ffbd 	bl	800af08 <__sinit>
 800af8e:	3648      	adds	r6, #72	; 0x48
 800af90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800af94:	3b01      	subs	r3, #1
 800af96:	d503      	bpl.n	800afa0 <__sfp+0x28>
 800af98:	6833      	ldr	r3, [r6, #0]
 800af9a:	b30b      	cbz	r3, 800afe0 <__sfp+0x68>
 800af9c:	6836      	ldr	r6, [r6, #0]
 800af9e:	e7f7      	b.n	800af90 <__sfp+0x18>
 800afa0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800afa4:	b9d5      	cbnz	r5, 800afdc <__sfp+0x64>
 800afa6:	4b16      	ldr	r3, [pc, #88]	; (800b000 <__sfp+0x88>)
 800afa8:	60e3      	str	r3, [r4, #12]
 800afaa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800afae:	6665      	str	r5, [r4, #100]	; 0x64
 800afb0:	f000 f847 	bl	800b042 <__retarget_lock_init_recursive>
 800afb4:	f7ff ff96 	bl	800aee4 <__sfp_lock_release>
 800afb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800afbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800afc0:	6025      	str	r5, [r4, #0]
 800afc2:	61a5      	str	r5, [r4, #24]
 800afc4:	2208      	movs	r2, #8
 800afc6:	4629      	mov	r1, r5
 800afc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800afcc:	f7fd f9f4 	bl	80083b8 <memset>
 800afd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800afd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800afd8:	4620      	mov	r0, r4
 800afda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afdc:	3468      	adds	r4, #104	; 0x68
 800afde:	e7d9      	b.n	800af94 <__sfp+0x1c>
 800afe0:	2104      	movs	r1, #4
 800afe2:	4638      	mov	r0, r7
 800afe4:	f7ff ff62 	bl	800aeac <__sfmoreglue>
 800afe8:	4604      	mov	r4, r0
 800afea:	6030      	str	r0, [r6, #0]
 800afec:	2800      	cmp	r0, #0
 800afee:	d1d5      	bne.n	800af9c <__sfp+0x24>
 800aff0:	f7ff ff78 	bl	800aee4 <__sfp_lock_release>
 800aff4:	230c      	movs	r3, #12
 800aff6:	603b      	str	r3, [r7, #0]
 800aff8:	e7ee      	b.n	800afd8 <__sfp+0x60>
 800affa:	bf00      	nop
 800affc:	0800c488 	.word	0x0800c488
 800b000:	ffff0001 	.word	0xffff0001

0800b004 <_fwalk_reent>:
 800b004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b008:	4606      	mov	r6, r0
 800b00a:	4688      	mov	r8, r1
 800b00c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b010:	2700      	movs	r7, #0
 800b012:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b016:	f1b9 0901 	subs.w	r9, r9, #1
 800b01a:	d505      	bpl.n	800b028 <_fwalk_reent+0x24>
 800b01c:	6824      	ldr	r4, [r4, #0]
 800b01e:	2c00      	cmp	r4, #0
 800b020:	d1f7      	bne.n	800b012 <_fwalk_reent+0xe>
 800b022:	4638      	mov	r0, r7
 800b024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b028:	89ab      	ldrh	r3, [r5, #12]
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	d907      	bls.n	800b03e <_fwalk_reent+0x3a>
 800b02e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b032:	3301      	adds	r3, #1
 800b034:	d003      	beq.n	800b03e <_fwalk_reent+0x3a>
 800b036:	4629      	mov	r1, r5
 800b038:	4630      	mov	r0, r6
 800b03a:	47c0      	blx	r8
 800b03c:	4307      	orrs	r7, r0
 800b03e:	3568      	adds	r5, #104	; 0x68
 800b040:	e7e9      	b.n	800b016 <_fwalk_reent+0x12>

0800b042 <__retarget_lock_init_recursive>:
 800b042:	4770      	bx	lr

0800b044 <__retarget_lock_acquire_recursive>:
 800b044:	4770      	bx	lr

0800b046 <__retarget_lock_release_recursive>:
 800b046:	4770      	bx	lr

0800b048 <__swhatbuf_r>:
 800b048:	b570      	push	{r4, r5, r6, lr}
 800b04a:	460e      	mov	r6, r1
 800b04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b050:	2900      	cmp	r1, #0
 800b052:	b096      	sub	sp, #88	; 0x58
 800b054:	4614      	mov	r4, r2
 800b056:	461d      	mov	r5, r3
 800b058:	da08      	bge.n	800b06c <__swhatbuf_r+0x24>
 800b05a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b05e:	2200      	movs	r2, #0
 800b060:	602a      	str	r2, [r5, #0]
 800b062:	061a      	lsls	r2, r3, #24
 800b064:	d410      	bmi.n	800b088 <__swhatbuf_r+0x40>
 800b066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b06a:	e00e      	b.n	800b08a <__swhatbuf_r+0x42>
 800b06c:	466a      	mov	r2, sp
 800b06e:	f000 f96f 	bl	800b350 <_fstat_r>
 800b072:	2800      	cmp	r0, #0
 800b074:	dbf1      	blt.n	800b05a <__swhatbuf_r+0x12>
 800b076:	9a01      	ldr	r2, [sp, #4]
 800b078:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b07c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b080:	425a      	negs	r2, r3
 800b082:	415a      	adcs	r2, r3
 800b084:	602a      	str	r2, [r5, #0]
 800b086:	e7ee      	b.n	800b066 <__swhatbuf_r+0x1e>
 800b088:	2340      	movs	r3, #64	; 0x40
 800b08a:	2000      	movs	r0, #0
 800b08c:	6023      	str	r3, [r4, #0]
 800b08e:	b016      	add	sp, #88	; 0x58
 800b090:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b094 <__smakebuf_r>:
 800b094:	898b      	ldrh	r3, [r1, #12]
 800b096:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b098:	079d      	lsls	r5, r3, #30
 800b09a:	4606      	mov	r6, r0
 800b09c:	460c      	mov	r4, r1
 800b09e:	d507      	bpl.n	800b0b0 <__smakebuf_r+0x1c>
 800b0a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b0a4:	6023      	str	r3, [r4, #0]
 800b0a6:	6123      	str	r3, [r4, #16]
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	6163      	str	r3, [r4, #20]
 800b0ac:	b002      	add	sp, #8
 800b0ae:	bd70      	pop	{r4, r5, r6, pc}
 800b0b0:	ab01      	add	r3, sp, #4
 800b0b2:	466a      	mov	r2, sp
 800b0b4:	f7ff ffc8 	bl	800b048 <__swhatbuf_r>
 800b0b8:	9900      	ldr	r1, [sp, #0]
 800b0ba:	4605      	mov	r5, r0
 800b0bc:	4630      	mov	r0, r6
 800b0be:	f7ff fa07 	bl	800a4d0 <_malloc_r>
 800b0c2:	b948      	cbnz	r0, 800b0d8 <__smakebuf_r+0x44>
 800b0c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0c8:	059a      	lsls	r2, r3, #22
 800b0ca:	d4ef      	bmi.n	800b0ac <__smakebuf_r+0x18>
 800b0cc:	f023 0303 	bic.w	r3, r3, #3
 800b0d0:	f043 0302 	orr.w	r3, r3, #2
 800b0d4:	81a3      	strh	r3, [r4, #12]
 800b0d6:	e7e3      	b.n	800b0a0 <__smakebuf_r+0xc>
 800b0d8:	4b0d      	ldr	r3, [pc, #52]	; (800b110 <__smakebuf_r+0x7c>)
 800b0da:	62b3      	str	r3, [r6, #40]	; 0x28
 800b0dc:	89a3      	ldrh	r3, [r4, #12]
 800b0de:	6020      	str	r0, [r4, #0]
 800b0e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0e4:	81a3      	strh	r3, [r4, #12]
 800b0e6:	9b00      	ldr	r3, [sp, #0]
 800b0e8:	6163      	str	r3, [r4, #20]
 800b0ea:	9b01      	ldr	r3, [sp, #4]
 800b0ec:	6120      	str	r0, [r4, #16]
 800b0ee:	b15b      	cbz	r3, 800b108 <__smakebuf_r+0x74>
 800b0f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	f000 f93d 	bl	800b374 <_isatty_r>
 800b0fa:	b128      	cbz	r0, 800b108 <__smakebuf_r+0x74>
 800b0fc:	89a3      	ldrh	r3, [r4, #12]
 800b0fe:	f023 0303 	bic.w	r3, r3, #3
 800b102:	f043 0301 	orr.w	r3, r3, #1
 800b106:	81a3      	strh	r3, [r4, #12]
 800b108:	89a0      	ldrh	r0, [r4, #12]
 800b10a:	4305      	orrs	r5, r0
 800b10c:	81a5      	strh	r5, [r4, #12]
 800b10e:	e7cd      	b.n	800b0ac <__smakebuf_r+0x18>
 800b110:	0800aea1 	.word	0x0800aea1

0800b114 <__ascii_mbtowc>:
 800b114:	b082      	sub	sp, #8
 800b116:	b901      	cbnz	r1, 800b11a <__ascii_mbtowc+0x6>
 800b118:	a901      	add	r1, sp, #4
 800b11a:	b142      	cbz	r2, 800b12e <__ascii_mbtowc+0x1a>
 800b11c:	b14b      	cbz	r3, 800b132 <__ascii_mbtowc+0x1e>
 800b11e:	7813      	ldrb	r3, [r2, #0]
 800b120:	600b      	str	r3, [r1, #0]
 800b122:	7812      	ldrb	r2, [r2, #0]
 800b124:	1e10      	subs	r0, r2, #0
 800b126:	bf18      	it	ne
 800b128:	2001      	movne	r0, #1
 800b12a:	b002      	add	sp, #8
 800b12c:	4770      	bx	lr
 800b12e:	4610      	mov	r0, r2
 800b130:	e7fb      	b.n	800b12a <__ascii_mbtowc+0x16>
 800b132:	f06f 0001 	mvn.w	r0, #1
 800b136:	e7f8      	b.n	800b12a <__ascii_mbtowc+0x16>

0800b138 <memmove>:
 800b138:	4288      	cmp	r0, r1
 800b13a:	b510      	push	{r4, lr}
 800b13c:	eb01 0402 	add.w	r4, r1, r2
 800b140:	d902      	bls.n	800b148 <memmove+0x10>
 800b142:	4284      	cmp	r4, r0
 800b144:	4623      	mov	r3, r4
 800b146:	d807      	bhi.n	800b158 <memmove+0x20>
 800b148:	1e43      	subs	r3, r0, #1
 800b14a:	42a1      	cmp	r1, r4
 800b14c:	d008      	beq.n	800b160 <memmove+0x28>
 800b14e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b152:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b156:	e7f8      	b.n	800b14a <memmove+0x12>
 800b158:	4402      	add	r2, r0
 800b15a:	4601      	mov	r1, r0
 800b15c:	428a      	cmp	r2, r1
 800b15e:	d100      	bne.n	800b162 <memmove+0x2a>
 800b160:	bd10      	pop	{r4, pc}
 800b162:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b166:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b16a:	e7f7      	b.n	800b15c <memmove+0x24>

0800b16c <__malloc_lock>:
 800b16c:	4801      	ldr	r0, [pc, #4]	; (800b174 <__malloc_lock+0x8>)
 800b16e:	f7ff bf69 	b.w	800b044 <__retarget_lock_acquire_recursive>
 800b172:	bf00      	nop
 800b174:	200005b0 	.word	0x200005b0

0800b178 <__malloc_unlock>:
 800b178:	4801      	ldr	r0, [pc, #4]	; (800b180 <__malloc_unlock+0x8>)
 800b17a:	f7ff bf64 	b.w	800b046 <__retarget_lock_release_recursive>
 800b17e:	bf00      	nop
 800b180:	200005b0 	.word	0x200005b0

0800b184 <_realloc_r>:
 800b184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b188:	4680      	mov	r8, r0
 800b18a:	4614      	mov	r4, r2
 800b18c:	460e      	mov	r6, r1
 800b18e:	b921      	cbnz	r1, 800b19a <_realloc_r+0x16>
 800b190:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b194:	4611      	mov	r1, r2
 800b196:	f7ff b99b 	b.w	800a4d0 <_malloc_r>
 800b19a:	b92a      	cbnz	r2, 800b1a8 <_realloc_r+0x24>
 800b19c:	f7ff f92c 	bl	800a3f8 <_free_r>
 800b1a0:	4625      	mov	r5, r4
 800b1a2:	4628      	mov	r0, r5
 800b1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1a8:	f000 f906 	bl	800b3b8 <_malloc_usable_size_r>
 800b1ac:	4284      	cmp	r4, r0
 800b1ae:	4607      	mov	r7, r0
 800b1b0:	d802      	bhi.n	800b1b8 <_realloc_r+0x34>
 800b1b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b1b6:	d812      	bhi.n	800b1de <_realloc_r+0x5a>
 800b1b8:	4621      	mov	r1, r4
 800b1ba:	4640      	mov	r0, r8
 800b1bc:	f7ff f988 	bl	800a4d0 <_malloc_r>
 800b1c0:	4605      	mov	r5, r0
 800b1c2:	2800      	cmp	r0, #0
 800b1c4:	d0ed      	beq.n	800b1a2 <_realloc_r+0x1e>
 800b1c6:	42bc      	cmp	r4, r7
 800b1c8:	4622      	mov	r2, r4
 800b1ca:	4631      	mov	r1, r6
 800b1cc:	bf28      	it	cs
 800b1ce:	463a      	movcs	r2, r7
 800b1d0:	f7fe fd6a 	bl	8009ca8 <memcpy>
 800b1d4:	4631      	mov	r1, r6
 800b1d6:	4640      	mov	r0, r8
 800b1d8:	f7ff f90e 	bl	800a3f8 <_free_r>
 800b1dc:	e7e1      	b.n	800b1a2 <_realloc_r+0x1e>
 800b1de:	4635      	mov	r5, r6
 800b1e0:	e7df      	b.n	800b1a2 <_realloc_r+0x1e>

0800b1e2 <_raise_r>:
 800b1e2:	291f      	cmp	r1, #31
 800b1e4:	b538      	push	{r3, r4, r5, lr}
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	460d      	mov	r5, r1
 800b1ea:	d904      	bls.n	800b1f6 <_raise_r+0x14>
 800b1ec:	2316      	movs	r3, #22
 800b1ee:	6003      	str	r3, [r0, #0]
 800b1f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1f4:	bd38      	pop	{r3, r4, r5, pc}
 800b1f6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b1f8:	b112      	cbz	r2, 800b200 <_raise_r+0x1e>
 800b1fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b1fe:	b94b      	cbnz	r3, 800b214 <_raise_r+0x32>
 800b200:	4620      	mov	r0, r4
 800b202:	f000 f831 	bl	800b268 <_getpid_r>
 800b206:	462a      	mov	r2, r5
 800b208:	4601      	mov	r1, r0
 800b20a:	4620      	mov	r0, r4
 800b20c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b210:	f000 b818 	b.w	800b244 <_kill_r>
 800b214:	2b01      	cmp	r3, #1
 800b216:	d00a      	beq.n	800b22e <_raise_r+0x4c>
 800b218:	1c59      	adds	r1, r3, #1
 800b21a:	d103      	bne.n	800b224 <_raise_r+0x42>
 800b21c:	2316      	movs	r3, #22
 800b21e:	6003      	str	r3, [r0, #0]
 800b220:	2001      	movs	r0, #1
 800b222:	e7e7      	b.n	800b1f4 <_raise_r+0x12>
 800b224:	2400      	movs	r4, #0
 800b226:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b22a:	4628      	mov	r0, r5
 800b22c:	4798      	blx	r3
 800b22e:	2000      	movs	r0, #0
 800b230:	e7e0      	b.n	800b1f4 <_raise_r+0x12>
	...

0800b234 <raise>:
 800b234:	4b02      	ldr	r3, [pc, #8]	; (800b240 <raise+0xc>)
 800b236:	4601      	mov	r1, r0
 800b238:	6818      	ldr	r0, [r3, #0]
 800b23a:	f7ff bfd2 	b.w	800b1e2 <_raise_r>
 800b23e:	bf00      	nop
 800b240:	20000060 	.word	0x20000060

0800b244 <_kill_r>:
 800b244:	b538      	push	{r3, r4, r5, lr}
 800b246:	4d07      	ldr	r5, [pc, #28]	; (800b264 <_kill_r+0x20>)
 800b248:	2300      	movs	r3, #0
 800b24a:	4604      	mov	r4, r0
 800b24c:	4608      	mov	r0, r1
 800b24e:	4611      	mov	r1, r2
 800b250:	602b      	str	r3, [r5, #0]
 800b252:	f7f7 ffe1 	bl	8003218 <_kill>
 800b256:	1c43      	adds	r3, r0, #1
 800b258:	d102      	bne.n	800b260 <_kill_r+0x1c>
 800b25a:	682b      	ldr	r3, [r5, #0]
 800b25c:	b103      	cbz	r3, 800b260 <_kill_r+0x1c>
 800b25e:	6023      	str	r3, [r4, #0]
 800b260:	bd38      	pop	{r3, r4, r5, pc}
 800b262:	bf00      	nop
 800b264:	200005b4 	.word	0x200005b4

0800b268 <_getpid_r>:
 800b268:	f7f7 bfce 	b.w	8003208 <_getpid>

0800b26c <__sread>:
 800b26c:	b510      	push	{r4, lr}
 800b26e:	460c      	mov	r4, r1
 800b270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b274:	f000 f8a8 	bl	800b3c8 <_read_r>
 800b278:	2800      	cmp	r0, #0
 800b27a:	bfab      	itete	ge
 800b27c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b27e:	89a3      	ldrhlt	r3, [r4, #12]
 800b280:	181b      	addge	r3, r3, r0
 800b282:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b286:	bfac      	ite	ge
 800b288:	6563      	strge	r3, [r4, #84]	; 0x54
 800b28a:	81a3      	strhlt	r3, [r4, #12]
 800b28c:	bd10      	pop	{r4, pc}

0800b28e <__swrite>:
 800b28e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b292:	461f      	mov	r7, r3
 800b294:	898b      	ldrh	r3, [r1, #12]
 800b296:	05db      	lsls	r3, r3, #23
 800b298:	4605      	mov	r5, r0
 800b29a:	460c      	mov	r4, r1
 800b29c:	4616      	mov	r6, r2
 800b29e:	d505      	bpl.n	800b2ac <__swrite+0x1e>
 800b2a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2a4:	2302      	movs	r3, #2
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	f000 f874 	bl	800b394 <_lseek_r>
 800b2ac:	89a3      	ldrh	r3, [r4, #12]
 800b2ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2b6:	81a3      	strh	r3, [r4, #12]
 800b2b8:	4632      	mov	r2, r6
 800b2ba:	463b      	mov	r3, r7
 800b2bc:	4628      	mov	r0, r5
 800b2be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2c2:	f000 b823 	b.w	800b30c <_write_r>

0800b2c6 <__sseek>:
 800b2c6:	b510      	push	{r4, lr}
 800b2c8:	460c      	mov	r4, r1
 800b2ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2ce:	f000 f861 	bl	800b394 <_lseek_r>
 800b2d2:	1c43      	adds	r3, r0, #1
 800b2d4:	89a3      	ldrh	r3, [r4, #12]
 800b2d6:	bf15      	itete	ne
 800b2d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b2da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b2de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b2e2:	81a3      	strheq	r3, [r4, #12]
 800b2e4:	bf18      	it	ne
 800b2e6:	81a3      	strhne	r3, [r4, #12]
 800b2e8:	bd10      	pop	{r4, pc}

0800b2ea <__sclose>:
 800b2ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2ee:	f000 b81f 	b.w	800b330 <_close_r>

0800b2f2 <__ascii_wctomb>:
 800b2f2:	b149      	cbz	r1, 800b308 <__ascii_wctomb+0x16>
 800b2f4:	2aff      	cmp	r2, #255	; 0xff
 800b2f6:	bf85      	ittet	hi
 800b2f8:	238a      	movhi	r3, #138	; 0x8a
 800b2fa:	6003      	strhi	r3, [r0, #0]
 800b2fc:	700a      	strbls	r2, [r1, #0]
 800b2fe:	f04f 30ff 	movhi.w	r0, #4294967295
 800b302:	bf98      	it	ls
 800b304:	2001      	movls	r0, #1
 800b306:	4770      	bx	lr
 800b308:	4608      	mov	r0, r1
 800b30a:	4770      	bx	lr

0800b30c <_write_r>:
 800b30c:	b538      	push	{r3, r4, r5, lr}
 800b30e:	4d07      	ldr	r5, [pc, #28]	; (800b32c <_write_r+0x20>)
 800b310:	4604      	mov	r4, r0
 800b312:	4608      	mov	r0, r1
 800b314:	4611      	mov	r1, r2
 800b316:	2200      	movs	r2, #0
 800b318:	602a      	str	r2, [r5, #0]
 800b31a:	461a      	mov	r2, r3
 800b31c:	f7f7 ffb3 	bl	8003286 <_write>
 800b320:	1c43      	adds	r3, r0, #1
 800b322:	d102      	bne.n	800b32a <_write_r+0x1e>
 800b324:	682b      	ldr	r3, [r5, #0]
 800b326:	b103      	cbz	r3, 800b32a <_write_r+0x1e>
 800b328:	6023      	str	r3, [r4, #0]
 800b32a:	bd38      	pop	{r3, r4, r5, pc}
 800b32c:	200005b4 	.word	0x200005b4

0800b330 <_close_r>:
 800b330:	b538      	push	{r3, r4, r5, lr}
 800b332:	4d06      	ldr	r5, [pc, #24]	; (800b34c <_close_r+0x1c>)
 800b334:	2300      	movs	r3, #0
 800b336:	4604      	mov	r4, r0
 800b338:	4608      	mov	r0, r1
 800b33a:	602b      	str	r3, [r5, #0]
 800b33c:	f7f7 ffbf 	bl	80032be <_close>
 800b340:	1c43      	adds	r3, r0, #1
 800b342:	d102      	bne.n	800b34a <_close_r+0x1a>
 800b344:	682b      	ldr	r3, [r5, #0]
 800b346:	b103      	cbz	r3, 800b34a <_close_r+0x1a>
 800b348:	6023      	str	r3, [r4, #0]
 800b34a:	bd38      	pop	{r3, r4, r5, pc}
 800b34c:	200005b4 	.word	0x200005b4

0800b350 <_fstat_r>:
 800b350:	b538      	push	{r3, r4, r5, lr}
 800b352:	4d07      	ldr	r5, [pc, #28]	; (800b370 <_fstat_r+0x20>)
 800b354:	2300      	movs	r3, #0
 800b356:	4604      	mov	r4, r0
 800b358:	4608      	mov	r0, r1
 800b35a:	4611      	mov	r1, r2
 800b35c:	602b      	str	r3, [r5, #0]
 800b35e:	f7f7 ffba 	bl	80032d6 <_fstat>
 800b362:	1c43      	adds	r3, r0, #1
 800b364:	d102      	bne.n	800b36c <_fstat_r+0x1c>
 800b366:	682b      	ldr	r3, [r5, #0]
 800b368:	b103      	cbz	r3, 800b36c <_fstat_r+0x1c>
 800b36a:	6023      	str	r3, [r4, #0]
 800b36c:	bd38      	pop	{r3, r4, r5, pc}
 800b36e:	bf00      	nop
 800b370:	200005b4 	.word	0x200005b4

0800b374 <_isatty_r>:
 800b374:	b538      	push	{r3, r4, r5, lr}
 800b376:	4d06      	ldr	r5, [pc, #24]	; (800b390 <_isatty_r+0x1c>)
 800b378:	2300      	movs	r3, #0
 800b37a:	4604      	mov	r4, r0
 800b37c:	4608      	mov	r0, r1
 800b37e:	602b      	str	r3, [r5, #0]
 800b380:	f7f7 ffb9 	bl	80032f6 <_isatty>
 800b384:	1c43      	adds	r3, r0, #1
 800b386:	d102      	bne.n	800b38e <_isatty_r+0x1a>
 800b388:	682b      	ldr	r3, [r5, #0]
 800b38a:	b103      	cbz	r3, 800b38e <_isatty_r+0x1a>
 800b38c:	6023      	str	r3, [r4, #0]
 800b38e:	bd38      	pop	{r3, r4, r5, pc}
 800b390:	200005b4 	.word	0x200005b4

0800b394 <_lseek_r>:
 800b394:	b538      	push	{r3, r4, r5, lr}
 800b396:	4d07      	ldr	r5, [pc, #28]	; (800b3b4 <_lseek_r+0x20>)
 800b398:	4604      	mov	r4, r0
 800b39a:	4608      	mov	r0, r1
 800b39c:	4611      	mov	r1, r2
 800b39e:	2200      	movs	r2, #0
 800b3a0:	602a      	str	r2, [r5, #0]
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	f7f7 ffb2 	bl	800330c <_lseek>
 800b3a8:	1c43      	adds	r3, r0, #1
 800b3aa:	d102      	bne.n	800b3b2 <_lseek_r+0x1e>
 800b3ac:	682b      	ldr	r3, [r5, #0]
 800b3ae:	b103      	cbz	r3, 800b3b2 <_lseek_r+0x1e>
 800b3b0:	6023      	str	r3, [r4, #0]
 800b3b2:	bd38      	pop	{r3, r4, r5, pc}
 800b3b4:	200005b4 	.word	0x200005b4

0800b3b8 <_malloc_usable_size_r>:
 800b3b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3bc:	1f18      	subs	r0, r3, #4
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	bfbc      	itt	lt
 800b3c2:	580b      	ldrlt	r3, [r1, r0]
 800b3c4:	18c0      	addlt	r0, r0, r3
 800b3c6:	4770      	bx	lr

0800b3c8 <_read_r>:
 800b3c8:	b538      	push	{r3, r4, r5, lr}
 800b3ca:	4d07      	ldr	r5, [pc, #28]	; (800b3e8 <_read_r+0x20>)
 800b3cc:	4604      	mov	r4, r0
 800b3ce:	4608      	mov	r0, r1
 800b3d0:	4611      	mov	r1, r2
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	602a      	str	r2, [r5, #0]
 800b3d6:	461a      	mov	r2, r3
 800b3d8:	f7f7 ff38 	bl	800324c <_read>
 800b3dc:	1c43      	adds	r3, r0, #1
 800b3de:	d102      	bne.n	800b3e6 <_read_r+0x1e>
 800b3e0:	682b      	ldr	r3, [r5, #0]
 800b3e2:	b103      	cbz	r3, 800b3e6 <_read_r+0x1e>
 800b3e4:	6023      	str	r3, [r4, #0]
 800b3e6:	bd38      	pop	{r3, r4, r5, pc}
 800b3e8:	200005b4 	.word	0x200005b4

0800b3ec <_init>:
 800b3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ee:	bf00      	nop
 800b3f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3f2:	bc08      	pop	{r3}
 800b3f4:	469e      	mov	lr, r3
 800b3f6:	4770      	bx	lr

0800b3f8 <_fini>:
 800b3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3fa:	bf00      	nop
 800b3fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3fe:	bc08      	pop	{r3}
 800b400:	469e      	mov	lr, r3
 800b402:	4770      	bx	lr
